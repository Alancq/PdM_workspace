
nucleof767_prueba_tp5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d58  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08007f58  08007f58  00017f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084bc  080084bc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  080084bc  080084bc  000184bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084c4  080084c4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084c4  080084c4  000184c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080084cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001f0  080086bc  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080086bc  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2d3  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bd  00000000  00000000  0002d4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002f5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a047  00000000  00000000  000307f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db73  00000000  00000000  0005a83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa806  00000000  00000000  000683b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162bb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003874  00000000  00000000  00162c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	08007f40 	.word	0x08007f40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	08007f40 	.word	0x08007f40

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009e2:	f000 fd67 	bl	80014b4 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80009e6:	f000 f847 	bl	8000a78 <SystemClock_Config>

	/* Initialize BSP Led for blue led (LED2) */
	BSP_LED_Init(LED1);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 fc78 	bl	80012e0 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f000 fc75 	bl	80012e0 <BSP_LED_Init>

	/* Initialize BSP for button */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80009f6:	2100      	movs	r1, #0
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 fcf1 	bl	80013e0 <BSP_PB_Init>
	if(!uartInit()) {
 80009fe:	f000 fc11 	bl	8001224 <uartInit>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f083 0301 	eor.w	r3, r3, #1
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <main+0x36>
		Error_Handler();
 8000a0e:	f000 f8a5 	bl	8000b5c <Error_Handler>
	}
	/* Start the FSM */
	debounceFSM_init();
 8000a12:	f000 fb1f 	bl	8001054 <debounceFSM_init>

	/* Variable definitions */
	bool_t delaySelect = false;
 8000a16:	2300      	movs	r3, #0
 8000a18:	73fb      	strb	r3, [r7, #15]
	delay_t Delays;

	/* Initialize delay structure and run it */
	delayInit(&Delays, LEDSEC1);
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2164      	movs	r1, #100	; 0x64
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fbb8 	bl	8001194 <delayInit>
	delayRead(&Delays);
 8000a24:	463b      	mov	r3, r7
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fbc5 	bl	80011b6 <delayRead>
	//uint8_t message[] = "Hola Mundo!\r\n";
	/* Infinite loop */
		while (1)
		{

			debounceFSM_update();
 8000a2c:	f000 fb22 	bl	8001074 <debounceFSM_update>

			/* revisa si el boton fue apretado */
			if(readKey()){
 8000a30:	f000 fb98 	bl	8001164 <readKey>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d012      	beq.n	8000a60 <main+0x84>
				/* cambia las velocidades del blink LED2*/
				if(delaySelect ) {
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d007      	beq.n	8000a50 <main+0x74>
					delaySelect = false;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]
					delayWrite(&Delays, LEDSEC1);
 8000a44:	463b      	mov	r3, r7
 8000a46:	2164      	movs	r1, #100	; 0x64
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fbdc 	bl	8001206 <delayWrite>
 8000a4e:	e007      	b.n	8000a60 <main+0x84>
				}
				else{
					delaySelect = true;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
					delayWrite(&Delays, LEDSEC2);
 8000a54:	463b      	mov	r3, r7
 8000a56:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fbd3 	bl	8001206 <delayWrite>
				}

			}
			if(delayRead(&Delays)){
 8000a60:	463b      	mov	r3, r7
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fba7 	bl	80011b6 <delayRead>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0de      	beq.n	8000a2c <main+0x50>
				BSP_LED_Toggle(LED2);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 fc9c 	bl	80013ac <BSP_LED_Toggle>
			debounceFSM_update();
 8000a74:	e7da      	b.n	8000a2c <main+0x50>
	...

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2234      	movs	r2, #52	; 0x34
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 ff1e 	bl	80038c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a9c:	f001 f872 	bl	8001b84 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a2b      	ldr	r2, [pc, #172]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <SystemClock_Config+0xe0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac0:	4a25      	ldr	r2, [pc, #148]	; (8000b58 <SystemClock_Config+0xe0>)
 8000ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <SystemClock_Config+0xe0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000adc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000aec:	2360      	movs	r3, #96	; 0x60
 8000aee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 f89f 	bl	8001c44 <HAL_RCC_OscConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b0c:	f000 f826 	bl	8000b5c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b10:	f001 f848 	bl	8001ba4 <HAL_PWREx_EnableOverDrive>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b1a:	f000 f81f 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	230f      	movs	r3, #15
 8000b20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b22:	2302      	movs	r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	2103      	movs	r1, #3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fb30 	bl	80021a0 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b46:	f000 f809 	bl	8000b5c <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3750      	adds	r7, #80	; 0x50
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40007000 	.word	0x40007000

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	BSP_LED_On(LED1);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 fc09 	bl	8001378 <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b66:	b672      	cpsid	i
}
 8000b68:	bf00      	nop
  __disable_irq();
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <Error_Handler+0xe>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x44>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0b2      	sub	sp, #200	; 0xc8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	2290      	movs	r2, #144	; 0x90
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 fe77 	bl	80038c8 <memset>
  if(huart->Instance==UART4)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a7f      	ldr	r2, [pc, #508]	; (8000ddc <HAL_UART_MspInit+0x228>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d15e      	bne.n	8000ca2 <HAL_UART_MspInit+0xee>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fcfa 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bfe:	f7ff ffad 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c02:	4b77      	ldr	r3, [pc, #476]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a76      	ldr	r2, [pc, #472]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b74      	ldr	r3, [pc, #464]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c16:	623b      	str	r3, [r7, #32]
 8000c18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b71      	ldr	r3, [pc, #452]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a70      	ldr	r2, [pc, #448]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b6e      	ldr	r3, [pc, #440]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
 8000c30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	4b6b      	ldr	r3, [pc, #428]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a6a      	ldr	r2, [pc, #424]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b68      	ldr	r3, [pc, #416]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c62:	2308      	movs	r3, #8
 8000c64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	485d      	ldr	r0, [pc, #372]	; (8000de4 <HAL_UART_MspInit+0x230>)
 8000c70:	f000 fd90 	bl	8001794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4853      	ldr	r0, [pc, #332]	; (8000de8 <HAL_UART_MspInit+0x234>)
 8000c9c:	f000 fd7a 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ca0:	e098      	b.n	8000dd4 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a51      	ldr	r2, [pc, #324]	; (8000dec <HAL_UART_MspInit+0x238>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d151      	bne.n	8000d50 <HAL_UART_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cac:	2340      	movs	r3, #64	; 0x40
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 fc97 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8000cc4:	f7ff ff4a 	bl	8000b5c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc8:	4b45      	ldr	r3, [pc, #276]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ccc:	4a44      	ldr	r2, [pc, #272]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd4:	4b42      	ldr	r3, [pc, #264]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b3f      	ldr	r3, [pc, #252]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	4a3e      	ldr	r2, [pc, #248]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	6313      	str	r3, [r2, #48]	; 0x30
 8000cec:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000d12:	2304      	movs	r3, #4
 8000d14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4834      	ldr	r0, [pc, #208]	; (8000df0 <HAL_UART_MspInit+0x23c>)
 8000d20:	f000 fd38 	bl	8001794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d24:	2340      	movs	r3, #64	; 0x40
 8000d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4829      	ldr	r0, [pc, #164]	; (8000df0 <HAL_UART_MspInit+0x23c>)
 8000d4a:	f000 fd23 	bl	8001794 <HAL_GPIO_Init>
}
 8000d4e:	e041      	b.n	8000dd4 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a27      	ldr	r2, [pc, #156]	; (8000df4 <HAL_UART_MspInit+0x240>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d13c      	bne.n	8000dd4 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fc3f 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8000d74:	f7ff fef2 	bl	8000b5c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_UART_MspInit+0x22c>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000da8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480a      	ldr	r0, [pc, #40]	; (8000df8 <HAL_UART_MspInit+0x244>)
 8000dd0:	f000 fce0 	bl	8001794 <HAL_GPIO_Init>
}
 8000dd4:	bf00      	nop
 8000dd6:	37c8      	adds	r7, #200	; 0xc8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40004c00 	.word	0x40004c00
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020800 	.word	0x40020800
 8000dec:	40011000 	.word	0x40011000
 8000df0:	40020400 	.word	0x40020400
 8000df4:	40004800 	.word	0x40004800
 8000df8:	40020c00 	.word	0x40020c00

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e48:	f000 fb72 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return 1;
 8000e54:	2301      	movs	r3, #1
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <_kill>:

int _kill(int pid, int sig)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e6a:	f002 fcf1 	bl	8003850 <__errno>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2216      	movs	r2, #22
 8000e72:	601a      	str	r2, [r3, #0]
  return -1;
 8000e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_exit>:

void _exit (int status)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ffe7 	bl	8000e60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e92:	e7fe      	b.n	8000e92 <_exit+0x12>

08000e94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	e00a      	b.n	8000ebc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ea6:	f3af 8000 	nop.w
 8000eaa:	4601      	mov	r1, r0
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	60ba      	str	r2, [r7, #8]
 8000eb2:	b2ca      	uxtb	r2, r1
 8000eb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dbf0      	blt.n	8000ea6 <_read+0x12>
  }

  return len;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	e009      	b.n	8000ef4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	60ba      	str	r2, [r7, #8]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbf1      	blt.n	8000ee0 <_write+0x12>
  }
  return len;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_close>:

int _close(int file)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_isatty>:

int _isatty(int file)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f002 fc56 	bl	8003850 <__errno>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <_sbrk+0x64>)
 8000fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20080000 	.word	0x20080000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	2000020c 	.word	0x2000020c
 8000fd8:	200002c0 	.word	0x200002c0

08000fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001006:	490e      	ldr	r1, [pc, #56]	; (8001040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800101c:	4c0b      	ldr	r4, [pc, #44]	; (800104c <LoopFillZerobss+0x26>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800102a:	f7ff ffd7 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f002 fc27 	bl	8003880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fcd3 	bl	80009dc <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001038:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001044:	080084cc 	.word	0x080084cc
  ldr r2, =_sbss
 8001048:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800104c:	200002bc 	.word	0x200002bc

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <debounceFSM_init>:
static delay_t delay;
static debounceState_t buttonDebounce;
static bool_t buttonPressed;


void debounceFSM_init(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

	/* pone el estado inicial a BUTTON UP*/
	buttonDebounce = BUTTON_UP;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <debounceFSM_init+0x18>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
	/*configura la estructura del delay*/
	delayInit(&delay, DEBOUNCE_TIME);
 800105e:	2128      	movs	r1, #40	; 0x28
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <debounceFSM_init+0x1c>)
 8001062:	f000 f897 	bl	8001194 <delayInit>

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000021c 	.word	0x2000021c
 8001070:	20000210 	.word	0x20000210

08001074 <debounceFSM_update>:


void debounceFSM_update(){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	switch(buttonDebounce){
 8001078:	4b35      	ldr	r3, [pc, #212]	; (8001150 <debounceFSM_update+0xdc>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d859      	bhi.n	8001134 <debounceFSM_update+0xc0>
 8001080:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <debounceFSM_update+0x14>)
 8001082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001086:	bf00      	nop
 8001088:	08001099 	.word	0x08001099
 800108c:	080010b3 	.word	0x080010b3
 8001090:	080010e7 	.word	0x080010e7
 8001094:	08001101 	.word	0x08001101
	/* ve si el boton fue apretado , y despues del delay pasa al estado falling*/
	case BUTTON_UP:

		if(BSP_PB_GetState(BUTTON_USER)){
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f9f5 	bl	8001488 <BSP_PB_GetState>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d04b      	beq.n	800113c <debounceFSM_update+0xc8>
			/* Update to next state */
			buttonDebounce = BUTTON_FALLING;
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <debounceFSM_update+0xdc>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
			/* Start the delay count */
			delayRead(&delay);
 80010aa:	482a      	ldr	r0, [pc, #168]	; (8001154 <debounceFSM_update+0xe0>)
 80010ac:	f000 f883 	bl	80011b6 <delayRead>
		}
		break;
 80010b0:	e044      	b.n	800113c <debounceFSM_update+0xc8>

	case BUTTON_FALLING:

		if(delayRead(&delay)){
 80010b2:	4828      	ldr	r0, [pc, #160]	; (8001154 <debounceFSM_update+0xe0>)
 80010b4:	f000 f87f 	bl	80011b6 <delayRead>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d040      	beq.n	8001140 <debounceFSM_update+0xcc>

			if(BSP_PB_GetState(BUTTON_USER)) {
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f9e2 	bl	8001488 <BSP_PB_GetState>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d009      	beq.n	80010de <debounceFSM_update+0x6a>

				buttonDebounce = BUTTON_DOWN;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <debounceFSM_update+0xdc>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	701a      	strb	r2, [r3, #0]
				uartSendString("FLANCO DESCENDENTE \n");
 80010d0:	4821      	ldr	r0, [pc, #132]	; (8001158 <debounceFSM_update+0xe4>)
 80010d2:	f000 f8d7 	bl	8001284 <uartSendString>

				buttonPressed = true;
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <debounceFSM_update+0xe8>)
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
			else{
				/* en caso de ruido volver al estado anterior*/
				buttonDebounce = BUTTON_UP;
			}
		}
		break;
 80010dc:	e030      	b.n	8001140 <debounceFSM_update+0xcc>
				buttonDebounce = BUTTON_UP;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <debounceFSM_update+0xdc>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
		break;
 80010e4:	e02c      	b.n	8001140 <debounceFSM_update+0xcc>

	case BUTTON_DOWN:
		if(!BSP_PB_GetState(BUTTON_USER)){
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f9ce 	bl	8001488 <BSP_PB_GetState>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d128      	bne.n	8001144 <debounceFSM_update+0xd0>
			buttonDebounce = BUTTON_RISING;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <debounceFSM_update+0xdc>)
 80010f4:	2203      	movs	r2, #3
 80010f6:	701a      	strb	r2, [r3, #0]
			delayRead(&delay);
 80010f8:	4816      	ldr	r0, [pc, #88]	; (8001154 <debounceFSM_update+0xe0>)
 80010fa:	f000 f85c 	bl	80011b6 <delayRead>
		}
		break;
 80010fe:	e021      	b.n	8001144 <debounceFSM_update+0xd0>

	case BUTTON_RISING:
		/* ve si el boton fue soltado*/
		if(delayRead(&delay)){
 8001100:	4814      	ldr	r0, [pc, #80]	; (8001154 <debounceFSM_update+0xe0>)
 8001102:	f000 f858 	bl	80011b6 <delayRead>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d01d      	beq.n	8001148 <debounceFSM_update+0xd4>
			if(!BSP_PB_GetState(BUTTON_USER)){
 800110c:	2000      	movs	r0, #0
 800110e:	f000 f9bb 	bl	8001488 <BSP_PB_GetState>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d109      	bne.n	800112c <debounceFSM_update+0xb8>
				buttonDebounce = BUTTON_UP;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <debounceFSM_update+0xdc>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
				uartSendString("FLANCO ASCENDENTE \n");
 800111e:	4810      	ldr	r0, [pc, #64]	; (8001160 <debounceFSM_update+0xec>)
 8001120:	f000 f8b0 	bl	8001284 <uartSendString>
				buttonPressed = false;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <debounceFSM_update+0xe8>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
			else{
				/* en caso de ruido volver al estado anterior*/
				buttonDebounce = BUTTON_DOWN;
			}
		}
		break;
 800112a:	e00d      	b.n	8001148 <debounceFSM_update+0xd4>
				buttonDebounce = BUTTON_DOWN;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <debounceFSM_update+0xdc>)
 800112e:	2202      	movs	r2, #2
 8001130:	701a      	strb	r2, [r3, #0]
		break;
 8001132:	e009      	b.n	8001148 <debounceFSM_update+0xd4>
	default:
		buttonDebounce = BUTTON_UP;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <debounceFSM_update+0xdc>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
		break;
 800113a:	e006      	b.n	800114a <debounceFSM_update+0xd6>
		break;
 800113c:	bf00      	nop
 800113e:	e004      	b.n	800114a <debounceFSM_update+0xd6>
		break;
 8001140:	bf00      	nop
 8001142:	e002      	b.n	800114a <debounceFSM_update+0xd6>
		break;
 8001144:	bf00      	nop
 8001146:	e000      	b.n	800114a <debounceFSM_update+0xd6>
		break;
 8001148:	bf00      	nop
	}

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000021c 	.word	0x2000021c
 8001154:	20000210 	.word	0x20000210
 8001158:	08007f58 	.word	0x08007f58
 800115c:	2000021d 	.word	0x2000021d
 8001160:	08007f70 	.word	0x08007f70

08001164 <readKey>:

//agarra la variable booleana buttonPressed generar una bandera
bool_t readKey(){
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
	bool_t flag = false;
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]
	if (buttonPressed) {
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <readKey+0x2c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d004      	beq.n	8001180 <readKey+0x1c>
		flag = true;
 8001176:	2301      	movs	r3, #1
 8001178:	71fb      	strb	r3, [r7, #7]
		buttonPressed = false;
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <readKey+0x2c>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
	}
	return flag;
 8001180:	79fb      	ldrb	r3, [r7, #7]
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	2000021d 	.word	0x2000021d

08001194 <delayInit>:
 *
 *  Created on: Mar 18, 2023
 *      Author: Alan Cornejo
 */
#include "API_delay.h"
void delayInit( delay_t * delay, tick_t duration ){
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	  delay->duration=duration;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	605a      	str	r2, [r3, #4]
	  delay->running=false;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	721a      	strb	r2, [r3, #8]

}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <delayRead>:
bool_t delayRead( delay_t * delay ){
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	if((delay->running)==false){
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7a1b      	ldrb	r3, [r3, #8]
 80011c2:	f083 0301 	eor.w	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d008      	beq.n	80011de <delayRead+0x28>
		delay->running=true;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	721a      	strb	r2, [r3, #8]
		delay->startTime=HAL_GetTick();
 80011d2:	f000 f9c1 	bl	8001558 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e00e      	b.n	80011fc <delayRead+0x46>
	}
	else{
		if(HAL_GetTick()-delay->startTime>=delay->duration){
 80011de:	f000 f9bb 	bl	8001558 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1ad2      	subs	r2, r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d304      	bcc.n	80011fc <delayRead+0x46>
			delay->running=false;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	721a      	strb	r2, [r3, #8]
			return true;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <delayRead+0x48>
		}
	}
	return false;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <delayWrite>:
void delayWrite( delay_t * delay, tick_t duration ){
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
	delay->duration=duration;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	605a      	str	r2, [r3, #4]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <uartInit>:
#include "main.h"
#define BAUD_RATE 9600
#define INIT_MSG "Uart Inicializada (115200 8N1)\n\r"
static UART_HandleTypeDef huart;
bool_t uartInit()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    // Configurar y habilitar el periférico UART utilizando HAL
    huart.Instance = USARTx; // Reemplazar USARTx por el USART utilizado
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <uartInit+0x54>)
 800122a:	4a14      	ldr	r2, [pc, #80]	; (800127c <uartInit+0x58>)
 800122c:	601a      	str	r2, [r3, #0]
    huart.Init.BaudRate = 115200;
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <uartInit+0x54>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <uartInit+0x54>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <uartInit+0x54>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <uartInit+0x54>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <uartInit+0x54>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <uartInit+0x54>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <uartInit+0x54>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart) != HAL_OK)
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <uartInit+0x54>)
 800125c:	f001 fdee 	bl	8002e3c <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <uartInit+0x46>
    {
        return false;
 8001266:	2300      	movs	r3, #0
 8001268:	e003      	b.n	8001272 <uartInit+0x4e>
    }
    uartSendString((uint8_t *)INIT_MSG);
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <uartInit+0x5c>)
 800126c:	f000 f80a 	bl	8001284 <uartSendString>
    return true;
 8001270:	2301      	movs	r3, #1
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000220 	.word	0x20000220
 800127c:	40004800 	.word	0x40004800
 8001280:	08007f84 	.word	0x08007f84

08001284 <uartSendString>:

void uartSendString(uint8_t *pstring) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	assert(pstring != NULL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d105      	bne.n	800129e <uartSendString+0x1a>
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <uartSendString+0x4c>)
 8001294:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <uartSendString+0x50>)
 8001296:	2121      	movs	r1, #33	; 0x21
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <uartSendString+0x54>)
 800129a:	f002 fabb 	bl	8003814 <__assert_func>
	//HAL_UART_Transmit(&uartHandle, pstring, strlen(pstring),0xFFFF);
    //HAL_UART_Transmit(&huart, pstring, strlen((const char *)pstring), HAL_MAX_DELAY);
	uint16_t length = strlen((const char *)pstring); // CAlculo el largo del string a enviar
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7fe ffce 	bl	8000240 <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart, pstring, length, ((length+10)*10000)/huart.Init.BaudRate); // Envio datos
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	330a      	adds	r3, #10
 80012ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <uartSendString+0x58>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	89fa      	ldrh	r2, [r7, #14]
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <uartSendString+0x58>)
 80012c4:	f001 fe08 	bl	8002ed8 <HAL_UART_Transmit>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	08007fa8 	.word	0x08007fa8
 80012d4:	08007ff8 	.word	0x08007ff8
 80012d8:	08007fb8 	.word	0x08007fb8
 80012dc:	20000220 	.word	0x20000220

080012e0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10c      	bne.n	800130a <BSP_LED_Init+0x2a>
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <BSP_LED_Init+0x8c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a1d      	ldr	r2, [pc, #116]	; (800136c <BSP_LED_Init+0x8c>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <BSP_LED_Init+0x8c>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	e00b      	b.n	8001322 <BSP_LED_Init+0x42>
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <BSP_LED_Init+0x8c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <BSP_LED_Init+0x8c>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <BSP_LED_Init+0x8c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <BSP_LED_Init+0x90>)
 8001326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <BSP_LED_Init+0x94>)
 800133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001340:	f107 0214 	add.w	r2, r7, #20
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fa24 	bl	8001794 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <BSP_LED_Init+0x94>)
 8001350:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4a06      	ldr	r2, [pc, #24]	; (8001370 <BSP_LED_Init+0x90>)
 8001358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	f000 fbdc 	bl	8001b1c <HAL_GPIO_WritePin>
}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	08008008 	.word	0x08008008
 8001374:	20000004 	.word	0x20000004

08001378 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <BSP_LED_On+0x2c>)
 8001386:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <BSP_LED_On+0x30>)
 800138e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001392:	2201      	movs	r2, #1
 8001394:	4619      	mov	r1, r3
 8001396:	f000 fbc1 	bl	8001b1c <HAL_GPIO_WritePin>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000004 	.word	0x20000004
 80013a8:	08008008 	.word	0x08008008

080013ac <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3 
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <BSP_LED_Toggle+0x2c>)
 80013ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	4906      	ldr	r1, [pc, #24]	; (80013dc <BSP_LED_Toggle+0x30>)
 80013c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4610      	mov	r0, r2
 80013ca:	f000 fbc0 	bl	8001b4e <HAL_GPIO_TogglePin>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000004 	.word	0x20000004
 80013dc:	08008008 	.word	0x08008008

080013e0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	460a      	mov	r2, r1
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	4613      	mov	r3, r2
 80013ee:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <BSP_PB_Init+0xa0>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4a22      	ldr	r2, [pc, #136]	; (8001480 <BSP_PB_Init+0xa0>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <BSP_PB_Init+0xa0>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d112      	bne.n	8001434 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800140e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001412:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001418:	2302      	movs	r3, #2
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4a18      	ldr	r2, [pc, #96]	; (8001484 <BSP_PB_Init+0xa4>)
 8001424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001428:	f107 020c 	add.w	r2, r7, #12
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f9b0 	bl	8001794 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d11d      	bne.n	8001476 <BSP_PB_Init+0x96>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800143a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001444:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001448:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <BSP_PB_Init+0xa4>)
 800144e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001452:	f107 020c 	add.w	r2, r7, #12
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f99b 	bl	8001794 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800145e:	2328      	movs	r3, #40	; 0x28
 8001460:	b25b      	sxtb	r3, r3
 8001462:	2200      	movs	r2, #0
 8001464:	210f      	movs	r1, #15
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f95d 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800146c:	2328      	movs	r3, #40	; 0x28
 800146e:	b25b      	sxtb	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f974 	bl	800175e <HAL_NVIC_EnableIRQ>
  }
}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	20000010 	.word	0x20000010

08001488 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <BSP_PB_GetState+0x28>)
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fb23 	bl	8001aec <HAL_GPIO_ReadPin>
 80014a6:	4603      	mov	r3, r0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000010 	.word	0x20000010

080014b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f929 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f806 	bl	80014d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fb52 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x54>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x58>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f943 	bl	800177a <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800150c:	f000 f90b 	bl	8001726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_InitTick+0x5c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000000 	.word	0x20000000
 8001528:	20000018 	.word	0x20000018
 800152c:	20000014 	.word	0x20000014

08001530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000018 	.word	0x20000018
 8001554:	200002a8 	.word	0x200002a8

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	200002a8 	.word	0x200002a8

08001570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	4313      	orrs	r3, r2
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x40>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	05fa0000 	.word	0x05fa0000

080015b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db0b      	blt.n	80015fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <__NVIC_EnableIRQ+0x38>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2001      	movs	r0, #1
 80015f6:	fa00 f202 	lsl.w	r2, r0, r2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	; (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016dc:	d301      	bcc.n	80016e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <SysTick_Config+0x40>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ea:	210f      	movs	r1, #15
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f0:	f7ff ff8e 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SysTick_Config+0x40>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <SysTick_Config+0x40>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff29 	bl	8001570 <__NVIC_SetPriorityGrouping>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001738:	f7ff ff3e 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 800173c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff ff8e 	bl	8001664 <NVIC_EncodePriority>
 8001748:	4602      	mov	r2, r0
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff5d 	bl	8001610 <__NVIC_SetPriority>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff31 	bl	80015d4 <__NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ffa2 	bl	80016cc <SysTick_Config>
 8001788:	4603      	mov	r3, r0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e175      	b.n	8001aa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	f040 8164 	bne.w	8001a9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d005      	beq.n	80017ea <HAL_GPIO_Init+0x56>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d130      	bne.n	800184c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68da      	ldr	r2, [r3, #12]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 0201 	and.w	r2, r3, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b03      	cmp	r3, #3
 8001856:	d017      	beq.n	8001888 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d123      	bne.n	80018dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	69b9      	ldr	r1, [r7, #24]
 80018d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80be 	beq.w	8001a9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_GPIO_Init+0x324>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a65      	ldr	r2, [pc, #404]	; (8001ab8 <HAL_GPIO_Init+0x324>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <HAL_GPIO_Init+0x324>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001936:	4a61      	ldr	r2, [pc, #388]	; (8001abc <HAL_GPIO_Init+0x328>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_GPIO_Init+0x32c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d037      	beq.n	80019d2 <HAL_GPIO_Init+0x23e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a57      	ldr	r2, [pc, #348]	; (8001ac4 <HAL_GPIO_Init+0x330>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d031      	beq.n	80019ce <HAL_GPIO_Init+0x23a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a56      	ldr	r2, [pc, #344]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d02b      	beq.n	80019ca <HAL_GPIO_Init+0x236>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a55      	ldr	r2, [pc, #340]	; (8001acc <HAL_GPIO_Init+0x338>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d025      	beq.n	80019c6 <HAL_GPIO_Init+0x232>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a54      	ldr	r2, [pc, #336]	; (8001ad0 <HAL_GPIO_Init+0x33c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01f      	beq.n	80019c2 <HAL_GPIO_Init+0x22e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a53      	ldr	r2, [pc, #332]	; (8001ad4 <HAL_GPIO_Init+0x340>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d019      	beq.n	80019be <HAL_GPIO_Init+0x22a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a52      	ldr	r2, [pc, #328]	; (8001ad8 <HAL_GPIO_Init+0x344>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0x226>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a51      	ldr	r2, [pc, #324]	; (8001adc <HAL_GPIO_Init+0x348>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00d      	beq.n	80019b6 <HAL_GPIO_Init+0x222>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a50      	ldr	r2, [pc, #320]	; (8001ae0 <HAL_GPIO_Init+0x34c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <HAL_GPIO_Init+0x21e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4f      	ldr	r2, [pc, #316]	; (8001ae4 <HAL_GPIO_Init+0x350>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_GPIO_Init+0x21a>
 80019aa:	2309      	movs	r3, #9
 80019ac:	e012      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019ae:	230a      	movs	r3, #10
 80019b0:	e010      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019b2:	2308      	movs	r3, #8
 80019b4:	e00e      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e00c      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019ba:	2306      	movs	r3, #6
 80019bc:	e00a      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019be:	2305      	movs	r3, #5
 80019c0:	e008      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e004      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e002      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_GPIO_Init+0x240>
 80019d2:	2300      	movs	r3, #0
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	f002 0203 	and.w	r2, r2, #3
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	4093      	lsls	r3, r2
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019e4:	4935      	ldr	r1, [pc, #212]	; (8001abc <HAL_GPIO_Init+0x328>)
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f2:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <HAL_GPIO_Init+0x354>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a16:	4a34      	ldr	r2, [pc, #208]	; (8001ae8 <HAL_GPIO_Init+0x354>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a1c:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <HAL_GPIO_Init+0x354>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a40:	4a29      	ldr	r2, [pc, #164]	; (8001ae8 <HAL_GPIO_Init+0x354>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a46:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <HAL_GPIO_Init+0x354>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <HAL_GPIO_Init+0x354>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_GPIO_Init+0x354>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <HAL_GPIO_Init+0x354>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b0f      	cmp	r3, #15
 8001aa4:	f67f ae86 	bls.w	80017b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020c00 	.word	0x40020c00
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40021400 	.word	0x40021400
 8001ad8:	40021800 	.word	0x40021800
 8001adc:	40021c00 	.word	0x40021c00
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40022400 	.word	0x40022400
 8001ae8:	40013c00 	.word	0x40013c00

08001aec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e001      	b.n	8001b0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b2c:	787b      	ldrb	r3, [r7, #1]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b32:	887a      	ldrh	r2, [r7, #2]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b38:	e003      	b.n	8001b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	041a      	lsls	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	619a      	str	r2, [r3, #24]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b085      	sub	sp, #20
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	460b      	mov	r3, r1
 8001b58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b60:	887a      	ldrh	r2, [r7, #2]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4013      	ands	r3, r2
 8001b66:	041a      	lsls	r2, r3, #16
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	887b      	ldrh	r3, [r7, #2]
 8001b6e:	400b      	ands	r3, r1
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40007000 	.word	0x40007000

08001ba4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd2:	f7ff fcc1 	bl	8001558 <HAL_GetTick>
 8001bd6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bd8:	e009      	b.n	8001bee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bda:	f7ff fcbd 	bl	8001558 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001be8:	d901      	bls.n	8001bee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e022      	b.n	8001c34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bee:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfa:	d1ee      	bne.n	8001bda <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c08:	f7ff fca6 	bl	8001558 <HAL_GetTick>
 8001c0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c0e:	e009      	b.n	8001c24 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c10:	f7ff fca2 	bl	8001558 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c1e:	d901      	bls.n	8001c24 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e007      	b.n	8001c34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c30:	d1ee      	bne.n	8001c10 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000

08001c44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e29b      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8087 	beq.w	8001d76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d00c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c74:	4b93      	ldr	r3, [pc, #588]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d112      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62>
 8001c80:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8e:	4b8d      	ldr	r3, [pc, #564]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d06c      	beq.n	8001d74 <HAL_RCC_OscConfig+0x130>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d168      	bne.n	8001d74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e275      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x7a>
 8001cb0:	4b84      	ldr	r3, [pc, #528]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a83      	ldr	r2, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e02e      	b.n	8001d1c <HAL_RCC_OscConfig+0xd8>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x9c>
 8001cc6:	4b7f      	ldr	r3, [pc, #508]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a7e      	ldr	r2, [pc, #504]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b7c      	ldr	r3, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a7b      	ldr	r2, [pc, #492]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e01d      	b.n	8001d1c <HAL_RCC_OscConfig+0xd8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0xc0>
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a75      	ldr	r2, [pc, #468]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b73      	ldr	r3, [pc, #460]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a72      	ldr	r2, [pc, #456]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0xd8>
 8001d04:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a6e      	ldr	r2, [pc, #440]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b6c      	ldr	r3, [pc, #432]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a6b      	ldr	r2, [pc, #428]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff fc18 	bl	8001558 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fc14 	bl	8001558 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e229      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0xe8>
 8001d4a:	e014      	b.n	8001d76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fc04 	bl	8001558 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff fc00 	bl	8001558 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	; 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e215      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x110>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d069      	beq.n	8001e56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d82:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8e:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d11c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x190>
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x17a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e1e9      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	493d      	ldr	r1, [pc, #244]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	e040      	b.n	8001e56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d023      	beq.n	8001e24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff fbb6 	bl	8001558 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff fbb2 	bl	8001558 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1c7      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4929      	ldr	r1, [pc, #164]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
 8001e22:	e018      	b.n	8001e56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a26      	ldr	r2, [pc, #152]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001e2a:	f023 0301 	bic.w	r3, r3, #1
 8001e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff fb92 	bl	8001558 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e38:	f7ff fb8e 	bl	8001558 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e1a3      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d038      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d019      	beq.n	8001e9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6e:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e76:	f7ff fb6f 	bl	8001558 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7e:	f7ff fb6b 	bl	8001558 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e180      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x23a>
 8001e9c:	e01a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x280>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fb55 	bl	8001558 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fb51 	bl	8001558 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d903      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e166      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
 8001ec4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	4b92      	ldr	r3, [pc, #584]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ee      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a4 	beq.w	800202a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee2:	4b8c      	ldr	r3, [pc, #560]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10d      	bne.n	8001f0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	4b89      	ldr	r3, [pc, #548]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a88      	ldr	r2, [pc, #544]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b86      	ldr	r3, [pc, #536]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f06:	2301      	movs	r3, #1
 8001f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0a:	4b83      	ldr	r3, [pc, #524]	; (8002118 <HAL_RCC_OscConfig+0x4d4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d118      	bne.n	8001f48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f16:	4b80      	ldr	r3, [pc, #512]	; (8002118 <HAL_RCC_OscConfig+0x4d4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7f      	ldr	r2, [pc, #508]	; (8002118 <HAL_RCC_OscConfig+0x4d4>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f22:	f7ff fb19 	bl	8001558 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2a:	f7ff fb15 	bl	8001558 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b64      	cmp	r3, #100	; 0x64
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e12a      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3c:	4b76      	ldr	r3, [pc, #472]	; (8002118 <HAL_RCC_OscConfig+0x4d4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x31a>
 8001f50:	4b70      	ldr	r3, [pc, #448]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	4a6f      	ldr	r2, [pc, #444]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5c:	e02d      	b.n	8001fba <HAL_RCC_OscConfig+0x376>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x33c>
 8001f66:	4b6b      	ldr	r3, [pc, #428]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a6a      	ldr	r2, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
 8001f72:	4b68      	ldr	r3, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	4a67      	ldr	r2, [pc, #412]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7e:	e01c      	b.n	8001fba <HAL_RCC_OscConfig+0x376>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	d10c      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x35e>
 8001f88:	4b62      	ldr	r3, [pc, #392]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	4a61      	ldr	r2, [pc, #388]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70
 8001f94:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	4a5e      	ldr	r2, [pc, #376]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa0:	e00b      	b.n	8001fba <HAL_RCC_OscConfig+0x376>
 8001fa2:	4b5c      	ldr	r3, [pc, #368]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa6:	4a5b      	ldr	r2, [pc, #364]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	6713      	str	r3, [r2, #112]	; 0x70
 8001fae:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a58      	ldr	r2, [pc, #352]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d015      	beq.n	8001fee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fac9 	bl	8001558 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff fac5 	bl	8001558 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0d8      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ee      	beq.n	8001fca <HAL_RCC_OscConfig+0x386>
 8001fec:	e014      	b.n	8002018 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fee:	f7ff fab3 	bl	8001558 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff faaf 	bl	8001558 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e0c2      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200c:	4b41      	ldr	r3, [pc, #260]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ee      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d105      	bne.n	800202a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a3c      	ldr	r2, [pc, #240]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8002024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80ae 	beq.w	8002190 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002034:	4b37      	ldr	r3, [pc, #220]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d06d      	beq.n	800211c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d14b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a31      	ldr	r2, [pc, #196]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 800204e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff fa80 	bl	8001558 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff fa7c 	bl	8001558 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e091      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	3b01      	subs	r3, #1
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	071b      	lsls	r3, r3, #28
 80020a6:	491b      	ldr	r1, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ac:	4b19      	ldr	r3, [pc, #100]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a18      	ldr	r2, [pc, #96]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fa4e 	bl	8001558 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff fa4a 	bl	8001558 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e05f      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x47c>
 80020de:	e057      	b.n	8002190 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff fa34 	bl	8001558 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f4:	f7ff fa30 	bl	8001558 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e045      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_RCC_OscConfig+0x4d0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4b0>
 8002112:	e03d      	b.n	8002190 <HAL_RCC_OscConfig+0x54c>
 8002114:	40023800 	.word	0x40023800
 8002118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_RCC_OscConfig+0x558>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d030      	beq.n	800218c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d129      	bne.n	800218c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d122      	bne.n	800218c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002152:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002154:	4293      	cmp	r3, r2
 8002156:	d119      	bne.n	800218c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	085b      	lsrs	r3, r3, #1
 8002164:	3b01      	subs	r3, #1
 8002166:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d10f      	bne.n	800218c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d107      	bne.n	800218c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800

080021a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0d0      	b.n	800235a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b8:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d910      	bls.n	80021e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 020f 	bic.w	r2, r3, #15
 80021ce:	4965      	ldr	r1, [pc, #404]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b63      	ldr	r3, [pc, #396]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0b8      	b.n	800235a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002200:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800220a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002218:	4b53      	ldr	r3, [pc, #332]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a52      	ldr	r2, [pc, #328]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 800221e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002222:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002224:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	494d      	ldr	r1, [pc, #308]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d040      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e07f      	b.n	800235a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e073      	b.n	800235a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06b      	b.n	800235a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4936      	ldr	r1, [pc, #216]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002294:	f7ff f960 	bl	8001558 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7ff f95c 	bl	8001558 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e053      	b.n	800235a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c4:	4b27      	ldr	r3, [pc, #156]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d210      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 020f 	bic.w	r2, r3, #15
 80022da:	4922      	ldr	r1, [pc, #136]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e032      	b.n	800235a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4916      	ldr	r1, [pc, #88]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	490e      	ldr	r1, [pc, #56]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002332:	f000 f821 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8002336:	4602      	mov	r2, r0
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	490a      	ldr	r1, [pc, #40]	; (800236c <HAL_RCC_ClockConfig+0x1cc>)
 8002344:	5ccb      	ldrb	r3, [r1, r3]
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_RCC_ClockConfig+0x1d0>)
 800234c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCC_ClockConfig+0x1d4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f8bc 	bl	80014d0 <HAL_InitTick>

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023c00 	.word	0x40023c00
 8002368:	40023800 	.word	0x40023800
 800236c:	08007fe0 	.word	0x08007fe0
 8002370:	20000000 	.word	0x20000000
 8002374:	20000014 	.word	0x20000014

08002378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800237c:	b094      	sub	sp, #80	; 0x50
 800237e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	647b      	str	r3, [r7, #68]	; 0x44
 8002384:	2300      	movs	r3, #0
 8002386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002388:	2300      	movs	r3, #0
 800238a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002390:	4b79      	ldr	r3, [pc, #484]	; (8002578 <HAL_RCC_GetSysClockFreq+0x200>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d00d      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x40>
 800239c:	2b08      	cmp	r3, #8
 800239e:	f200 80e1 	bhi.w	8002564 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0x34>
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023aa:	e0db      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4b73      	ldr	r3, [pc, #460]	; (800257c <HAL_RCC_GetSysClockFreq+0x204>)
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023b0:	e0db      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023b2:	4b73      	ldr	r3, [pc, #460]	; (8002580 <HAL_RCC_GetSysClockFreq+0x208>)
 80023b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023b6:	e0d8      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b8:	4b6f      	ldr	r3, [pc, #444]	; (8002578 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023c2:	4b6d      	ldr	r3, [pc, #436]	; (8002578 <HAL_RCC_GetSysClockFreq+0x200>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d063      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ce:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	2200      	movs	r2, #0
 80023d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e0:	633b      	str	r3, [r7, #48]	; 0x30
 80023e2:	2300      	movs	r3, #0
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
 80023e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023ea:	4622      	mov	r2, r4
 80023ec:	462b      	mov	r3, r5
 80023ee:	f04f 0000 	mov.w	r0, #0
 80023f2:	f04f 0100 	mov.w	r1, #0
 80023f6:	0159      	lsls	r1, r3, #5
 80023f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023fc:	0150      	lsls	r0, r2, #5
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4621      	mov	r1, r4
 8002404:	1a51      	subs	r1, r2, r1
 8002406:	6139      	str	r1, [r7, #16]
 8002408:	4629      	mov	r1, r5
 800240a:	eb63 0301 	sbc.w	r3, r3, r1
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800241c:	4659      	mov	r1, fp
 800241e:	018b      	lsls	r3, r1, #6
 8002420:	4651      	mov	r1, sl
 8002422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002426:	4651      	mov	r1, sl
 8002428:	018a      	lsls	r2, r1, #6
 800242a:	4651      	mov	r1, sl
 800242c:	ebb2 0801 	subs.w	r8, r2, r1
 8002430:	4659      	mov	r1, fp
 8002432:	eb63 0901 	sbc.w	r9, r3, r1
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800244a:	4690      	mov	r8, r2
 800244c:	4699      	mov	r9, r3
 800244e:	4623      	mov	r3, r4
 8002450:	eb18 0303 	adds.w	r3, r8, r3
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	462b      	mov	r3, r5
 8002458:	eb49 0303 	adc.w	r3, r9, r3
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800246a:	4629      	mov	r1, r5
 800246c:	024b      	lsls	r3, r1, #9
 800246e:	4621      	mov	r1, r4
 8002470:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002474:	4621      	mov	r1, r4
 8002476:	024a      	lsls	r2, r1, #9
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247e:	2200      	movs	r2, #0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
 8002482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002488:	f7fe f8ee 	bl	8000668 <__aeabi_uldivmod>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4613      	mov	r3, r2
 8002492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002494:	e058      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002496:	4b38      	ldr	r3, [pc, #224]	; (8002578 <HAL_RCC_GetSysClockFreq+0x200>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	2200      	movs	r2, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	4611      	mov	r1, r2
 80024a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024a6:	623b      	str	r3, [r7, #32]
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024b0:	4642      	mov	r2, r8
 80024b2:	464b      	mov	r3, r9
 80024b4:	f04f 0000 	mov.w	r0, #0
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	0159      	lsls	r1, r3, #5
 80024be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c2:	0150      	lsls	r0, r2, #5
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4641      	mov	r1, r8
 80024ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80024ce:	4649      	mov	r1, r9
 80024d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024e8:	ebb2 040a 	subs.w	r4, r2, sl
 80024ec:	eb63 050b 	sbc.w	r5, r3, fp
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	00eb      	lsls	r3, r5, #3
 80024fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024fe:	00e2      	lsls	r2, r4, #3
 8002500:	4614      	mov	r4, r2
 8002502:	461d      	mov	r5, r3
 8002504:	4643      	mov	r3, r8
 8002506:	18e3      	adds	r3, r4, r3
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	464b      	mov	r3, r9
 800250c:	eb45 0303 	adc.w	r3, r5, r3
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800251e:	4629      	mov	r1, r5
 8002520:	028b      	lsls	r3, r1, #10
 8002522:	4621      	mov	r1, r4
 8002524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002528:	4621      	mov	r1, r4
 800252a:	028a      	lsls	r2, r1, #10
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002532:	2200      	movs	r2, #0
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	61fa      	str	r2, [r7, #28]
 8002538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800253c:	f7fe f894 	bl	8000668 <__aeabi_uldivmod>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4613      	mov	r3, r2
 8002546:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_GetSysClockFreq+0x200>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	3301      	adds	r3, #1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800255a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002562:	e002      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCC_GetSysClockFreq+0x204>)
 8002566:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800256c:	4618      	mov	r0, r3
 800256e:	3750      	adds	r7, #80	; 0x50
 8002570:	46bd      	mov	sp, r7
 8002572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	00f42400 	.word	0x00f42400
 8002580:	007a1200 	.word	0x007a1200

08002584 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_RCC_GetHCLKFreq+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000000 	.word	0x20000000

0800259c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a0:	f7ff fff0 	bl	8002584 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0a9b      	lsrs	r3, r3, #10
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	08007ff0 	.word	0x08007ff0

080025c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c8:	f7ff ffdc 	bl	8002584 <HAL_RCC_GetHCLKFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	0b5b      	lsrs	r3, r3, #13
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4903      	ldr	r1, [pc, #12]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40023800 	.word	0x40023800
 80025e8:	08007ff0 	.word	0x08007ff0

080025ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d012      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002614:	4b69      	ldr	r3, [pc, #420]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a68      	ldr	r2, [pc, #416]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800261e:	6093      	str	r3, [r2, #8]
 8002620:	4b66      	ldr	r3, [pc, #408]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002628:	4964      	ldr	r1, [pc, #400]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002636:	2301      	movs	r3, #1
 8002638:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d017      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002646:	4b5d      	ldr	r3, [pc, #372]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800264c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	4959      	ldr	r1, [pc, #356]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002664:	d101      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002666:	2301      	movs	r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002672:	2301      	movs	r3, #1
 8002674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d017      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002682:	4b4e      	ldr	r3, [pc, #312]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002688:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	494a      	ldr	r1, [pc, #296]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a0:	d101      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026be:	2301      	movs	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 808b 	beq.w	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026d0:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	4a39      	ldr	r2, [pc, #228]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026da:	6413      	str	r3, [r2, #64]	; 0x40
 80026dc:	4b37      	ldr	r3, [pc, #220]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026e8:	4b35      	ldr	r3, [pc, #212]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a34      	ldr	r2, [pc, #208]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f4:	f7fe ff30 	bl	8001558 <HAL_GetTick>
 80026f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fc:	f7fe ff2c 	bl	8001558 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e38f      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800270e:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002722:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d035      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	429a      	cmp	r2, r3
 8002736:	d02e      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002738:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002740:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002758:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d114      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fef4 	bl	8001558 <HAL_GetTick>
 8002770:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7fe fef0 	bl	8001558 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e351      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ee      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027a2:	d111      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027a4:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027b2:	400b      	ands	r3, r1
 80027b4:	4901      	ldr	r1, [pc, #4]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
 80027ba:	e00b      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40007000 	.word	0x40007000
 80027c4:	0ffffcff 	.word	0x0ffffcff
 80027c8:	4bac      	ldr	r3, [pc, #688]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	4aab      	ldr	r2, [pc, #684]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027d2:	6093      	str	r3, [r2, #8]
 80027d4:	4ba9      	ldr	r3, [pc, #676]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e0:	49a6      	ldr	r1, [pc, #664]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d010      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027f2:	4ba2      	ldr	r3, [pc, #648]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f8:	4aa0      	ldr	r2, [pc, #640]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002802:	4b9e      	ldr	r3, [pc, #632]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002804:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	499b      	ldr	r1, [pc, #620]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002820:	4b96      	ldr	r3, [pc, #600]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002826:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800282e:	4993      	ldr	r1, [pc, #588]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002842:	4b8e      	ldr	r3, [pc, #568]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002848:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002850:	498a      	ldr	r1, [pc, #552]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002864:	4b85      	ldr	r3, [pc, #532]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002872:	4982      	ldr	r1, [pc, #520]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002886:	4b7d      	ldr	r3, [pc, #500]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	4979      	ldr	r1, [pc, #484]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028a8:	4b74      	ldr	r3, [pc, #464]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	f023 0203 	bic.w	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4971      	ldr	r1, [pc, #452]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ca:	4b6c      	ldr	r3, [pc, #432]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d0:	f023 020c 	bic.w	r2, r3, #12
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d8:	4968      	ldr	r1, [pc, #416]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ec:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fa:	4960      	ldr	r1, [pc, #384]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800290e:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002914:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291c:	4957      	ldr	r1, [pc, #348]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002930:	4b52      	ldr	r3, [pc, #328]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	494f      	ldr	r1, [pc, #316]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	4946      	ldr	r1, [pc, #280]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002974:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	493e      	ldr	r1, [pc, #248]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002996:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a4:	4935      	ldr	r1, [pc, #212]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c6:	492d      	ldr	r1, [pc, #180]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d011      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029da:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e8:	4924      	ldr	r1, [pc, #144]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f8:	d101      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a28:	4914      	ldr	r1, [pc, #80]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a4c:	490b      	ldr	r1, [pc, #44]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00f      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a70:	4902      	ldr	r1, [pc, #8]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a78:	e002      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a8c:	4b8a      	ldr	r3, [pc, #552]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	4986      	ldr	r1, [pc, #536]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ab0:	4b81      	ldr	r3, [pc, #516]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac0:	497d      	ldr	r1, [pc, #500]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d006      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80d6 	beq.w	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002adc:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a75      	ldr	r2, [pc, #468]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fd36 	bl	8001558 <HAL_GetTick>
 8002aec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002af0:	f7fe fd32 	bl	8001558 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e195      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b02:	4b6d      	ldr	r3, [pc, #436]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d021      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11d      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b22:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b30:	4b61      	ldr	r3, [pc, #388]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b36:	0e1b      	lsrs	r3, r3, #24
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	019a      	lsls	r2, r3, #6
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	041b      	lsls	r3, r3, #16
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	061b      	lsls	r3, r3, #24
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	071b      	lsls	r3, r3, #28
 8002b56:	4958      	ldr	r1, [pc, #352]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d02e      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b88:	d129      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b8a:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b98:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9e:	0f1b      	lsrs	r3, r3, #28
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	019a      	lsls	r2, r3, #6
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	071b      	lsls	r3, r3, #28
 8002bbe:	493e      	ldr	r1, [pc, #248]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bc6:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bcc:	f023 021f 	bic.w	r2, r3, #31
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	4938      	ldr	r1, [pc, #224]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01d      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bea:	4b33      	ldr	r3, [pc, #204]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf0:	0e1b      	lsrs	r3, r3, #24
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfe:	0f1b      	lsrs	r3, r3, #28
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	019a      	lsls	r2, r3, #6
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	431a      	orrs	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	061b      	lsls	r3, r3, #24
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	071b      	lsls	r3, r3, #28
 8002c1e:	4926      	ldr	r1, [pc, #152]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d011      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	019a      	lsls	r2, r3, #6
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	071b      	lsls	r3, r3, #28
 8002c4e:	491a      	ldr	r1, [pc, #104]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a17      	ldr	r2, [pc, #92]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c62:	f7fe fc79 	bl	8001558 <HAL_GetTick>
 8002c66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c6a:	f7fe fc75 	bl	8001558 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b64      	cmp	r3, #100	; 0x64
 8002c76:	d901      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e0d8      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	f040 80ce 	bne.w	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c90:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9c:	f7fe fc5c 	bl	8001558 <HAL_GetTick>
 8002ca0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ca4:	f7fe fc58 	bl	8001558 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d904      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0bb      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cbc:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cc8:	d0ec      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d02e      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d12a      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cf2:	4b51      	ldr	r3, [pc, #324]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d00:	4b4d      	ldr	r3, [pc, #308]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	0f1b      	lsrs	r3, r3, #28
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	019a      	lsls	r2, r3, #6
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	071b      	lsls	r3, r3, #28
 8002d26:	4944      	ldr	r1, [pc, #272]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d2e:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	493d      	ldr	r1, [pc, #244]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d022      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5c:	d11d      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	0e1b      	lsrs	r3, r3, #24
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d6c:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	0f1b      	lsrs	r3, r3, #28
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	019a      	lsls	r2, r3, #6
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	041b      	lsls	r3, r3, #16
 8002d86:	431a      	orrs	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	061b      	lsls	r3, r3, #24
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	071b      	lsls	r3, r3, #28
 8002d92:	4929      	ldr	r1, [pc, #164]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d028      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002da6:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	0e1b      	lsrs	r3, r3, #24
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	0c1b      	lsrs	r3, r3, #16
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	019a      	lsls	r2, r3, #6
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	071b      	lsls	r3, r3, #28
 8002dda:	4917      	ldr	r1, [pc, #92]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	4911      	ldr	r1, [pc, #68]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e04:	f7fe fba8 	bl	8001558 <HAL_GetTick>
 8002e08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e0c:	f7fe fba4 	bl	8001558 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e007      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e2a:	d1ef      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e040      	b.n	8002ed0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fd fea8 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f8b0 	bl	8002fe0 <UART_SetConfig>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e022      	b.n	8002ed0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fb08 	bl	80034a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fb8f 	bl	80035ec <UART_CheckIdleState>
 8002ece:	4603      	mov	r3, r0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d171      	bne.n	8002fd4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_UART_Transmit+0x24>
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e06a      	b.n	8002fd6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2221      	movs	r2, #33	; 0x21
 8002f0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f0e:	f7fe fb23 	bl	8001558 <HAL_GetTick>
 8002f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	88fa      	ldrh	r2, [r7, #6]
 8002f20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2c:	d108      	bne.n	8002f40 <HAL_UART_Transmit+0x68>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d104      	bne.n	8002f40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	e003      	b.n	8002f48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f48:	e02c      	b.n	8002fa4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2180      	movs	r1, #128	; 0x80
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fb96 	bl	8003686 <UART_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e038      	b.n	8002fd6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e007      	b.n	8002f92 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1cc      	bne.n	8002f4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2140      	movs	r1, #64	; 0x40
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fb63 	bl	8003686 <UART_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e005      	b.n	8002fd6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4ba6      	ldr	r3, [pc, #664]	; (80032a4 <UART_SetConfig+0x2c4>)
 800300c:	4013      	ands	r3, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	6979      	ldr	r1, [r7, #20]
 8003014:	430b      	orrs	r3, r1
 8003016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	430a      	orrs	r2, r1
 8003050:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a94      	ldr	r2, [pc, #592]	; (80032a8 <UART_SetConfig+0x2c8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d120      	bne.n	800309e <UART_SetConfig+0xbe>
 800305c:	4b93      	ldr	r3, [pc, #588]	; (80032ac <UART_SetConfig+0x2cc>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b03      	cmp	r3, #3
 8003068:	d816      	bhi.n	8003098 <UART_SetConfig+0xb8>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <UART_SetConfig+0x90>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	08003081 	.word	0x08003081
 8003074:	0800308d 	.word	0x0800308d
 8003078:	08003087 	.word	0x08003087
 800307c:	08003093 	.word	0x08003093
 8003080:	2301      	movs	r3, #1
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e150      	b.n	8003328 <UART_SetConfig+0x348>
 8003086:	2302      	movs	r3, #2
 8003088:	77fb      	strb	r3, [r7, #31]
 800308a:	e14d      	b.n	8003328 <UART_SetConfig+0x348>
 800308c:	2304      	movs	r3, #4
 800308e:	77fb      	strb	r3, [r7, #31]
 8003090:	e14a      	b.n	8003328 <UART_SetConfig+0x348>
 8003092:	2308      	movs	r3, #8
 8003094:	77fb      	strb	r3, [r7, #31]
 8003096:	e147      	b.n	8003328 <UART_SetConfig+0x348>
 8003098:	2310      	movs	r3, #16
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e144      	b.n	8003328 <UART_SetConfig+0x348>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a83      	ldr	r2, [pc, #524]	; (80032b0 <UART_SetConfig+0x2d0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d132      	bne.n	800310e <UART_SetConfig+0x12e>
 80030a8:	4b80      	ldr	r3, [pc, #512]	; (80032ac <UART_SetConfig+0x2cc>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d828      	bhi.n	8003108 <UART_SetConfig+0x128>
 80030b6:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <UART_SetConfig+0xdc>)
 80030b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003109 	.word	0x08003109
 80030c4:	08003109 	.word	0x08003109
 80030c8:	08003109 	.word	0x08003109
 80030cc:	080030fd 	.word	0x080030fd
 80030d0:	08003109 	.word	0x08003109
 80030d4:	08003109 	.word	0x08003109
 80030d8:	08003109 	.word	0x08003109
 80030dc:	080030f7 	.word	0x080030f7
 80030e0:	08003109 	.word	0x08003109
 80030e4:	08003109 	.word	0x08003109
 80030e8:	08003109 	.word	0x08003109
 80030ec:	08003103 	.word	0x08003103
 80030f0:	2300      	movs	r3, #0
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e118      	b.n	8003328 <UART_SetConfig+0x348>
 80030f6:	2302      	movs	r3, #2
 80030f8:	77fb      	strb	r3, [r7, #31]
 80030fa:	e115      	b.n	8003328 <UART_SetConfig+0x348>
 80030fc:	2304      	movs	r3, #4
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e112      	b.n	8003328 <UART_SetConfig+0x348>
 8003102:	2308      	movs	r3, #8
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e10f      	b.n	8003328 <UART_SetConfig+0x348>
 8003108:	2310      	movs	r3, #16
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e10c      	b.n	8003328 <UART_SetConfig+0x348>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a68      	ldr	r2, [pc, #416]	; (80032b4 <UART_SetConfig+0x2d4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d120      	bne.n	800315a <UART_SetConfig+0x17a>
 8003118:	4b64      	ldr	r3, [pc, #400]	; (80032ac <UART_SetConfig+0x2cc>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003122:	2b30      	cmp	r3, #48	; 0x30
 8003124:	d013      	beq.n	800314e <UART_SetConfig+0x16e>
 8003126:	2b30      	cmp	r3, #48	; 0x30
 8003128:	d814      	bhi.n	8003154 <UART_SetConfig+0x174>
 800312a:	2b20      	cmp	r3, #32
 800312c:	d009      	beq.n	8003142 <UART_SetConfig+0x162>
 800312e:	2b20      	cmp	r3, #32
 8003130:	d810      	bhi.n	8003154 <UART_SetConfig+0x174>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <UART_SetConfig+0x15c>
 8003136:	2b10      	cmp	r3, #16
 8003138:	d006      	beq.n	8003148 <UART_SetConfig+0x168>
 800313a:	e00b      	b.n	8003154 <UART_SetConfig+0x174>
 800313c:	2300      	movs	r3, #0
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e0f2      	b.n	8003328 <UART_SetConfig+0x348>
 8003142:	2302      	movs	r3, #2
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e0ef      	b.n	8003328 <UART_SetConfig+0x348>
 8003148:	2304      	movs	r3, #4
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e0ec      	b.n	8003328 <UART_SetConfig+0x348>
 800314e:	2308      	movs	r3, #8
 8003150:	77fb      	strb	r3, [r7, #31]
 8003152:	e0e9      	b.n	8003328 <UART_SetConfig+0x348>
 8003154:	2310      	movs	r3, #16
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e0e6      	b.n	8003328 <UART_SetConfig+0x348>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a56      	ldr	r2, [pc, #344]	; (80032b8 <UART_SetConfig+0x2d8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d120      	bne.n	80031a6 <UART_SetConfig+0x1c6>
 8003164:	4b51      	ldr	r3, [pc, #324]	; (80032ac <UART_SetConfig+0x2cc>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800316e:	2bc0      	cmp	r3, #192	; 0xc0
 8003170:	d013      	beq.n	800319a <UART_SetConfig+0x1ba>
 8003172:	2bc0      	cmp	r3, #192	; 0xc0
 8003174:	d814      	bhi.n	80031a0 <UART_SetConfig+0x1c0>
 8003176:	2b80      	cmp	r3, #128	; 0x80
 8003178:	d009      	beq.n	800318e <UART_SetConfig+0x1ae>
 800317a:	2b80      	cmp	r3, #128	; 0x80
 800317c:	d810      	bhi.n	80031a0 <UART_SetConfig+0x1c0>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <UART_SetConfig+0x1a8>
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d006      	beq.n	8003194 <UART_SetConfig+0x1b4>
 8003186:	e00b      	b.n	80031a0 <UART_SetConfig+0x1c0>
 8003188:	2300      	movs	r3, #0
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e0cc      	b.n	8003328 <UART_SetConfig+0x348>
 800318e:	2302      	movs	r3, #2
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e0c9      	b.n	8003328 <UART_SetConfig+0x348>
 8003194:	2304      	movs	r3, #4
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e0c6      	b.n	8003328 <UART_SetConfig+0x348>
 800319a:	2308      	movs	r3, #8
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	e0c3      	b.n	8003328 <UART_SetConfig+0x348>
 80031a0:	2310      	movs	r3, #16
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e0c0      	b.n	8003328 <UART_SetConfig+0x348>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a44      	ldr	r2, [pc, #272]	; (80032bc <UART_SetConfig+0x2dc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d125      	bne.n	80031fc <UART_SetConfig+0x21c>
 80031b0:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <UART_SetConfig+0x2cc>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031be:	d017      	beq.n	80031f0 <UART_SetConfig+0x210>
 80031c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c4:	d817      	bhi.n	80031f6 <UART_SetConfig+0x216>
 80031c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ca:	d00b      	beq.n	80031e4 <UART_SetConfig+0x204>
 80031cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d0:	d811      	bhi.n	80031f6 <UART_SetConfig+0x216>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <UART_SetConfig+0x1fe>
 80031d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031da:	d006      	beq.n	80031ea <UART_SetConfig+0x20a>
 80031dc:	e00b      	b.n	80031f6 <UART_SetConfig+0x216>
 80031de:	2300      	movs	r3, #0
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e0a1      	b.n	8003328 <UART_SetConfig+0x348>
 80031e4:	2302      	movs	r3, #2
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e09e      	b.n	8003328 <UART_SetConfig+0x348>
 80031ea:	2304      	movs	r3, #4
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e09b      	b.n	8003328 <UART_SetConfig+0x348>
 80031f0:	2308      	movs	r3, #8
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e098      	b.n	8003328 <UART_SetConfig+0x348>
 80031f6:	2310      	movs	r3, #16
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e095      	b.n	8003328 <UART_SetConfig+0x348>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2f      	ldr	r2, [pc, #188]	; (80032c0 <UART_SetConfig+0x2e0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d125      	bne.n	8003252 <UART_SetConfig+0x272>
 8003206:	4b29      	ldr	r3, [pc, #164]	; (80032ac <UART_SetConfig+0x2cc>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003210:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003214:	d017      	beq.n	8003246 <UART_SetConfig+0x266>
 8003216:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800321a:	d817      	bhi.n	800324c <UART_SetConfig+0x26c>
 800321c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003220:	d00b      	beq.n	800323a <UART_SetConfig+0x25a>
 8003222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003226:	d811      	bhi.n	800324c <UART_SetConfig+0x26c>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <UART_SetConfig+0x254>
 800322c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003230:	d006      	beq.n	8003240 <UART_SetConfig+0x260>
 8003232:	e00b      	b.n	800324c <UART_SetConfig+0x26c>
 8003234:	2301      	movs	r3, #1
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e076      	b.n	8003328 <UART_SetConfig+0x348>
 800323a:	2302      	movs	r3, #2
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e073      	b.n	8003328 <UART_SetConfig+0x348>
 8003240:	2304      	movs	r3, #4
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e070      	b.n	8003328 <UART_SetConfig+0x348>
 8003246:	2308      	movs	r3, #8
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e06d      	b.n	8003328 <UART_SetConfig+0x348>
 800324c:	2310      	movs	r3, #16
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e06a      	b.n	8003328 <UART_SetConfig+0x348>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <UART_SetConfig+0x2e4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d138      	bne.n	80032ce <UART_SetConfig+0x2ee>
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <UART_SetConfig+0x2cc>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003266:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800326a:	d017      	beq.n	800329c <UART_SetConfig+0x2bc>
 800326c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003270:	d82a      	bhi.n	80032c8 <UART_SetConfig+0x2e8>
 8003272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003276:	d00b      	beq.n	8003290 <UART_SetConfig+0x2b0>
 8003278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800327c:	d824      	bhi.n	80032c8 <UART_SetConfig+0x2e8>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <UART_SetConfig+0x2aa>
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003286:	d006      	beq.n	8003296 <UART_SetConfig+0x2b6>
 8003288:	e01e      	b.n	80032c8 <UART_SetConfig+0x2e8>
 800328a:	2300      	movs	r3, #0
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	e04b      	b.n	8003328 <UART_SetConfig+0x348>
 8003290:	2302      	movs	r3, #2
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e048      	b.n	8003328 <UART_SetConfig+0x348>
 8003296:	2304      	movs	r3, #4
 8003298:	77fb      	strb	r3, [r7, #31]
 800329a:	e045      	b.n	8003328 <UART_SetConfig+0x348>
 800329c:	2308      	movs	r3, #8
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e042      	b.n	8003328 <UART_SetConfig+0x348>
 80032a2:	bf00      	nop
 80032a4:	efff69f3 	.word	0xefff69f3
 80032a8:	40011000 	.word	0x40011000
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40004400 	.word	0x40004400
 80032b4:	40004800 	.word	0x40004800
 80032b8:	40004c00 	.word	0x40004c00
 80032bc:	40005000 	.word	0x40005000
 80032c0:	40011400 	.word	0x40011400
 80032c4:	40007800 	.word	0x40007800
 80032c8:	2310      	movs	r3, #16
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e02c      	b.n	8003328 <UART_SetConfig+0x348>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a72      	ldr	r2, [pc, #456]	; (800349c <UART_SetConfig+0x4bc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d125      	bne.n	8003324 <UART_SetConfig+0x344>
 80032d8:	4b71      	ldr	r3, [pc, #452]	; (80034a0 <UART_SetConfig+0x4c0>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032e6:	d017      	beq.n	8003318 <UART_SetConfig+0x338>
 80032e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032ec:	d817      	bhi.n	800331e <UART_SetConfig+0x33e>
 80032ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f2:	d00b      	beq.n	800330c <UART_SetConfig+0x32c>
 80032f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f8:	d811      	bhi.n	800331e <UART_SetConfig+0x33e>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <UART_SetConfig+0x326>
 80032fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003302:	d006      	beq.n	8003312 <UART_SetConfig+0x332>
 8003304:	e00b      	b.n	800331e <UART_SetConfig+0x33e>
 8003306:	2300      	movs	r3, #0
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e00d      	b.n	8003328 <UART_SetConfig+0x348>
 800330c:	2302      	movs	r3, #2
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e00a      	b.n	8003328 <UART_SetConfig+0x348>
 8003312:	2304      	movs	r3, #4
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e007      	b.n	8003328 <UART_SetConfig+0x348>
 8003318:	2308      	movs	r3, #8
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e004      	b.n	8003328 <UART_SetConfig+0x348>
 800331e:	2310      	movs	r3, #16
 8003320:	77fb      	strb	r3, [r7, #31]
 8003322:	e001      	b.n	8003328 <UART_SetConfig+0x348>
 8003324:	2310      	movs	r3, #16
 8003326:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003330:	d15b      	bne.n	80033ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003332:	7ffb      	ldrb	r3, [r7, #31]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d828      	bhi.n	800338a <UART_SetConfig+0x3aa>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x360>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003365 	.word	0x08003365
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003375 	.word	0x08003375
 800334c:	0800338b 	.word	0x0800338b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800338b 	.word	0x0800338b
 8003358:	0800338b 	.word	0x0800338b
 800335c:	0800338b 	.word	0x0800338b
 8003360:	08003383 	.word	0x08003383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7ff f91a 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8003368:	61b8      	str	r0, [r7, #24]
        break;
 800336a:	e013      	b.n	8003394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7ff f92a 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 8003370:	61b8      	str	r0, [r7, #24]
        break;
 8003372:	e00f      	b.n	8003394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <UART_SetConfig+0x4c4>)
 8003376:	61bb      	str	r3, [r7, #24]
        break;
 8003378:	e00c      	b.n	8003394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe fffd 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 800337e:	61b8      	str	r0, [r7, #24]
        break;
 8003380:	e008      	b.n	8003394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003386:	61bb      	str	r3, [r7, #24]
        break;
 8003388:	e004      	b.n	8003394 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	77bb      	strb	r3, [r7, #30]
        break;
 8003392:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d074      	beq.n	8003484 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	005a      	lsls	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b0f      	cmp	r3, #15
 80033b4:	d916      	bls.n	80033e4 <UART_SetConfig+0x404>
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033bc:	d212      	bcs.n	80033e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f023 030f 	bic.w	r3, r3, #15
 80033c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	89fb      	ldrh	r3, [r7, #14]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	89fa      	ldrh	r2, [r7, #14]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	e04f      	b.n	8003484 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	77bb      	strb	r3, [r7, #30]
 80033e8:	e04c      	b.n	8003484 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ea:	7ffb      	ldrb	r3, [r7, #31]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d828      	bhi.n	8003442 <UART_SetConfig+0x462>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <UART_SetConfig+0x418>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800341d 	.word	0x0800341d
 80033fc:	08003425 	.word	0x08003425
 8003400:	0800342d 	.word	0x0800342d
 8003404:	08003443 	.word	0x08003443
 8003408:	08003433 	.word	0x08003433
 800340c:	08003443 	.word	0x08003443
 8003410:	08003443 	.word	0x08003443
 8003414:	08003443 	.word	0x08003443
 8003418:	0800343b 	.word	0x0800343b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800341c:	f7ff f8be 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8003420:	61b8      	str	r0, [r7, #24]
        break;
 8003422:	e013      	b.n	800344c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003424:	f7ff f8ce 	bl	80025c4 <HAL_RCC_GetPCLK2Freq>
 8003428:	61b8      	str	r0, [r7, #24]
        break;
 800342a:	e00f      	b.n	800344c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800342c:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <UART_SetConfig+0x4c4>)
 800342e:	61bb      	str	r3, [r7, #24]
        break;
 8003430:	e00c      	b.n	800344c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003432:	f7fe ffa1 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8003436:	61b8      	str	r0, [r7, #24]
        break;
 8003438:	e008      	b.n	800344c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800343a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343e:	61bb      	str	r3, [r7, #24]
        break;
 8003440:	e004      	b.n	800344c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	77bb      	strb	r3, [r7, #30]
        break;
 800344a:	bf00      	nop
    }

    if (pclk != 0U)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d018      	beq.n	8003484 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	085a      	lsrs	r2, r3, #1
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	441a      	add	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b0f      	cmp	r3, #15
 800346a:	d909      	bls.n	8003480 <UART_SetConfig+0x4a0>
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003472:	d205      	bcs.n	8003480 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	e001      	b.n	8003484 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003490:	7fbb      	ldrb	r3, [r7, #30]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40007c00 	.word	0x40007c00
 80034a0:	40023800 	.word	0x40023800
 80034a4:	00f42400 	.word	0x00f42400

080034a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01a      	beq.n	80035be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035a6:	d10a      	bne.n	80035be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
  }
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035fc:	f7fd ffac 	bl	8001558 <HAL_GetTick>
 8003600:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b08      	cmp	r3, #8
 800360e:	d10e      	bne.n	800362e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f831 	bl	8003686 <UART_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e027      	b.n	800367e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d10e      	bne.n	800365a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800363c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f81b 	bl	8003686 <UART_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e011      	b.n	800367e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b09c      	sub	sp, #112	; 0x70
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	4613      	mov	r3, r2
 8003694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003696:	e0a7      	b.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800369e:	f000 80a3 	beq.w	80037e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7fd ff59 	bl	8001558 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80036b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d13f      	bne.n	8003738 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036cc:	667b      	str	r3, [r7, #100]	; 0x64
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e6      	bne.n	80036b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3308      	adds	r3, #8
 80036f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	663b      	str	r3, [r7, #96]	; 0x60
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3308      	adds	r3, #8
 8003708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800370a:	64ba      	str	r2, [r7, #72]	; 0x48
 800370c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e5      	bne.n	80036ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e068      	b.n	800380a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d050      	beq.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003754:	d148      	bne.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800375e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	e853 3f00 	ldrex	r3, [r3]
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003774:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
 8003780:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e6      	bne.n	8003760 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3308      	adds	r3, #8
 8003798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	613b      	str	r3, [r7, #16]
   return(result);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3308      	adds	r3, #8
 80037b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037b2:	623a      	str	r2, [r7, #32]
 80037b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	69f9      	ldr	r1, [r7, #28]
 80037b8:	6a3a      	ldr	r2, [r7, #32]
 80037ba:	e841 2300 	strex	r3, r2, [r1]
 80037be:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1e5      	bne.n	8003792 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e010      	b.n	800380a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69da      	ldr	r2, [r3, #28]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4013      	ands	r3, r2
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	429a      	cmp	r2, r3
 8003804:	f43f af48 	beq.w	8003698 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3770      	adds	r7, #112	; 0x70
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <__assert_func>:
 8003814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003816:	4614      	mov	r4, r2
 8003818:	461a      	mov	r2, r3
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <__assert_func+0x2c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4605      	mov	r5, r0
 8003820:	68d8      	ldr	r0, [r3, #12]
 8003822:	b14c      	cbz	r4, 8003838 <__assert_func+0x24>
 8003824:	4b07      	ldr	r3, [pc, #28]	; (8003844 <__assert_func+0x30>)
 8003826:	9100      	str	r1, [sp, #0]
 8003828:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800382c:	4906      	ldr	r1, [pc, #24]	; (8003848 <__assert_func+0x34>)
 800382e:	462b      	mov	r3, r5
 8003830:	f000 f814 	bl	800385c <fiprintf>
 8003834:	f001 ff34 	bl	80056a0 <abort>
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <__assert_func+0x38>)
 800383a:	461c      	mov	r4, r3
 800383c:	e7f3      	b.n	8003826 <__assert_func+0x12>
 800383e:	bf00      	nop
 8003840:	2000001c 	.word	0x2000001c
 8003844:	0800800e 	.word	0x0800800e
 8003848:	0800801b 	.word	0x0800801b
 800384c:	08008049 	.word	0x08008049

08003850 <__errno>:
 8003850:	4b01      	ldr	r3, [pc, #4]	; (8003858 <__errno+0x8>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	2000001c 	.word	0x2000001c

0800385c <fiprintf>:
 800385c:	b40e      	push	{r1, r2, r3}
 800385e:	b503      	push	{r0, r1, lr}
 8003860:	4601      	mov	r1, r0
 8003862:	ab03      	add	r3, sp, #12
 8003864:	4805      	ldr	r0, [pc, #20]	; (800387c <fiprintf+0x20>)
 8003866:	f853 2b04 	ldr.w	r2, [r3], #4
 800386a:	6800      	ldr	r0, [r0, #0]
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	f000 f85d 	bl	800392c <_vfiprintf_r>
 8003872:	b002      	add	sp, #8
 8003874:	f85d eb04 	ldr.w	lr, [sp], #4
 8003878:	b003      	add	sp, #12
 800387a:	4770      	bx	lr
 800387c:	2000001c 	.word	0x2000001c

08003880 <__libc_init_array>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	4d0d      	ldr	r5, [pc, #52]	; (80038b8 <__libc_init_array+0x38>)
 8003884:	4c0d      	ldr	r4, [pc, #52]	; (80038bc <__libc_init_array+0x3c>)
 8003886:	1b64      	subs	r4, r4, r5
 8003888:	10a4      	asrs	r4, r4, #2
 800388a:	2600      	movs	r6, #0
 800388c:	42a6      	cmp	r6, r4
 800388e:	d109      	bne.n	80038a4 <__libc_init_array+0x24>
 8003890:	4d0b      	ldr	r5, [pc, #44]	; (80038c0 <__libc_init_array+0x40>)
 8003892:	4c0c      	ldr	r4, [pc, #48]	; (80038c4 <__libc_init_array+0x44>)
 8003894:	f004 fb54 	bl	8007f40 <_init>
 8003898:	1b64      	subs	r4, r4, r5
 800389a:	10a4      	asrs	r4, r4, #2
 800389c:	2600      	movs	r6, #0
 800389e:	42a6      	cmp	r6, r4
 80038a0:	d105      	bne.n	80038ae <__libc_init_array+0x2e>
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a8:	4798      	blx	r3
 80038aa:	3601      	adds	r6, #1
 80038ac:	e7ee      	b.n	800388c <__libc_init_array+0xc>
 80038ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b2:	4798      	blx	r3
 80038b4:	3601      	adds	r6, #1
 80038b6:	e7f2      	b.n	800389e <__libc_init_array+0x1e>
 80038b8:	080084c4 	.word	0x080084c4
 80038bc:	080084c4 	.word	0x080084c4
 80038c0:	080084c4 	.word	0x080084c4
 80038c4:	080084c8 	.word	0x080084c8

080038c8 <memset>:
 80038c8:	4402      	add	r2, r0
 80038ca:	4603      	mov	r3, r0
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d100      	bne.n	80038d2 <memset+0xa>
 80038d0:	4770      	bx	lr
 80038d2:	f803 1b01 	strb.w	r1, [r3], #1
 80038d6:	e7f9      	b.n	80038cc <memset+0x4>

080038d8 <__sfputc_r>:
 80038d8:	6893      	ldr	r3, [r2, #8]
 80038da:	3b01      	subs	r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	b410      	push	{r4}
 80038e0:	6093      	str	r3, [r2, #8]
 80038e2:	da08      	bge.n	80038f6 <__sfputc_r+0x1e>
 80038e4:	6994      	ldr	r4, [r2, #24]
 80038e6:	42a3      	cmp	r3, r4
 80038e8:	db01      	blt.n	80038ee <__sfputc_r+0x16>
 80038ea:	290a      	cmp	r1, #10
 80038ec:	d103      	bne.n	80038f6 <__sfputc_r+0x1e>
 80038ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038f2:	f001 be15 	b.w	8005520 <__swbuf_r>
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	1c58      	adds	r0, r3, #1
 80038fa:	6010      	str	r0, [r2, #0]
 80038fc:	7019      	strb	r1, [r3, #0]
 80038fe:	4608      	mov	r0, r1
 8003900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003904:	4770      	bx	lr

08003906 <__sfputs_r>:
 8003906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003908:	4606      	mov	r6, r0
 800390a:	460f      	mov	r7, r1
 800390c:	4614      	mov	r4, r2
 800390e:	18d5      	adds	r5, r2, r3
 8003910:	42ac      	cmp	r4, r5
 8003912:	d101      	bne.n	8003918 <__sfputs_r+0x12>
 8003914:	2000      	movs	r0, #0
 8003916:	e007      	b.n	8003928 <__sfputs_r+0x22>
 8003918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800391c:	463a      	mov	r2, r7
 800391e:	4630      	mov	r0, r6
 8003920:	f7ff ffda 	bl	80038d8 <__sfputc_r>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d1f3      	bne.n	8003910 <__sfputs_r+0xa>
 8003928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800392c <_vfiprintf_r>:
 800392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	460d      	mov	r5, r1
 8003932:	b09d      	sub	sp, #116	; 0x74
 8003934:	4614      	mov	r4, r2
 8003936:	4698      	mov	r8, r3
 8003938:	4606      	mov	r6, r0
 800393a:	b118      	cbz	r0, 8003944 <_vfiprintf_r+0x18>
 800393c:	6983      	ldr	r3, [r0, #24]
 800393e:	b90b      	cbnz	r3, 8003944 <_vfiprintf_r+0x18>
 8003940:	f002 fdca 	bl	80064d8 <__sinit>
 8003944:	4b89      	ldr	r3, [pc, #548]	; (8003b6c <_vfiprintf_r+0x240>)
 8003946:	429d      	cmp	r5, r3
 8003948:	d11b      	bne.n	8003982 <_vfiprintf_r+0x56>
 800394a:	6875      	ldr	r5, [r6, #4]
 800394c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800394e:	07d9      	lsls	r1, r3, #31
 8003950:	d405      	bmi.n	800395e <_vfiprintf_r+0x32>
 8003952:	89ab      	ldrh	r3, [r5, #12]
 8003954:	059a      	lsls	r2, r3, #22
 8003956:	d402      	bmi.n	800395e <_vfiprintf_r+0x32>
 8003958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800395a:	f003 f9ce 	bl	8006cfa <__retarget_lock_acquire_recursive>
 800395e:	89ab      	ldrh	r3, [r5, #12]
 8003960:	071b      	lsls	r3, r3, #28
 8003962:	d501      	bpl.n	8003968 <_vfiprintf_r+0x3c>
 8003964:	692b      	ldr	r3, [r5, #16]
 8003966:	b9eb      	cbnz	r3, 80039a4 <_vfiprintf_r+0x78>
 8003968:	4629      	mov	r1, r5
 800396a:	4630      	mov	r0, r6
 800396c:	f001 fe2a 	bl	80055c4 <__swsetup_r>
 8003970:	b1c0      	cbz	r0, 80039a4 <_vfiprintf_r+0x78>
 8003972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003974:	07dc      	lsls	r4, r3, #31
 8003976:	d50e      	bpl.n	8003996 <_vfiprintf_r+0x6a>
 8003978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800397c:	b01d      	add	sp, #116	; 0x74
 800397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003982:	4b7b      	ldr	r3, [pc, #492]	; (8003b70 <_vfiprintf_r+0x244>)
 8003984:	429d      	cmp	r5, r3
 8003986:	d101      	bne.n	800398c <_vfiprintf_r+0x60>
 8003988:	68b5      	ldr	r5, [r6, #8]
 800398a:	e7df      	b.n	800394c <_vfiprintf_r+0x20>
 800398c:	4b79      	ldr	r3, [pc, #484]	; (8003b74 <_vfiprintf_r+0x248>)
 800398e:	429d      	cmp	r5, r3
 8003990:	bf08      	it	eq
 8003992:	68f5      	ldreq	r5, [r6, #12]
 8003994:	e7da      	b.n	800394c <_vfiprintf_r+0x20>
 8003996:	89ab      	ldrh	r3, [r5, #12]
 8003998:	0598      	lsls	r0, r3, #22
 800399a:	d4ed      	bmi.n	8003978 <_vfiprintf_r+0x4c>
 800399c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800399e:	f003 f9ad 	bl	8006cfc <__retarget_lock_release_recursive>
 80039a2:	e7e9      	b.n	8003978 <_vfiprintf_r+0x4c>
 80039a4:	2300      	movs	r3, #0
 80039a6:	9309      	str	r3, [sp, #36]	; 0x24
 80039a8:	2320      	movs	r3, #32
 80039aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b2:	2330      	movs	r3, #48	; 0x30
 80039b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b78 <_vfiprintf_r+0x24c>
 80039b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039bc:	f04f 0901 	mov.w	r9, #1
 80039c0:	4623      	mov	r3, r4
 80039c2:	469a      	mov	sl, r3
 80039c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c8:	b10a      	cbz	r2, 80039ce <_vfiprintf_r+0xa2>
 80039ca:	2a25      	cmp	r2, #37	; 0x25
 80039cc:	d1f9      	bne.n	80039c2 <_vfiprintf_r+0x96>
 80039ce:	ebba 0b04 	subs.w	fp, sl, r4
 80039d2:	d00b      	beq.n	80039ec <_vfiprintf_r+0xc0>
 80039d4:	465b      	mov	r3, fp
 80039d6:	4622      	mov	r2, r4
 80039d8:	4629      	mov	r1, r5
 80039da:	4630      	mov	r0, r6
 80039dc:	f7ff ff93 	bl	8003906 <__sfputs_r>
 80039e0:	3001      	adds	r0, #1
 80039e2:	f000 80aa 	beq.w	8003b3a <_vfiprintf_r+0x20e>
 80039e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039e8:	445a      	add	r2, fp
 80039ea:	9209      	str	r2, [sp, #36]	; 0x24
 80039ec:	f89a 3000 	ldrb.w	r3, [sl]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80a2 	beq.w	8003b3a <_vfiprintf_r+0x20e>
 80039f6:	2300      	movs	r3, #0
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a00:	f10a 0a01 	add.w	sl, sl, #1
 8003a04:	9304      	str	r3, [sp, #16]
 8003a06:	9307      	str	r3, [sp, #28]
 8003a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8003a0e:	4654      	mov	r4, sl
 8003a10:	2205      	movs	r2, #5
 8003a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a16:	4858      	ldr	r0, [pc, #352]	; (8003b78 <_vfiprintf_r+0x24c>)
 8003a18:	f7fc fc1a 	bl	8000250 <memchr>
 8003a1c:	9a04      	ldr	r2, [sp, #16]
 8003a1e:	b9d8      	cbnz	r0, 8003a58 <_vfiprintf_r+0x12c>
 8003a20:	06d1      	lsls	r1, r2, #27
 8003a22:	bf44      	itt	mi
 8003a24:	2320      	movmi	r3, #32
 8003a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a2a:	0713      	lsls	r3, r2, #28
 8003a2c:	bf44      	itt	mi
 8003a2e:	232b      	movmi	r3, #43	; 0x2b
 8003a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a34:	f89a 3000 	ldrb.w	r3, [sl]
 8003a38:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3a:	d015      	beq.n	8003a68 <_vfiprintf_r+0x13c>
 8003a3c:	9a07      	ldr	r2, [sp, #28]
 8003a3e:	4654      	mov	r4, sl
 8003a40:	2000      	movs	r0, #0
 8003a42:	f04f 0c0a 	mov.w	ip, #10
 8003a46:	4621      	mov	r1, r4
 8003a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4c:	3b30      	subs	r3, #48	; 0x30
 8003a4e:	2b09      	cmp	r3, #9
 8003a50:	d94e      	bls.n	8003af0 <_vfiprintf_r+0x1c4>
 8003a52:	b1b0      	cbz	r0, 8003a82 <_vfiprintf_r+0x156>
 8003a54:	9207      	str	r2, [sp, #28]
 8003a56:	e014      	b.n	8003a82 <_vfiprintf_r+0x156>
 8003a58:	eba0 0308 	sub.w	r3, r0, r8
 8003a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8003a60:	4313      	orrs	r3, r2
 8003a62:	9304      	str	r3, [sp, #16]
 8003a64:	46a2      	mov	sl, r4
 8003a66:	e7d2      	b.n	8003a0e <_vfiprintf_r+0xe2>
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	1d19      	adds	r1, r3, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	9103      	str	r1, [sp, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bfbb      	ittet	lt
 8003a74:	425b      	neglt	r3, r3
 8003a76:	f042 0202 	orrlt.w	r2, r2, #2
 8003a7a:	9307      	strge	r3, [sp, #28]
 8003a7c:	9307      	strlt	r3, [sp, #28]
 8003a7e:	bfb8      	it	lt
 8003a80:	9204      	strlt	r2, [sp, #16]
 8003a82:	7823      	ldrb	r3, [r4, #0]
 8003a84:	2b2e      	cmp	r3, #46	; 0x2e
 8003a86:	d10c      	bne.n	8003aa2 <_vfiprintf_r+0x176>
 8003a88:	7863      	ldrb	r3, [r4, #1]
 8003a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8c:	d135      	bne.n	8003afa <_vfiprintf_r+0x1ce>
 8003a8e:	9b03      	ldr	r3, [sp, #12]
 8003a90:	1d1a      	adds	r2, r3, #4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	9203      	str	r2, [sp, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bfb8      	it	lt
 8003a9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a9e:	3402      	adds	r4, #2
 8003aa0:	9305      	str	r3, [sp, #20]
 8003aa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b88 <_vfiprintf_r+0x25c>
 8003aa6:	7821      	ldrb	r1, [r4, #0]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	4650      	mov	r0, sl
 8003aac:	f7fc fbd0 	bl	8000250 <memchr>
 8003ab0:	b140      	cbz	r0, 8003ac4 <_vfiprintf_r+0x198>
 8003ab2:	2340      	movs	r3, #64	; 0x40
 8003ab4:	eba0 000a 	sub.w	r0, r0, sl
 8003ab8:	fa03 f000 	lsl.w	r0, r3, r0
 8003abc:	9b04      	ldr	r3, [sp, #16]
 8003abe:	4303      	orrs	r3, r0
 8003ac0:	3401      	adds	r4, #1
 8003ac2:	9304      	str	r3, [sp, #16]
 8003ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac8:	482c      	ldr	r0, [pc, #176]	; (8003b7c <_vfiprintf_r+0x250>)
 8003aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ace:	2206      	movs	r2, #6
 8003ad0:	f7fc fbbe 	bl	8000250 <memchr>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d03f      	beq.n	8003b58 <_vfiprintf_r+0x22c>
 8003ad8:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <_vfiprintf_r+0x254>)
 8003ada:	bb1b      	cbnz	r3, 8003b24 <_vfiprintf_r+0x1f8>
 8003adc:	9b03      	ldr	r3, [sp, #12]
 8003ade:	3307      	adds	r3, #7
 8003ae0:	f023 0307 	bic.w	r3, r3, #7
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	9303      	str	r3, [sp, #12]
 8003ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aea:	443b      	add	r3, r7
 8003aec:	9309      	str	r3, [sp, #36]	; 0x24
 8003aee:	e767      	b.n	80039c0 <_vfiprintf_r+0x94>
 8003af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af4:	460c      	mov	r4, r1
 8003af6:	2001      	movs	r0, #1
 8003af8:	e7a5      	b.n	8003a46 <_vfiprintf_r+0x11a>
 8003afa:	2300      	movs	r3, #0
 8003afc:	3401      	adds	r4, #1
 8003afe:	9305      	str	r3, [sp, #20]
 8003b00:	4619      	mov	r1, r3
 8003b02:	f04f 0c0a 	mov.w	ip, #10
 8003b06:	4620      	mov	r0, r4
 8003b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b0c:	3a30      	subs	r2, #48	; 0x30
 8003b0e:	2a09      	cmp	r2, #9
 8003b10:	d903      	bls.n	8003b1a <_vfiprintf_r+0x1ee>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0c5      	beq.n	8003aa2 <_vfiprintf_r+0x176>
 8003b16:	9105      	str	r1, [sp, #20]
 8003b18:	e7c3      	b.n	8003aa2 <_vfiprintf_r+0x176>
 8003b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b1e:	4604      	mov	r4, r0
 8003b20:	2301      	movs	r3, #1
 8003b22:	e7f0      	b.n	8003b06 <_vfiprintf_r+0x1da>
 8003b24:	ab03      	add	r3, sp, #12
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	462a      	mov	r2, r5
 8003b2a:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <_vfiprintf_r+0x258>)
 8003b2c:	a904      	add	r1, sp, #16
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f000 f8be 	bl	8003cb0 <_printf_float>
 8003b34:	4607      	mov	r7, r0
 8003b36:	1c78      	adds	r0, r7, #1
 8003b38:	d1d6      	bne.n	8003ae8 <_vfiprintf_r+0x1bc>
 8003b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b3c:	07d9      	lsls	r1, r3, #31
 8003b3e:	d405      	bmi.n	8003b4c <_vfiprintf_r+0x220>
 8003b40:	89ab      	ldrh	r3, [r5, #12]
 8003b42:	059a      	lsls	r2, r3, #22
 8003b44:	d402      	bmi.n	8003b4c <_vfiprintf_r+0x220>
 8003b46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b48:	f003 f8d8 	bl	8006cfc <__retarget_lock_release_recursive>
 8003b4c:	89ab      	ldrh	r3, [r5, #12]
 8003b4e:	065b      	lsls	r3, r3, #25
 8003b50:	f53f af12 	bmi.w	8003978 <_vfiprintf_r+0x4c>
 8003b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b56:	e711      	b.n	800397c <_vfiprintf_r+0x50>
 8003b58:	ab03      	add	r3, sp, #12
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	462a      	mov	r2, r5
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <_vfiprintf_r+0x258>)
 8003b60:	a904      	add	r1, sp, #16
 8003b62:	4630      	mov	r0, r6
 8003b64:	f000 fb30 	bl	80041c8 <_printf_i>
 8003b68:	e7e4      	b.n	8003b34 <_vfiprintf_r+0x208>
 8003b6a:	bf00      	nop
 8003b6c:	080082a4 	.word	0x080082a4
 8003b70:	080082c4 	.word	0x080082c4
 8003b74:	08008284 	.word	0x08008284
 8003b78:	08008050 	.word	0x08008050
 8003b7c:	0800805a 	.word	0x0800805a
 8003b80:	08003cb1 	.word	0x08003cb1
 8003b84:	08003907 	.word	0x08003907
 8003b88:	08008056 	.word	0x08008056

08003b8c <__cvt>:
 8003b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8e:	ed2d 8b02 	vpush	{d8}
 8003b92:	eeb0 8b40 	vmov.f64	d8, d0
 8003b96:	b085      	sub	sp, #20
 8003b98:	4617      	mov	r7, r2
 8003b9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003b9c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003b9e:	ee18 2a90 	vmov	r2, s17
 8003ba2:	f025 0520 	bic.w	r5, r5, #32
 8003ba6:	2a00      	cmp	r2, #0
 8003ba8:	bfb6      	itet	lt
 8003baa:	222d      	movlt	r2, #45	; 0x2d
 8003bac:	2200      	movge	r2, #0
 8003bae:	eeb1 8b40 	vneglt.f64	d8, d0
 8003bb2:	2d46      	cmp	r5, #70	; 0x46
 8003bb4:	460c      	mov	r4, r1
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	d004      	beq.n	8003bc4 <__cvt+0x38>
 8003bba:	2d45      	cmp	r5, #69	; 0x45
 8003bbc:	d100      	bne.n	8003bc0 <__cvt+0x34>
 8003bbe:	3401      	adds	r4, #1
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	e000      	b.n	8003bc6 <__cvt+0x3a>
 8003bc4:	2103      	movs	r1, #3
 8003bc6:	ab03      	add	r3, sp, #12
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	ab02      	add	r3, sp, #8
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	4622      	mov	r2, r4
 8003bd0:	4633      	mov	r3, r6
 8003bd2:	eeb0 0b48 	vmov.f64	d0, d8
 8003bd6:	f001 fdf7 	bl	80057c8 <_dtoa_r>
 8003bda:	2d47      	cmp	r5, #71	; 0x47
 8003bdc:	d101      	bne.n	8003be2 <__cvt+0x56>
 8003bde:	07fb      	lsls	r3, r7, #31
 8003be0:	d51a      	bpl.n	8003c18 <__cvt+0x8c>
 8003be2:	2d46      	cmp	r5, #70	; 0x46
 8003be4:	eb00 0204 	add.w	r2, r0, r4
 8003be8:	d10c      	bne.n	8003c04 <__cvt+0x78>
 8003bea:	7803      	ldrb	r3, [r0, #0]
 8003bec:	2b30      	cmp	r3, #48	; 0x30
 8003bee:	d107      	bne.n	8003c00 <__cvt+0x74>
 8003bf0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf8:	bf1c      	itt	ne
 8003bfa:	f1c4 0401 	rsbne	r4, r4, #1
 8003bfe:	6034      	strne	r4, [r6, #0]
 8003c00:	6833      	ldr	r3, [r6, #0]
 8003c02:	441a      	add	r2, r3
 8003c04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0c:	bf08      	it	eq
 8003c0e:	9203      	streq	r2, [sp, #12]
 8003c10:	2130      	movs	r1, #48	; 0x30
 8003c12:	9b03      	ldr	r3, [sp, #12]
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d307      	bcc.n	8003c28 <__cvt+0x9c>
 8003c18:	9b03      	ldr	r3, [sp, #12]
 8003c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c1c:	1a1b      	subs	r3, r3, r0
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	b005      	add	sp, #20
 8003c22:	ecbd 8b02 	vpop	{d8}
 8003c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c28:	1c5c      	adds	r4, r3, #1
 8003c2a:	9403      	str	r4, [sp, #12]
 8003c2c:	7019      	strb	r1, [r3, #0]
 8003c2e:	e7f0      	b.n	8003c12 <__cvt+0x86>

08003c30 <__exponent>:
 8003c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c32:	4603      	mov	r3, r0
 8003c34:	2900      	cmp	r1, #0
 8003c36:	bfb8      	it	lt
 8003c38:	4249      	neglt	r1, r1
 8003c3a:	f803 2b02 	strb.w	r2, [r3], #2
 8003c3e:	bfb4      	ite	lt
 8003c40:	222d      	movlt	r2, #45	; 0x2d
 8003c42:	222b      	movge	r2, #43	; 0x2b
 8003c44:	2909      	cmp	r1, #9
 8003c46:	7042      	strb	r2, [r0, #1]
 8003c48:	dd2a      	ble.n	8003ca0 <__exponent+0x70>
 8003c4a:	f10d 0407 	add.w	r4, sp, #7
 8003c4e:	46a4      	mov	ip, r4
 8003c50:	270a      	movs	r7, #10
 8003c52:	46a6      	mov	lr, r4
 8003c54:	460a      	mov	r2, r1
 8003c56:	fb91 f6f7 	sdiv	r6, r1, r7
 8003c5a:	fb07 1516 	mls	r5, r7, r6, r1
 8003c5e:	3530      	adds	r5, #48	; 0x30
 8003c60:	2a63      	cmp	r2, #99	; 0x63
 8003c62:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003c66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003c6a:	4631      	mov	r1, r6
 8003c6c:	dcf1      	bgt.n	8003c52 <__exponent+0x22>
 8003c6e:	3130      	adds	r1, #48	; 0x30
 8003c70:	f1ae 0502 	sub.w	r5, lr, #2
 8003c74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c78:	1c44      	adds	r4, r0, #1
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	4561      	cmp	r1, ip
 8003c7e:	d30a      	bcc.n	8003c96 <__exponent+0x66>
 8003c80:	f10d 0209 	add.w	r2, sp, #9
 8003c84:	eba2 020e 	sub.w	r2, r2, lr
 8003c88:	4565      	cmp	r5, ip
 8003c8a:	bf88      	it	hi
 8003c8c:	2200      	movhi	r2, #0
 8003c8e:	4413      	add	r3, r2
 8003c90:	1a18      	subs	r0, r3, r0
 8003c92:	b003      	add	sp, #12
 8003c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c9e:	e7ed      	b.n	8003c7c <__exponent+0x4c>
 8003ca0:	2330      	movs	r3, #48	; 0x30
 8003ca2:	3130      	adds	r1, #48	; 0x30
 8003ca4:	7083      	strb	r3, [r0, #2]
 8003ca6:	70c1      	strb	r1, [r0, #3]
 8003ca8:	1d03      	adds	r3, r0, #4
 8003caa:	e7f1      	b.n	8003c90 <__exponent+0x60>
 8003cac:	0000      	movs	r0, r0
	...

08003cb0 <_printf_float>:
 8003cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb4:	b08b      	sub	sp, #44	; 0x2c
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8003cbc:	4616      	mov	r6, r2
 8003cbe:	461f      	mov	r7, r3
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	f003 f815 	bl	8006cf0 <_localeconv_r>
 8003cc6:	f8d0 b000 	ldr.w	fp, [r0]
 8003cca:	4658      	mov	r0, fp
 8003ccc:	f7fc fab8 	bl	8000240 <strlen>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	9308      	str	r3, [sp, #32]
 8003cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003cdc:	6822      	ldr	r2, [r4, #0]
 8003cde:	3307      	adds	r3, #7
 8003ce0:	f023 0307 	bic.w	r3, r3, #7
 8003ce4:	f103 0108 	add.w	r1, r3, #8
 8003ce8:	f8c8 1000 	str.w	r1, [r8]
 8003cec:	4682      	mov	sl, r0
 8003cee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cf2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8003cf6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8003f58 <_printf_float+0x2a8>
 8003cfa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8003cfe:	eeb0 6bc0 	vabs.f64	d6, d0
 8003d02:	eeb4 6b47 	vcmp.f64	d6, d7
 8003d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0a:	dd24      	ble.n	8003d56 <_printf_float+0xa6>
 8003d0c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d14:	d502      	bpl.n	8003d1c <_printf_float+0x6c>
 8003d16:	232d      	movs	r3, #45	; 0x2d
 8003d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d1c:	4b90      	ldr	r3, [pc, #576]	; (8003f60 <_printf_float+0x2b0>)
 8003d1e:	4891      	ldr	r0, [pc, #580]	; (8003f64 <_printf_float+0x2b4>)
 8003d20:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003d24:	bf94      	ite	ls
 8003d26:	4698      	movls	r8, r3
 8003d28:	4680      	movhi	r8, r0
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	6123      	str	r3, [r4, #16]
 8003d2e:	f022 0204 	bic.w	r2, r2, #4
 8003d32:	2300      	movs	r3, #0
 8003d34:	6022      	str	r2, [r4, #0]
 8003d36:	9304      	str	r3, [sp, #16]
 8003d38:	9700      	str	r7, [sp, #0]
 8003d3a:	4633      	mov	r3, r6
 8003d3c:	aa09      	add	r2, sp, #36	; 0x24
 8003d3e:	4621      	mov	r1, r4
 8003d40:	4628      	mov	r0, r5
 8003d42:	f000 f9d3 	bl	80040ec <_printf_common>
 8003d46:	3001      	adds	r0, #1
 8003d48:	f040 808a 	bne.w	8003e60 <_printf_float+0x1b0>
 8003d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d50:	b00b      	add	sp, #44	; 0x2c
 8003d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d56:	eeb4 0b40 	vcmp.f64	d0, d0
 8003d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5e:	d709      	bvc.n	8003d74 <_printf_float+0xc4>
 8003d60:	ee10 3a90 	vmov	r3, s1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bfbc      	itt	lt
 8003d68:	232d      	movlt	r3, #45	; 0x2d
 8003d6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d6e:	487e      	ldr	r0, [pc, #504]	; (8003f68 <_printf_float+0x2b8>)
 8003d70:	4b7e      	ldr	r3, [pc, #504]	; (8003f6c <_printf_float+0x2bc>)
 8003d72:	e7d5      	b.n	8003d20 <_printf_float+0x70>
 8003d74:	6863      	ldr	r3, [r4, #4]
 8003d76:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003d7a:	9104      	str	r1, [sp, #16]
 8003d7c:	1c59      	adds	r1, r3, #1
 8003d7e:	d13c      	bne.n	8003dfa <_printf_float+0x14a>
 8003d80:	2306      	movs	r3, #6
 8003d82:	6063      	str	r3, [r4, #4]
 8003d84:	2300      	movs	r3, #0
 8003d86:	9303      	str	r3, [sp, #12]
 8003d88:	ab08      	add	r3, sp, #32
 8003d8a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003d8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d92:	ab07      	add	r3, sp, #28
 8003d94:	6861      	ldr	r1, [r4, #4]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	6022      	str	r2, [r4, #0]
 8003d9a:	f10d 031b 	add.w	r3, sp, #27
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f7ff fef4 	bl	8003b8c <__cvt>
 8003da4:	9b04      	ldr	r3, [sp, #16]
 8003da6:	9907      	ldr	r1, [sp, #28]
 8003da8:	2b47      	cmp	r3, #71	; 0x47
 8003daa:	4680      	mov	r8, r0
 8003dac:	d108      	bne.n	8003dc0 <_printf_float+0x110>
 8003dae:	1cc8      	adds	r0, r1, #3
 8003db0:	db02      	blt.n	8003db8 <_printf_float+0x108>
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	4299      	cmp	r1, r3
 8003db6:	dd41      	ble.n	8003e3c <_printf_float+0x18c>
 8003db8:	f1a9 0902 	sub.w	r9, r9, #2
 8003dbc:	fa5f f989 	uxtb.w	r9, r9
 8003dc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003dc4:	d820      	bhi.n	8003e08 <_printf_float+0x158>
 8003dc6:	3901      	subs	r1, #1
 8003dc8:	464a      	mov	r2, r9
 8003dca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003dce:	9107      	str	r1, [sp, #28]
 8003dd0:	f7ff ff2e 	bl	8003c30 <__exponent>
 8003dd4:	9a08      	ldr	r2, [sp, #32]
 8003dd6:	9004      	str	r0, [sp, #16]
 8003dd8:	1813      	adds	r3, r2, r0
 8003dda:	2a01      	cmp	r2, #1
 8003ddc:	6123      	str	r3, [r4, #16]
 8003dde:	dc02      	bgt.n	8003de6 <_printf_float+0x136>
 8003de0:	6822      	ldr	r2, [r4, #0]
 8003de2:	07d2      	lsls	r2, r2, #31
 8003de4:	d501      	bpl.n	8003dea <_printf_float+0x13a>
 8003de6:	3301      	adds	r3, #1
 8003de8:	6123      	str	r3, [r4, #16]
 8003dea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0a2      	beq.n	8003d38 <_printf_float+0x88>
 8003df2:	232d      	movs	r3, #45	; 0x2d
 8003df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003df8:	e79e      	b.n	8003d38 <_printf_float+0x88>
 8003dfa:	9904      	ldr	r1, [sp, #16]
 8003dfc:	2947      	cmp	r1, #71	; 0x47
 8003dfe:	d1c1      	bne.n	8003d84 <_printf_float+0xd4>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1bf      	bne.n	8003d84 <_printf_float+0xd4>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e7bc      	b.n	8003d82 <_printf_float+0xd2>
 8003e08:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003e0c:	d118      	bne.n	8003e40 <_printf_float+0x190>
 8003e0e:	2900      	cmp	r1, #0
 8003e10:	6863      	ldr	r3, [r4, #4]
 8003e12:	dd0b      	ble.n	8003e2c <_printf_float+0x17c>
 8003e14:	6121      	str	r1, [r4, #16]
 8003e16:	b913      	cbnz	r3, 8003e1e <_printf_float+0x16e>
 8003e18:	6822      	ldr	r2, [r4, #0]
 8003e1a:	07d0      	lsls	r0, r2, #31
 8003e1c:	d502      	bpl.n	8003e24 <_printf_float+0x174>
 8003e1e:	3301      	adds	r3, #1
 8003e20:	440b      	add	r3, r1
 8003e22:	6123      	str	r3, [r4, #16]
 8003e24:	2300      	movs	r3, #0
 8003e26:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e28:	9304      	str	r3, [sp, #16]
 8003e2a:	e7de      	b.n	8003dea <_printf_float+0x13a>
 8003e2c:	b913      	cbnz	r3, 8003e34 <_printf_float+0x184>
 8003e2e:	6822      	ldr	r2, [r4, #0]
 8003e30:	07d2      	lsls	r2, r2, #31
 8003e32:	d501      	bpl.n	8003e38 <_printf_float+0x188>
 8003e34:	3302      	adds	r3, #2
 8003e36:	e7f4      	b.n	8003e22 <_printf_float+0x172>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e7f2      	b.n	8003e22 <_printf_float+0x172>
 8003e3c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003e40:	9b08      	ldr	r3, [sp, #32]
 8003e42:	4299      	cmp	r1, r3
 8003e44:	db05      	blt.n	8003e52 <_printf_float+0x1a2>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	6121      	str	r1, [r4, #16]
 8003e4a:	07d8      	lsls	r0, r3, #31
 8003e4c:	d5ea      	bpl.n	8003e24 <_printf_float+0x174>
 8003e4e:	1c4b      	adds	r3, r1, #1
 8003e50:	e7e7      	b.n	8003e22 <_printf_float+0x172>
 8003e52:	2900      	cmp	r1, #0
 8003e54:	bfd4      	ite	le
 8003e56:	f1c1 0202 	rsble	r2, r1, #2
 8003e5a:	2201      	movgt	r2, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	e7e0      	b.n	8003e22 <_printf_float+0x172>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	055a      	lsls	r2, r3, #21
 8003e64:	d407      	bmi.n	8003e76 <_printf_float+0x1c6>
 8003e66:	6923      	ldr	r3, [r4, #16]
 8003e68:	4642      	mov	r2, r8
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b8      	blx	r7
 8003e70:	3001      	adds	r0, #1
 8003e72:	d12a      	bne.n	8003eca <_printf_float+0x21a>
 8003e74:	e76a      	b.n	8003d4c <_printf_float+0x9c>
 8003e76:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003e7a:	f240 80e2 	bls.w	8004042 <_printf_float+0x392>
 8003e7e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8003e82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8003e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e8a:	d133      	bne.n	8003ef4 <_printf_float+0x244>
 8003e8c:	4a38      	ldr	r2, [pc, #224]	; (8003f70 <_printf_float+0x2c0>)
 8003e8e:	2301      	movs	r3, #1
 8003e90:	4631      	mov	r1, r6
 8003e92:	4628      	mov	r0, r5
 8003e94:	47b8      	blx	r7
 8003e96:	3001      	adds	r0, #1
 8003e98:	f43f af58 	beq.w	8003d4c <_printf_float+0x9c>
 8003e9c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	db02      	blt.n	8003eaa <_printf_float+0x1fa>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	07d8      	lsls	r0, r3, #31
 8003ea8:	d50f      	bpl.n	8003eca <_printf_float+0x21a>
 8003eaa:	4653      	mov	r3, sl
 8003eac:	465a      	mov	r2, fp
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	47b8      	blx	r7
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	f43f af49 	beq.w	8003d4c <_printf_float+0x9c>
 8003eba:	f04f 0800 	mov.w	r8, #0
 8003ebe:	f104 091a 	add.w	r9, r4, #26
 8003ec2:	9b08      	ldr	r3, [sp, #32]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	4543      	cmp	r3, r8
 8003ec8:	dc09      	bgt.n	8003ede <_printf_float+0x22e>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	079b      	lsls	r3, r3, #30
 8003ece:	f100 8108 	bmi.w	80040e2 <_printf_float+0x432>
 8003ed2:	68e0      	ldr	r0, [r4, #12]
 8003ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed6:	4298      	cmp	r0, r3
 8003ed8:	bfb8      	it	lt
 8003eda:	4618      	movlt	r0, r3
 8003edc:	e738      	b.n	8003d50 <_printf_float+0xa0>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	464a      	mov	r2, r9
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	47b8      	blx	r7
 8003ee8:	3001      	adds	r0, #1
 8003eea:	f43f af2f 	beq.w	8003d4c <_printf_float+0x9c>
 8003eee:	f108 0801 	add.w	r8, r8, #1
 8003ef2:	e7e6      	b.n	8003ec2 <_printf_float+0x212>
 8003ef4:	9b07      	ldr	r3, [sp, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	dc3c      	bgt.n	8003f74 <_printf_float+0x2c4>
 8003efa:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <_printf_float+0x2c0>)
 8003efc:	2301      	movs	r3, #1
 8003efe:	4631      	mov	r1, r6
 8003f00:	4628      	mov	r0, r5
 8003f02:	47b8      	blx	r7
 8003f04:	3001      	adds	r0, #1
 8003f06:	f43f af21 	beq.w	8003d4c <_printf_float+0x9c>
 8003f0a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	d102      	bne.n	8003f18 <_printf_float+0x268>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	07d9      	lsls	r1, r3, #31
 8003f16:	d5d8      	bpl.n	8003eca <_printf_float+0x21a>
 8003f18:	4653      	mov	r3, sl
 8003f1a:	465a      	mov	r2, fp
 8003f1c:	4631      	mov	r1, r6
 8003f1e:	4628      	mov	r0, r5
 8003f20:	47b8      	blx	r7
 8003f22:	3001      	adds	r0, #1
 8003f24:	f43f af12 	beq.w	8003d4c <_printf_float+0x9c>
 8003f28:	f04f 0900 	mov.w	r9, #0
 8003f2c:	f104 0a1a 	add.w	sl, r4, #26
 8003f30:	9b07      	ldr	r3, [sp, #28]
 8003f32:	425b      	negs	r3, r3
 8003f34:	454b      	cmp	r3, r9
 8003f36:	dc01      	bgt.n	8003f3c <_printf_float+0x28c>
 8003f38:	9b08      	ldr	r3, [sp, #32]
 8003f3a:	e795      	b.n	8003e68 <_printf_float+0x1b8>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	4652      	mov	r2, sl
 8003f40:	4631      	mov	r1, r6
 8003f42:	4628      	mov	r0, r5
 8003f44:	47b8      	blx	r7
 8003f46:	3001      	adds	r0, #1
 8003f48:	f43f af00 	beq.w	8003d4c <_printf_float+0x9c>
 8003f4c:	f109 0901 	add.w	r9, r9, #1
 8003f50:	e7ee      	b.n	8003f30 <_printf_float+0x280>
 8003f52:	bf00      	nop
 8003f54:	f3af 8000 	nop.w
 8003f58:	ffffffff 	.word	0xffffffff
 8003f5c:	7fefffff 	.word	0x7fefffff
 8003f60:	08008061 	.word	0x08008061
 8003f64:	08008065 	.word	0x08008065
 8003f68:	0800806d 	.word	0x0800806d
 8003f6c:	08008069 	.word	0x08008069
 8003f70:	08008071 	.word	0x08008071
 8003f74:	9a08      	ldr	r2, [sp, #32]
 8003f76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	bfa8      	it	ge
 8003f7c:	461a      	movge	r2, r3
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	4691      	mov	r9, r2
 8003f82:	dc38      	bgt.n	8003ff6 <_printf_float+0x346>
 8003f84:	2300      	movs	r3, #0
 8003f86:	9305      	str	r3, [sp, #20]
 8003f88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f8c:	f104 021a 	add.w	r2, r4, #26
 8003f90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f92:	9905      	ldr	r1, [sp, #20]
 8003f94:	9304      	str	r3, [sp, #16]
 8003f96:	eba3 0309 	sub.w	r3, r3, r9
 8003f9a:	428b      	cmp	r3, r1
 8003f9c:	dc33      	bgt.n	8004006 <_printf_float+0x356>
 8003f9e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	db3c      	blt.n	8004020 <_printf_float+0x370>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	07da      	lsls	r2, r3, #31
 8003faa:	d439      	bmi.n	8004020 <_printf_float+0x370>
 8003fac:	9b08      	ldr	r3, [sp, #32]
 8003fae:	9a04      	ldr	r2, [sp, #16]
 8003fb0:	9907      	ldr	r1, [sp, #28]
 8003fb2:	1a9a      	subs	r2, r3, r2
 8003fb4:	eba3 0901 	sub.w	r9, r3, r1
 8003fb8:	4591      	cmp	r9, r2
 8003fba:	bfa8      	it	ge
 8003fbc:	4691      	movge	r9, r2
 8003fbe:	f1b9 0f00 	cmp.w	r9, #0
 8003fc2:	dc35      	bgt.n	8004030 <_printf_float+0x380>
 8003fc4:	f04f 0800 	mov.w	r8, #0
 8003fc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fcc:	f104 0a1a 	add.w	sl, r4, #26
 8003fd0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	eba3 0309 	sub.w	r3, r3, r9
 8003fda:	4543      	cmp	r3, r8
 8003fdc:	f77f af75 	ble.w	8003eca <_printf_float+0x21a>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4652      	mov	r2, sl
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	47b8      	blx	r7
 8003fea:	3001      	adds	r0, #1
 8003fec:	f43f aeae 	beq.w	8003d4c <_printf_float+0x9c>
 8003ff0:	f108 0801 	add.w	r8, r8, #1
 8003ff4:	e7ec      	b.n	8003fd0 <_printf_float+0x320>
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	4642      	mov	r2, r8
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	47b8      	blx	r7
 8004000:	3001      	adds	r0, #1
 8004002:	d1bf      	bne.n	8003f84 <_printf_float+0x2d4>
 8004004:	e6a2      	b.n	8003d4c <_printf_float+0x9c>
 8004006:	2301      	movs	r3, #1
 8004008:	4631      	mov	r1, r6
 800400a:	4628      	mov	r0, r5
 800400c:	9204      	str	r2, [sp, #16]
 800400e:	47b8      	blx	r7
 8004010:	3001      	adds	r0, #1
 8004012:	f43f ae9b 	beq.w	8003d4c <_printf_float+0x9c>
 8004016:	9b05      	ldr	r3, [sp, #20]
 8004018:	9a04      	ldr	r2, [sp, #16]
 800401a:	3301      	adds	r3, #1
 800401c:	9305      	str	r3, [sp, #20]
 800401e:	e7b7      	b.n	8003f90 <_printf_float+0x2e0>
 8004020:	4653      	mov	r3, sl
 8004022:	465a      	mov	r2, fp
 8004024:	4631      	mov	r1, r6
 8004026:	4628      	mov	r0, r5
 8004028:	47b8      	blx	r7
 800402a:	3001      	adds	r0, #1
 800402c:	d1be      	bne.n	8003fac <_printf_float+0x2fc>
 800402e:	e68d      	b.n	8003d4c <_printf_float+0x9c>
 8004030:	9a04      	ldr	r2, [sp, #16]
 8004032:	464b      	mov	r3, r9
 8004034:	4442      	add	r2, r8
 8004036:	4631      	mov	r1, r6
 8004038:	4628      	mov	r0, r5
 800403a:	47b8      	blx	r7
 800403c:	3001      	adds	r0, #1
 800403e:	d1c1      	bne.n	8003fc4 <_printf_float+0x314>
 8004040:	e684      	b.n	8003d4c <_printf_float+0x9c>
 8004042:	9a08      	ldr	r2, [sp, #32]
 8004044:	2a01      	cmp	r2, #1
 8004046:	dc01      	bgt.n	800404c <_printf_float+0x39c>
 8004048:	07db      	lsls	r3, r3, #31
 800404a:	d537      	bpl.n	80040bc <_printf_float+0x40c>
 800404c:	2301      	movs	r3, #1
 800404e:	4642      	mov	r2, r8
 8004050:	4631      	mov	r1, r6
 8004052:	4628      	mov	r0, r5
 8004054:	47b8      	blx	r7
 8004056:	3001      	adds	r0, #1
 8004058:	f43f ae78 	beq.w	8003d4c <_printf_float+0x9c>
 800405c:	4653      	mov	r3, sl
 800405e:	465a      	mov	r2, fp
 8004060:	4631      	mov	r1, r6
 8004062:	4628      	mov	r0, r5
 8004064:	47b8      	blx	r7
 8004066:	3001      	adds	r0, #1
 8004068:	f43f ae70 	beq.w	8003d4c <_printf_float+0x9c>
 800406c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004070:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004078:	d01b      	beq.n	80040b2 <_printf_float+0x402>
 800407a:	9b08      	ldr	r3, [sp, #32]
 800407c:	f108 0201 	add.w	r2, r8, #1
 8004080:	3b01      	subs	r3, #1
 8004082:	4631      	mov	r1, r6
 8004084:	4628      	mov	r0, r5
 8004086:	47b8      	blx	r7
 8004088:	3001      	adds	r0, #1
 800408a:	d10e      	bne.n	80040aa <_printf_float+0x3fa>
 800408c:	e65e      	b.n	8003d4c <_printf_float+0x9c>
 800408e:	2301      	movs	r3, #1
 8004090:	464a      	mov	r2, r9
 8004092:	4631      	mov	r1, r6
 8004094:	4628      	mov	r0, r5
 8004096:	47b8      	blx	r7
 8004098:	3001      	adds	r0, #1
 800409a:	f43f ae57 	beq.w	8003d4c <_printf_float+0x9c>
 800409e:	f108 0801 	add.w	r8, r8, #1
 80040a2:	9b08      	ldr	r3, [sp, #32]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	4543      	cmp	r3, r8
 80040a8:	dcf1      	bgt.n	800408e <_printf_float+0x3de>
 80040aa:	9b04      	ldr	r3, [sp, #16]
 80040ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040b0:	e6db      	b.n	8003e6a <_printf_float+0x1ba>
 80040b2:	f04f 0800 	mov.w	r8, #0
 80040b6:	f104 091a 	add.w	r9, r4, #26
 80040ba:	e7f2      	b.n	80040a2 <_printf_float+0x3f2>
 80040bc:	2301      	movs	r3, #1
 80040be:	4642      	mov	r2, r8
 80040c0:	e7df      	b.n	8004082 <_printf_float+0x3d2>
 80040c2:	2301      	movs	r3, #1
 80040c4:	464a      	mov	r2, r9
 80040c6:	4631      	mov	r1, r6
 80040c8:	4628      	mov	r0, r5
 80040ca:	47b8      	blx	r7
 80040cc:	3001      	adds	r0, #1
 80040ce:	f43f ae3d 	beq.w	8003d4c <_printf_float+0x9c>
 80040d2:	f108 0801 	add.w	r8, r8, #1
 80040d6:	68e3      	ldr	r3, [r4, #12]
 80040d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040da:	1a5b      	subs	r3, r3, r1
 80040dc:	4543      	cmp	r3, r8
 80040de:	dcf0      	bgt.n	80040c2 <_printf_float+0x412>
 80040e0:	e6f7      	b.n	8003ed2 <_printf_float+0x222>
 80040e2:	f04f 0800 	mov.w	r8, #0
 80040e6:	f104 0919 	add.w	r9, r4, #25
 80040ea:	e7f4      	b.n	80040d6 <_printf_float+0x426>

080040ec <_printf_common>:
 80040ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f0:	4616      	mov	r6, r2
 80040f2:	4699      	mov	r9, r3
 80040f4:	688a      	ldr	r2, [r1, #8]
 80040f6:	690b      	ldr	r3, [r1, #16]
 80040f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040fc:	4293      	cmp	r3, r2
 80040fe:	bfb8      	it	lt
 8004100:	4613      	movlt	r3, r2
 8004102:	6033      	str	r3, [r6, #0]
 8004104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004108:	4607      	mov	r7, r0
 800410a:	460c      	mov	r4, r1
 800410c:	b10a      	cbz	r2, 8004112 <_printf_common+0x26>
 800410e:	3301      	adds	r3, #1
 8004110:	6033      	str	r3, [r6, #0]
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	0699      	lsls	r1, r3, #26
 8004116:	bf42      	ittt	mi
 8004118:	6833      	ldrmi	r3, [r6, #0]
 800411a:	3302      	addmi	r3, #2
 800411c:	6033      	strmi	r3, [r6, #0]
 800411e:	6825      	ldr	r5, [r4, #0]
 8004120:	f015 0506 	ands.w	r5, r5, #6
 8004124:	d106      	bne.n	8004134 <_printf_common+0x48>
 8004126:	f104 0a19 	add.w	sl, r4, #25
 800412a:	68e3      	ldr	r3, [r4, #12]
 800412c:	6832      	ldr	r2, [r6, #0]
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	42ab      	cmp	r3, r5
 8004132:	dc26      	bgt.n	8004182 <_printf_common+0x96>
 8004134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004138:	1e13      	subs	r3, r2, #0
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	bf18      	it	ne
 800413e:	2301      	movne	r3, #1
 8004140:	0692      	lsls	r2, r2, #26
 8004142:	d42b      	bmi.n	800419c <_printf_common+0xb0>
 8004144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004148:	4649      	mov	r1, r9
 800414a:	4638      	mov	r0, r7
 800414c:	47c0      	blx	r8
 800414e:	3001      	adds	r0, #1
 8004150:	d01e      	beq.n	8004190 <_printf_common+0xa4>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	68e5      	ldr	r5, [r4, #12]
 8004156:	6832      	ldr	r2, [r6, #0]
 8004158:	f003 0306 	and.w	r3, r3, #6
 800415c:	2b04      	cmp	r3, #4
 800415e:	bf08      	it	eq
 8004160:	1aad      	subeq	r5, r5, r2
 8004162:	68a3      	ldr	r3, [r4, #8]
 8004164:	6922      	ldr	r2, [r4, #16]
 8004166:	bf0c      	ite	eq
 8004168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800416c:	2500      	movne	r5, #0
 800416e:	4293      	cmp	r3, r2
 8004170:	bfc4      	itt	gt
 8004172:	1a9b      	subgt	r3, r3, r2
 8004174:	18ed      	addgt	r5, r5, r3
 8004176:	2600      	movs	r6, #0
 8004178:	341a      	adds	r4, #26
 800417a:	42b5      	cmp	r5, r6
 800417c:	d11a      	bne.n	80041b4 <_printf_common+0xc8>
 800417e:	2000      	movs	r0, #0
 8004180:	e008      	b.n	8004194 <_printf_common+0xa8>
 8004182:	2301      	movs	r3, #1
 8004184:	4652      	mov	r2, sl
 8004186:	4649      	mov	r1, r9
 8004188:	4638      	mov	r0, r7
 800418a:	47c0      	blx	r8
 800418c:	3001      	adds	r0, #1
 800418e:	d103      	bne.n	8004198 <_printf_common+0xac>
 8004190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004198:	3501      	adds	r5, #1
 800419a:	e7c6      	b.n	800412a <_printf_common+0x3e>
 800419c:	18e1      	adds	r1, r4, r3
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	2030      	movs	r0, #48	; 0x30
 80041a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041a6:	4422      	add	r2, r4
 80041a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041b0:	3302      	adds	r3, #2
 80041b2:	e7c7      	b.n	8004144 <_printf_common+0x58>
 80041b4:	2301      	movs	r3, #1
 80041b6:	4622      	mov	r2, r4
 80041b8:	4649      	mov	r1, r9
 80041ba:	4638      	mov	r0, r7
 80041bc:	47c0      	blx	r8
 80041be:	3001      	adds	r0, #1
 80041c0:	d0e6      	beq.n	8004190 <_printf_common+0xa4>
 80041c2:	3601      	adds	r6, #1
 80041c4:	e7d9      	b.n	800417a <_printf_common+0x8e>
	...

080041c8 <_printf_i>:
 80041c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	7e0f      	ldrb	r7, [r1, #24]
 80041ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041d0:	2f78      	cmp	r7, #120	; 0x78
 80041d2:	4691      	mov	r9, r2
 80041d4:	4680      	mov	r8, r0
 80041d6:	460c      	mov	r4, r1
 80041d8:	469a      	mov	sl, r3
 80041da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041de:	d807      	bhi.n	80041f0 <_printf_i+0x28>
 80041e0:	2f62      	cmp	r7, #98	; 0x62
 80041e2:	d80a      	bhi.n	80041fa <_printf_i+0x32>
 80041e4:	2f00      	cmp	r7, #0
 80041e6:	f000 80d8 	beq.w	800439a <_printf_i+0x1d2>
 80041ea:	2f58      	cmp	r7, #88	; 0x58
 80041ec:	f000 80a3 	beq.w	8004336 <_printf_i+0x16e>
 80041f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041f8:	e03a      	b.n	8004270 <_printf_i+0xa8>
 80041fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041fe:	2b15      	cmp	r3, #21
 8004200:	d8f6      	bhi.n	80041f0 <_printf_i+0x28>
 8004202:	a101      	add	r1, pc, #4	; (adr r1, 8004208 <_printf_i+0x40>)
 8004204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004208:	08004261 	.word	0x08004261
 800420c:	08004275 	.word	0x08004275
 8004210:	080041f1 	.word	0x080041f1
 8004214:	080041f1 	.word	0x080041f1
 8004218:	080041f1 	.word	0x080041f1
 800421c:	080041f1 	.word	0x080041f1
 8004220:	08004275 	.word	0x08004275
 8004224:	080041f1 	.word	0x080041f1
 8004228:	080041f1 	.word	0x080041f1
 800422c:	080041f1 	.word	0x080041f1
 8004230:	080041f1 	.word	0x080041f1
 8004234:	08004381 	.word	0x08004381
 8004238:	080042a5 	.word	0x080042a5
 800423c:	08004363 	.word	0x08004363
 8004240:	080041f1 	.word	0x080041f1
 8004244:	080041f1 	.word	0x080041f1
 8004248:	080043a3 	.word	0x080043a3
 800424c:	080041f1 	.word	0x080041f1
 8004250:	080042a5 	.word	0x080042a5
 8004254:	080041f1 	.word	0x080041f1
 8004258:	080041f1 	.word	0x080041f1
 800425c:	0800436b 	.word	0x0800436b
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	1d1a      	adds	r2, r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	602a      	str	r2, [r5, #0]
 8004268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800426c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004270:	2301      	movs	r3, #1
 8004272:	e0a3      	b.n	80043bc <_printf_i+0x1f4>
 8004274:	6820      	ldr	r0, [r4, #0]
 8004276:	6829      	ldr	r1, [r5, #0]
 8004278:	0606      	lsls	r6, r0, #24
 800427a:	f101 0304 	add.w	r3, r1, #4
 800427e:	d50a      	bpl.n	8004296 <_printf_i+0xce>
 8004280:	680e      	ldr	r6, [r1, #0]
 8004282:	602b      	str	r3, [r5, #0]
 8004284:	2e00      	cmp	r6, #0
 8004286:	da03      	bge.n	8004290 <_printf_i+0xc8>
 8004288:	232d      	movs	r3, #45	; 0x2d
 800428a:	4276      	negs	r6, r6
 800428c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004290:	485e      	ldr	r0, [pc, #376]	; (800440c <_printf_i+0x244>)
 8004292:	230a      	movs	r3, #10
 8004294:	e019      	b.n	80042ca <_printf_i+0x102>
 8004296:	680e      	ldr	r6, [r1, #0]
 8004298:	602b      	str	r3, [r5, #0]
 800429a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800429e:	bf18      	it	ne
 80042a0:	b236      	sxthne	r6, r6
 80042a2:	e7ef      	b.n	8004284 <_printf_i+0xbc>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	6820      	ldr	r0, [r4, #0]
 80042a8:	1d19      	adds	r1, r3, #4
 80042aa:	6029      	str	r1, [r5, #0]
 80042ac:	0601      	lsls	r1, r0, #24
 80042ae:	d501      	bpl.n	80042b4 <_printf_i+0xec>
 80042b0:	681e      	ldr	r6, [r3, #0]
 80042b2:	e002      	b.n	80042ba <_printf_i+0xf2>
 80042b4:	0646      	lsls	r6, r0, #25
 80042b6:	d5fb      	bpl.n	80042b0 <_printf_i+0xe8>
 80042b8:	881e      	ldrh	r6, [r3, #0]
 80042ba:	4854      	ldr	r0, [pc, #336]	; (800440c <_printf_i+0x244>)
 80042bc:	2f6f      	cmp	r7, #111	; 0x6f
 80042be:	bf0c      	ite	eq
 80042c0:	2308      	moveq	r3, #8
 80042c2:	230a      	movne	r3, #10
 80042c4:	2100      	movs	r1, #0
 80042c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ca:	6865      	ldr	r5, [r4, #4]
 80042cc:	60a5      	str	r5, [r4, #8]
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	bfa2      	ittt	ge
 80042d2:	6821      	ldrge	r1, [r4, #0]
 80042d4:	f021 0104 	bicge.w	r1, r1, #4
 80042d8:	6021      	strge	r1, [r4, #0]
 80042da:	b90e      	cbnz	r6, 80042e0 <_printf_i+0x118>
 80042dc:	2d00      	cmp	r5, #0
 80042de:	d04d      	beq.n	800437c <_printf_i+0x1b4>
 80042e0:	4615      	mov	r5, r2
 80042e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80042e6:	fb03 6711 	mls	r7, r3, r1, r6
 80042ea:	5dc7      	ldrb	r7, [r0, r7]
 80042ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042f0:	4637      	mov	r7, r6
 80042f2:	42bb      	cmp	r3, r7
 80042f4:	460e      	mov	r6, r1
 80042f6:	d9f4      	bls.n	80042e2 <_printf_i+0x11a>
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d10b      	bne.n	8004314 <_printf_i+0x14c>
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	07de      	lsls	r6, r3, #31
 8004300:	d508      	bpl.n	8004314 <_printf_i+0x14c>
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	6861      	ldr	r1, [r4, #4]
 8004306:	4299      	cmp	r1, r3
 8004308:	bfde      	ittt	le
 800430a:	2330      	movle	r3, #48	; 0x30
 800430c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004310:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004314:	1b52      	subs	r2, r2, r5
 8004316:	6122      	str	r2, [r4, #16]
 8004318:	f8cd a000 	str.w	sl, [sp]
 800431c:	464b      	mov	r3, r9
 800431e:	aa03      	add	r2, sp, #12
 8004320:	4621      	mov	r1, r4
 8004322:	4640      	mov	r0, r8
 8004324:	f7ff fee2 	bl	80040ec <_printf_common>
 8004328:	3001      	adds	r0, #1
 800432a:	d14c      	bne.n	80043c6 <_printf_i+0x1fe>
 800432c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004330:	b004      	add	sp, #16
 8004332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004336:	4835      	ldr	r0, [pc, #212]	; (800440c <_printf_i+0x244>)
 8004338:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800433c:	6829      	ldr	r1, [r5, #0]
 800433e:	6823      	ldr	r3, [r4, #0]
 8004340:	f851 6b04 	ldr.w	r6, [r1], #4
 8004344:	6029      	str	r1, [r5, #0]
 8004346:	061d      	lsls	r5, r3, #24
 8004348:	d514      	bpl.n	8004374 <_printf_i+0x1ac>
 800434a:	07df      	lsls	r7, r3, #31
 800434c:	bf44      	itt	mi
 800434e:	f043 0320 	orrmi.w	r3, r3, #32
 8004352:	6023      	strmi	r3, [r4, #0]
 8004354:	b91e      	cbnz	r6, 800435e <_printf_i+0x196>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	f023 0320 	bic.w	r3, r3, #32
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	2310      	movs	r3, #16
 8004360:	e7b0      	b.n	80042c4 <_printf_i+0xfc>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f043 0320 	orr.w	r3, r3, #32
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	2378      	movs	r3, #120	; 0x78
 800436c:	4828      	ldr	r0, [pc, #160]	; (8004410 <_printf_i+0x248>)
 800436e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004372:	e7e3      	b.n	800433c <_printf_i+0x174>
 8004374:	0659      	lsls	r1, r3, #25
 8004376:	bf48      	it	mi
 8004378:	b2b6      	uxthmi	r6, r6
 800437a:	e7e6      	b.n	800434a <_printf_i+0x182>
 800437c:	4615      	mov	r5, r2
 800437e:	e7bb      	b.n	80042f8 <_printf_i+0x130>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	6826      	ldr	r6, [r4, #0]
 8004384:	6961      	ldr	r1, [r4, #20]
 8004386:	1d18      	adds	r0, r3, #4
 8004388:	6028      	str	r0, [r5, #0]
 800438a:	0635      	lsls	r5, r6, #24
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	d501      	bpl.n	8004394 <_printf_i+0x1cc>
 8004390:	6019      	str	r1, [r3, #0]
 8004392:	e002      	b.n	800439a <_printf_i+0x1d2>
 8004394:	0670      	lsls	r0, r6, #25
 8004396:	d5fb      	bpl.n	8004390 <_printf_i+0x1c8>
 8004398:	8019      	strh	r1, [r3, #0]
 800439a:	2300      	movs	r3, #0
 800439c:	6123      	str	r3, [r4, #16]
 800439e:	4615      	mov	r5, r2
 80043a0:	e7ba      	b.n	8004318 <_printf_i+0x150>
 80043a2:	682b      	ldr	r3, [r5, #0]
 80043a4:	1d1a      	adds	r2, r3, #4
 80043a6:	602a      	str	r2, [r5, #0]
 80043a8:	681d      	ldr	r5, [r3, #0]
 80043aa:	6862      	ldr	r2, [r4, #4]
 80043ac:	2100      	movs	r1, #0
 80043ae:	4628      	mov	r0, r5
 80043b0:	f7fb ff4e 	bl	8000250 <memchr>
 80043b4:	b108      	cbz	r0, 80043ba <_printf_i+0x1f2>
 80043b6:	1b40      	subs	r0, r0, r5
 80043b8:	6060      	str	r0, [r4, #4]
 80043ba:	6863      	ldr	r3, [r4, #4]
 80043bc:	6123      	str	r3, [r4, #16]
 80043be:	2300      	movs	r3, #0
 80043c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c4:	e7a8      	b.n	8004318 <_printf_i+0x150>
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	462a      	mov	r2, r5
 80043ca:	4649      	mov	r1, r9
 80043cc:	4640      	mov	r0, r8
 80043ce:	47d0      	blx	sl
 80043d0:	3001      	adds	r0, #1
 80043d2:	d0ab      	beq.n	800432c <_printf_i+0x164>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	079b      	lsls	r3, r3, #30
 80043d8:	d413      	bmi.n	8004402 <_printf_i+0x23a>
 80043da:	68e0      	ldr	r0, [r4, #12]
 80043dc:	9b03      	ldr	r3, [sp, #12]
 80043de:	4298      	cmp	r0, r3
 80043e0:	bfb8      	it	lt
 80043e2:	4618      	movlt	r0, r3
 80043e4:	e7a4      	b.n	8004330 <_printf_i+0x168>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4632      	mov	r2, r6
 80043ea:	4649      	mov	r1, r9
 80043ec:	4640      	mov	r0, r8
 80043ee:	47d0      	blx	sl
 80043f0:	3001      	adds	r0, #1
 80043f2:	d09b      	beq.n	800432c <_printf_i+0x164>
 80043f4:	3501      	adds	r5, #1
 80043f6:	68e3      	ldr	r3, [r4, #12]
 80043f8:	9903      	ldr	r1, [sp, #12]
 80043fa:	1a5b      	subs	r3, r3, r1
 80043fc:	42ab      	cmp	r3, r5
 80043fe:	dcf2      	bgt.n	80043e6 <_printf_i+0x21e>
 8004400:	e7eb      	b.n	80043da <_printf_i+0x212>
 8004402:	2500      	movs	r5, #0
 8004404:	f104 0619 	add.w	r6, r4, #25
 8004408:	e7f5      	b.n	80043f6 <_printf_i+0x22e>
 800440a:	bf00      	nop
 800440c:	08008073 	.word	0x08008073
 8004410:	08008084 	.word	0x08008084

08004414 <_scanf_float>:
 8004414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004418:	b087      	sub	sp, #28
 800441a:	4617      	mov	r7, r2
 800441c:	9303      	str	r3, [sp, #12]
 800441e:	688b      	ldr	r3, [r1, #8]
 8004420:	1e5a      	subs	r2, r3, #1
 8004422:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004426:	bf83      	ittte	hi
 8004428:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800442c:	195b      	addhi	r3, r3, r5
 800442e:	9302      	strhi	r3, [sp, #8]
 8004430:	2300      	movls	r3, #0
 8004432:	bf86      	itte	hi
 8004434:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004438:	608b      	strhi	r3, [r1, #8]
 800443a:	9302      	strls	r3, [sp, #8]
 800443c:	680b      	ldr	r3, [r1, #0]
 800443e:	468b      	mov	fp, r1
 8004440:	2500      	movs	r5, #0
 8004442:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004446:	f84b 3b1c 	str.w	r3, [fp], #28
 800444a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800444e:	4680      	mov	r8, r0
 8004450:	460c      	mov	r4, r1
 8004452:	465e      	mov	r6, fp
 8004454:	46aa      	mov	sl, r5
 8004456:	46a9      	mov	r9, r5
 8004458:	9501      	str	r5, [sp, #4]
 800445a:	68a2      	ldr	r2, [r4, #8]
 800445c:	b152      	cbz	r2, 8004474 <_scanf_float+0x60>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b4e      	cmp	r3, #78	; 0x4e
 8004464:	d864      	bhi.n	8004530 <_scanf_float+0x11c>
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d83c      	bhi.n	80044e4 <_scanf_float+0xd0>
 800446a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800446e:	b2c8      	uxtb	r0, r1
 8004470:	280e      	cmp	r0, #14
 8004472:	d93a      	bls.n	80044ea <_scanf_float+0xd6>
 8004474:	f1b9 0f00 	cmp.w	r9, #0
 8004478:	d003      	beq.n	8004482 <_scanf_float+0x6e>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004486:	f1ba 0f01 	cmp.w	sl, #1
 800448a:	f200 8113 	bhi.w	80046b4 <_scanf_float+0x2a0>
 800448e:	455e      	cmp	r6, fp
 8004490:	f200 8105 	bhi.w	800469e <_scanf_float+0x28a>
 8004494:	2501      	movs	r5, #1
 8004496:	4628      	mov	r0, r5
 8004498:	b007      	add	sp, #28
 800449a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80044a2:	2a0d      	cmp	r2, #13
 80044a4:	d8e6      	bhi.n	8004474 <_scanf_float+0x60>
 80044a6:	a101      	add	r1, pc, #4	; (adr r1, 80044ac <_scanf_float+0x98>)
 80044a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80044ac:	080045eb 	.word	0x080045eb
 80044b0:	08004475 	.word	0x08004475
 80044b4:	08004475 	.word	0x08004475
 80044b8:	08004475 	.word	0x08004475
 80044bc:	0800464b 	.word	0x0800464b
 80044c0:	08004623 	.word	0x08004623
 80044c4:	08004475 	.word	0x08004475
 80044c8:	08004475 	.word	0x08004475
 80044cc:	080045f9 	.word	0x080045f9
 80044d0:	08004475 	.word	0x08004475
 80044d4:	08004475 	.word	0x08004475
 80044d8:	08004475 	.word	0x08004475
 80044dc:	08004475 	.word	0x08004475
 80044e0:	080045b1 	.word	0x080045b1
 80044e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80044e8:	e7db      	b.n	80044a2 <_scanf_float+0x8e>
 80044ea:	290e      	cmp	r1, #14
 80044ec:	d8c2      	bhi.n	8004474 <_scanf_float+0x60>
 80044ee:	a001      	add	r0, pc, #4	; (adr r0, 80044f4 <_scanf_float+0xe0>)
 80044f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80044f4:	080045a3 	.word	0x080045a3
 80044f8:	08004475 	.word	0x08004475
 80044fc:	080045a3 	.word	0x080045a3
 8004500:	08004637 	.word	0x08004637
 8004504:	08004475 	.word	0x08004475
 8004508:	08004551 	.word	0x08004551
 800450c:	0800458d 	.word	0x0800458d
 8004510:	0800458d 	.word	0x0800458d
 8004514:	0800458d 	.word	0x0800458d
 8004518:	0800458d 	.word	0x0800458d
 800451c:	0800458d 	.word	0x0800458d
 8004520:	0800458d 	.word	0x0800458d
 8004524:	0800458d 	.word	0x0800458d
 8004528:	0800458d 	.word	0x0800458d
 800452c:	0800458d 	.word	0x0800458d
 8004530:	2b6e      	cmp	r3, #110	; 0x6e
 8004532:	d809      	bhi.n	8004548 <_scanf_float+0x134>
 8004534:	2b60      	cmp	r3, #96	; 0x60
 8004536:	d8b2      	bhi.n	800449e <_scanf_float+0x8a>
 8004538:	2b54      	cmp	r3, #84	; 0x54
 800453a:	d077      	beq.n	800462c <_scanf_float+0x218>
 800453c:	2b59      	cmp	r3, #89	; 0x59
 800453e:	d199      	bne.n	8004474 <_scanf_float+0x60>
 8004540:	2d07      	cmp	r5, #7
 8004542:	d197      	bne.n	8004474 <_scanf_float+0x60>
 8004544:	2508      	movs	r5, #8
 8004546:	e029      	b.n	800459c <_scanf_float+0x188>
 8004548:	2b74      	cmp	r3, #116	; 0x74
 800454a:	d06f      	beq.n	800462c <_scanf_float+0x218>
 800454c:	2b79      	cmp	r3, #121	; 0x79
 800454e:	e7f6      	b.n	800453e <_scanf_float+0x12a>
 8004550:	6821      	ldr	r1, [r4, #0]
 8004552:	05c8      	lsls	r0, r1, #23
 8004554:	d51a      	bpl.n	800458c <_scanf_float+0x178>
 8004556:	9b02      	ldr	r3, [sp, #8]
 8004558:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800455c:	6021      	str	r1, [r4, #0]
 800455e:	f109 0901 	add.w	r9, r9, #1
 8004562:	b11b      	cbz	r3, 800456c <_scanf_float+0x158>
 8004564:	3b01      	subs	r3, #1
 8004566:	3201      	adds	r2, #1
 8004568:	9302      	str	r3, [sp, #8]
 800456a:	60a2      	str	r2, [r4, #8]
 800456c:	68a3      	ldr	r3, [r4, #8]
 800456e:	3b01      	subs	r3, #1
 8004570:	60a3      	str	r3, [r4, #8]
 8004572:	6923      	ldr	r3, [r4, #16]
 8004574:	3301      	adds	r3, #1
 8004576:	6123      	str	r3, [r4, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3b01      	subs	r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	f340 8084 	ble.w	800468c <_scanf_float+0x278>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	3301      	adds	r3, #1
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	e766      	b.n	800445a <_scanf_float+0x46>
 800458c:	eb1a 0f05 	cmn.w	sl, r5
 8004590:	f47f af70 	bne.w	8004474 <_scanf_float+0x60>
 8004594:	6822      	ldr	r2, [r4, #0]
 8004596:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	f806 3b01 	strb.w	r3, [r6], #1
 80045a0:	e7e4      	b.n	800456c <_scanf_float+0x158>
 80045a2:	6822      	ldr	r2, [r4, #0]
 80045a4:	0610      	lsls	r0, r2, #24
 80045a6:	f57f af65 	bpl.w	8004474 <_scanf_float+0x60>
 80045aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ae:	e7f4      	b.n	800459a <_scanf_float+0x186>
 80045b0:	f1ba 0f00 	cmp.w	sl, #0
 80045b4:	d10e      	bne.n	80045d4 <_scanf_float+0x1c0>
 80045b6:	f1b9 0f00 	cmp.w	r9, #0
 80045ba:	d10e      	bne.n	80045da <_scanf_float+0x1c6>
 80045bc:	6822      	ldr	r2, [r4, #0]
 80045be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80045c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80045c6:	d108      	bne.n	80045da <_scanf_float+0x1c6>
 80045c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80045cc:	6022      	str	r2, [r4, #0]
 80045ce:	f04f 0a01 	mov.w	sl, #1
 80045d2:	e7e3      	b.n	800459c <_scanf_float+0x188>
 80045d4:	f1ba 0f02 	cmp.w	sl, #2
 80045d8:	d055      	beq.n	8004686 <_scanf_float+0x272>
 80045da:	2d01      	cmp	r5, #1
 80045dc:	d002      	beq.n	80045e4 <_scanf_float+0x1d0>
 80045de:	2d04      	cmp	r5, #4
 80045e0:	f47f af48 	bne.w	8004474 <_scanf_float+0x60>
 80045e4:	3501      	adds	r5, #1
 80045e6:	b2ed      	uxtb	r5, r5
 80045e8:	e7d8      	b.n	800459c <_scanf_float+0x188>
 80045ea:	f1ba 0f01 	cmp.w	sl, #1
 80045ee:	f47f af41 	bne.w	8004474 <_scanf_float+0x60>
 80045f2:	f04f 0a02 	mov.w	sl, #2
 80045f6:	e7d1      	b.n	800459c <_scanf_float+0x188>
 80045f8:	b97d      	cbnz	r5, 800461a <_scanf_float+0x206>
 80045fa:	f1b9 0f00 	cmp.w	r9, #0
 80045fe:	f47f af3c 	bne.w	800447a <_scanf_float+0x66>
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004608:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800460c:	f47f af39 	bne.w	8004482 <_scanf_float+0x6e>
 8004610:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004614:	6022      	str	r2, [r4, #0]
 8004616:	2501      	movs	r5, #1
 8004618:	e7c0      	b.n	800459c <_scanf_float+0x188>
 800461a:	2d03      	cmp	r5, #3
 800461c:	d0e2      	beq.n	80045e4 <_scanf_float+0x1d0>
 800461e:	2d05      	cmp	r5, #5
 8004620:	e7de      	b.n	80045e0 <_scanf_float+0x1cc>
 8004622:	2d02      	cmp	r5, #2
 8004624:	f47f af26 	bne.w	8004474 <_scanf_float+0x60>
 8004628:	2503      	movs	r5, #3
 800462a:	e7b7      	b.n	800459c <_scanf_float+0x188>
 800462c:	2d06      	cmp	r5, #6
 800462e:	f47f af21 	bne.w	8004474 <_scanf_float+0x60>
 8004632:	2507      	movs	r5, #7
 8004634:	e7b2      	b.n	800459c <_scanf_float+0x188>
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	0591      	lsls	r1, r2, #22
 800463a:	f57f af1b 	bpl.w	8004474 <_scanf_float+0x60>
 800463e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004642:	6022      	str	r2, [r4, #0]
 8004644:	f8cd 9004 	str.w	r9, [sp, #4]
 8004648:	e7a8      	b.n	800459c <_scanf_float+0x188>
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004650:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004654:	d006      	beq.n	8004664 <_scanf_float+0x250>
 8004656:	0550      	lsls	r0, r2, #21
 8004658:	f57f af0c 	bpl.w	8004474 <_scanf_float+0x60>
 800465c:	f1b9 0f00 	cmp.w	r9, #0
 8004660:	f43f af0f 	beq.w	8004482 <_scanf_float+0x6e>
 8004664:	0591      	lsls	r1, r2, #22
 8004666:	bf58      	it	pl
 8004668:	9901      	ldrpl	r1, [sp, #4]
 800466a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800466e:	bf58      	it	pl
 8004670:	eba9 0101 	subpl.w	r1, r9, r1
 8004674:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004678:	bf58      	it	pl
 800467a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800467e:	6022      	str	r2, [r4, #0]
 8004680:	f04f 0900 	mov.w	r9, #0
 8004684:	e78a      	b.n	800459c <_scanf_float+0x188>
 8004686:	f04f 0a03 	mov.w	sl, #3
 800468a:	e787      	b.n	800459c <_scanf_float+0x188>
 800468c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004690:	4639      	mov	r1, r7
 8004692:	4640      	mov	r0, r8
 8004694:	4798      	blx	r3
 8004696:	2800      	cmp	r0, #0
 8004698:	f43f aedf 	beq.w	800445a <_scanf_float+0x46>
 800469c:	e6ea      	b.n	8004474 <_scanf_float+0x60>
 800469e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046a6:	463a      	mov	r2, r7
 80046a8:	4640      	mov	r0, r8
 80046aa:	4798      	blx	r3
 80046ac:	6923      	ldr	r3, [r4, #16]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	6123      	str	r3, [r4, #16]
 80046b2:	e6ec      	b.n	800448e <_scanf_float+0x7a>
 80046b4:	1e6b      	subs	r3, r5, #1
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d825      	bhi.n	8004706 <_scanf_float+0x2f2>
 80046ba:	2d02      	cmp	r5, #2
 80046bc:	d836      	bhi.n	800472c <_scanf_float+0x318>
 80046be:	455e      	cmp	r6, fp
 80046c0:	f67f aee8 	bls.w	8004494 <_scanf_float+0x80>
 80046c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80046cc:	463a      	mov	r2, r7
 80046ce:	4640      	mov	r0, r8
 80046d0:	4798      	blx	r3
 80046d2:	6923      	ldr	r3, [r4, #16]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	e7f1      	b.n	80046be <_scanf_float+0x2aa>
 80046da:	9802      	ldr	r0, [sp, #8]
 80046dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80046e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80046e4:	9002      	str	r0, [sp, #8]
 80046e6:	463a      	mov	r2, r7
 80046e8:	4640      	mov	r0, r8
 80046ea:	4798      	blx	r3
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	6123      	str	r3, [r4, #16]
 80046f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80046f6:	fa5f fa8a 	uxtb.w	sl, sl
 80046fa:	f1ba 0f02 	cmp.w	sl, #2
 80046fe:	d1ec      	bne.n	80046da <_scanf_float+0x2c6>
 8004700:	3d03      	subs	r5, #3
 8004702:	b2ed      	uxtb	r5, r5
 8004704:	1b76      	subs	r6, r6, r5
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	05da      	lsls	r2, r3, #23
 800470a:	d52f      	bpl.n	800476c <_scanf_float+0x358>
 800470c:	055b      	lsls	r3, r3, #21
 800470e:	d510      	bpl.n	8004732 <_scanf_float+0x31e>
 8004710:	455e      	cmp	r6, fp
 8004712:	f67f aebf 	bls.w	8004494 <_scanf_float+0x80>
 8004716:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800471a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800471e:	463a      	mov	r2, r7
 8004720:	4640      	mov	r0, r8
 8004722:	4798      	blx	r3
 8004724:	6923      	ldr	r3, [r4, #16]
 8004726:	3b01      	subs	r3, #1
 8004728:	6123      	str	r3, [r4, #16]
 800472a:	e7f1      	b.n	8004710 <_scanf_float+0x2fc>
 800472c:	46aa      	mov	sl, r5
 800472e:	9602      	str	r6, [sp, #8]
 8004730:	e7df      	b.n	80046f2 <_scanf_float+0x2de>
 8004732:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004736:	6923      	ldr	r3, [r4, #16]
 8004738:	2965      	cmp	r1, #101	; 0x65
 800473a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800473e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004742:	6123      	str	r3, [r4, #16]
 8004744:	d00c      	beq.n	8004760 <_scanf_float+0x34c>
 8004746:	2945      	cmp	r1, #69	; 0x45
 8004748:	d00a      	beq.n	8004760 <_scanf_float+0x34c>
 800474a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800474e:	463a      	mov	r2, r7
 8004750:	4640      	mov	r0, r8
 8004752:	4798      	blx	r3
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800475a:	3b01      	subs	r3, #1
 800475c:	1eb5      	subs	r5, r6, #2
 800475e:	6123      	str	r3, [r4, #16]
 8004760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004764:	463a      	mov	r2, r7
 8004766:	4640      	mov	r0, r8
 8004768:	4798      	blx	r3
 800476a:	462e      	mov	r6, r5
 800476c:	6825      	ldr	r5, [r4, #0]
 800476e:	f015 0510 	ands.w	r5, r5, #16
 8004772:	d14e      	bne.n	8004812 <_scanf_float+0x3fe>
 8004774:	7035      	strb	r5, [r6, #0]
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004780:	d119      	bne.n	80047b6 <_scanf_float+0x3a2>
 8004782:	9b01      	ldr	r3, [sp, #4]
 8004784:	454b      	cmp	r3, r9
 8004786:	eba3 0209 	sub.w	r2, r3, r9
 800478a:	d121      	bne.n	80047d0 <_scanf_float+0x3bc>
 800478c:	2200      	movs	r2, #0
 800478e:	4659      	mov	r1, fp
 8004790:	4640      	mov	r0, r8
 8004792:	f000 fe3b 	bl	800540c <_strtod_r>
 8004796:	6822      	ldr	r2, [r4, #0]
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	f012 0f02 	tst.w	r2, #2
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	d021      	beq.n	80047e6 <_scanf_float+0x3d2>
 80047a2:	9903      	ldr	r1, [sp, #12]
 80047a4:	1d1a      	adds	r2, r3, #4
 80047a6:	600a      	str	r2, [r1, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	ed83 0b00 	vstr	d0, [r3]
 80047ae:	68e3      	ldr	r3, [r4, #12]
 80047b0:	3301      	adds	r3, #1
 80047b2:	60e3      	str	r3, [r4, #12]
 80047b4:	e66f      	b.n	8004496 <_scanf_float+0x82>
 80047b6:	9b04      	ldr	r3, [sp, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0e7      	beq.n	800478c <_scanf_float+0x378>
 80047bc:	9905      	ldr	r1, [sp, #20]
 80047be:	230a      	movs	r3, #10
 80047c0:	462a      	mov	r2, r5
 80047c2:	3101      	adds	r1, #1
 80047c4:	4640      	mov	r0, r8
 80047c6:	f000 fea9 	bl	800551c <_strtol_r>
 80047ca:	9b04      	ldr	r3, [sp, #16]
 80047cc:	9e05      	ldr	r6, [sp, #20]
 80047ce:	1ac2      	subs	r2, r0, r3
 80047d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80047d4:	429e      	cmp	r6, r3
 80047d6:	bf28      	it	cs
 80047d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80047dc:	490e      	ldr	r1, [pc, #56]	; (8004818 <_scanf_float+0x404>)
 80047de:	4630      	mov	r0, r6
 80047e0:	f000 f824 	bl	800482c <siprintf>
 80047e4:	e7d2      	b.n	800478c <_scanf_float+0x378>
 80047e6:	9903      	ldr	r1, [sp, #12]
 80047e8:	f012 0f04 	tst.w	r2, #4
 80047ec:	f103 0204 	add.w	r2, r3, #4
 80047f0:	600a      	str	r2, [r1, #0]
 80047f2:	d1d9      	bne.n	80047a8 <_scanf_float+0x394>
 80047f4:	eeb4 0b40 	vcmp.f64	d0, d0
 80047f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fc:	681e      	ldr	r6, [r3, #0]
 80047fe:	d705      	bvc.n	800480c <_scanf_float+0x3f8>
 8004800:	4806      	ldr	r0, [pc, #24]	; (800481c <_scanf_float+0x408>)
 8004802:	f000 f80d 	bl	8004820 <nanf>
 8004806:	ed86 0a00 	vstr	s0, [r6]
 800480a:	e7d0      	b.n	80047ae <_scanf_float+0x39a>
 800480c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8004810:	e7f9      	b.n	8004806 <_scanf_float+0x3f2>
 8004812:	2500      	movs	r5, #0
 8004814:	e63f      	b.n	8004496 <_scanf_float+0x82>
 8004816:	bf00      	nop
 8004818:	08008095 	.word	0x08008095
 800481c:	08008049 	.word	0x08008049

08004820 <nanf>:
 8004820:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004828 <nanf+0x8>
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	7fc00000 	.word	0x7fc00000

0800482c <siprintf>:
 800482c:	b40e      	push	{r1, r2, r3}
 800482e:	b500      	push	{lr}
 8004830:	b09c      	sub	sp, #112	; 0x70
 8004832:	ab1d      	add	r3, sp, #116	; 0x74
 8004834:	9002      	str	r0, [sp, #8]
 8004836:	9006      	str	r0, [sp, #24]
 8004838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800483c:	4809      	ldr	r0, [pc, #36]	; (8004864 <siprintf+0x38>)
 800483e:	9107      	str	r1, [sp, #28]
 8004840:	9104      	str	r1, [sp, #16]
 8004842:	4909      	ldr	r1, [pc, #36]	; (8004868 <siprintf+0x3c>)
 8004844:	f853 2b04 	ldr.w	r2, [r3], #4
 8004848:	9105      	str	r1, [sp, #20]
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	a902      	add	r1, sp, #8
 8004850:	f003 f93a 	bl	8007ac8 <_svfiprintf_r>
 8004854:	9b02      	ldr	r3, [sp, #8]
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	b01c      	add	sp, #112	; 0x70
 800485c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004860:	b003      	add	sp, #12
 8004862:	4770      	bx	lr
 8004864:	2000001c 	.word	0x2000001c
 8004868:	ffff0208 	.word	0xffff0208

0800486c <sulp>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	4604      	mov	r4, r0
 8004870:	460d      	mov	r5, r1
 8004872:	4616      	mov	r6, r2
 8004874:	ec45 4b10 	vmov	d0, r4, r5
 8004878:	f002 fe5a 	bl	8007530 <__ulp>
 800487c:	b17e      	cbz	r6, 800489e <sulp+0x32>
 800487e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004882:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004886:	2b00      	cmp	r3, #0
 8004888:	dd09      	ble.n	800489e <sulp+0x32>
 800488a:	051b      	lsls	r3, r3, #20
 800488c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8004890:	2000      	movs	r0, #0
 8004892:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8004896:	ec41 0b17 	vmov	d7, r0, r1
 800489a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800489e:	bd70      	pop	{r4, r5, r6, pc}

080048a0 <_strtod_l>:
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	ed2d 8b0e 	vpush	{d8-d14}
 80048a8:	b097      	sub	sp, #92	; 0x5c
 80048aa:	461f      	mov	r7, r3
 80048ac:	2300      	movs	r3, #0
 80048ae:	9312      	str	r3, [sp, #72]	; 0x48
 80048b0:	4ba1      	ldr	r3, [pc, #644]	; (8004b38 <_strtod_l+0x298>)
 80048b2:	920d      	str	r2, [sp, #52]	; 0x34
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	9307      	str	r3, [sp, #28]
 80048b8:	4604      	mov	r4, r0
 80048ba:	4618      	mov	r0, r3
 80048bc:	468b      	mov	fp, r1
 80048be:	f7fb fcbf 	bl	8000240 <strlen>
 80048c2:	f04f 0800 	mov.w	r8, #0
 80048c6:	4605      	mov	r5, r0
 80048c8:	f04f 0900 	mov.w	r9, #0
 80048cc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80048d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80048d2:	7813      	ldrb	r3, [r2, #0]
 80048d4:	2b2b      	cmp	r3, #43	; 0x2b
 80048d6:	d04d      	beq.n	8004974 <_strtod_l+0xd4>
 80048d8:	d83a      	bhi.n	8004950 <_strtod_l+0xb0>
 80048da:	2b0d      	cmp	r3, #13
 80048dc:	d833      	bhi.n	8004946 <_strtod_l+0xa6>
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d833      	bhi.n	800494a <_strtod_l+0xaa>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d03d      	beq.n	8004962 <_strtod_l+0xc2>
 80048e6:	2300      	movs	r3, #0
 80048e8:	9308      	str	r3, [sp, #32]
 80048ea:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80048ec:	7833      	ldrb	r3, [r6, #0]
 80048ee:	2b30      	cmp	r3, #48	; 0x30
 80048f0:	f040 80b0 	bne.w	8004a54 <_strtod_l+0x1b4>
 80048f4:	7873      	ldrb	r3, [r6, #1]
 80048f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80048fa:	2b58      	cmp	r3, #88	; 0x58
 80048fc:	d167      	bne.n	80049ce <_strtod_l+0x12e>
 80048fe:	9b08      	ldr	r3, [sp, #32]
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	ab12      	add	r3, sp, #72	; 0x48
 8004904:	9702      	str	r7, [sp, #8]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	4a8c      	ldr	r2, [pc, #560]	; (8004b3c <_strtod_l+0x29c>)
 800490a:	ab13      	add	r3, sp, #76	; 0x4c
 800490c:	a911      	add	r1, sp, #68	; 0x44
 800490e:	4620      	mov	r0, r4
 8004910:	f001 fee6 	bl	80066e0 <__gethex>
 8004914:	f010 0507 	ands.w	r5, r0, #7
 8004918:	4607      	mov	r7, r0
 800491a:	d005      	beq.n	8004928 <_strtod_l+0x88>
 800491c:	2d06      	cmp	r5, #6
 800491e:	d12b      	bne.n	8004978 <_strtod_l+0xd8>
 8004920:	3601      	adds	r6, #1
 8004922:	2300      	movs	r3, #0
 8004924:	9611      	str	r6, [sp, #68]	; 0x44
 8004926:	9308      	str	r3, [sp, #32]
 8004928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 854e 	bne.w	80053cc <_strtod_l+0xb2c>
 8004930:	9b08      	ldr	r3, [sp, #32]
 8004932:	b1e3      	cbz	r3, 800496e <_strtod_l+0xce>
 8004934:	ec49 8b17 	vmov	d7, r8, r9
 8004938:	eeb1 0b47 	vneg.f64	d0, d7
 800493c:	b017      	add	sp, #92	; 0x5c
 800493e:	ecbd 8b0e 	vpop	{d8-d14}
 8004942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004946:	2b20      	cmp	r3, #32
 8004948:	d1cd      	bne.n	80048e6 <_strtod_l+0x46>
 800494a:	3201      	adds	r2, #1
 800494c:	9211      	str	r2, [sp, #68]	; 0x44
 800494e:	e7bf      	b.n	80048d0 <_strtod_l+0x30>
 8004950:	2b2d      	cmp	r3, #45	; 0x2d
 8004952:	d1c8      	bne.n	80048e6 <_strtod_l+0x46>
 8004954:	2301      	movs	r3, #1
 8004956:	9308      	str	r3, [sp, #32]
 8004958:	1c53      	adds	r3, r2, #1
 800495a:	9311      	str	r3, [sp, #68]	; 0x44
 800495c:	7853      	ldrb	r3, [r2, #1]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1c3      	bne.n	80048ea <_strtod_l+0x4a>
 8004962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004964:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 852d 	bne.w	80053c8 <_strtod_l+0xb28>
 800496e:	ec49 8b10 	vmov	d0, r8, r9
 8004972:	e7e3      	b.n	800493c <_strtod_l+0x9c>
 8004974:	2300      	movs	r3, #0
 8004976:	e7ee      	b.n	8004956 <_strtod_l+0xb6>
 8004978:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800497a:	b13a      	cbz	r2, 800498c <_strtod_l+0xec>
 800497c:	2135      	movs	r1, #53	; 0x35
 800497e:	a814      	add	r0, sp, #80	; 0x50
 8004980:	f002 fede 	bl	8007740 <__copybits>
 8004984:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004986:	4620      	mov	r0, r4
 8004988:	f002 faa0 	bl	8006ecc <_Bfree>
 800498c:	3d01      	subs	r5, #1
 800498e:	2d04      	cmp	r5, #4
 8004990:	d806      	bhi.n	80049a0 <_strtod_l+0x100>
 8004992:	e8df f005 	tbb	[pc, r5]
 8004996:	030a      	.short	0x030a
 8004998:	1714      	.short	0x1714
 800499a:	0a          	.byte	0x0a
 800499b:	00          	.byte	0x00
 800499c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80049a0:	073f      	lsls	r7, r7, #28
 80049a2:	d5c1      	bpl.n	8004928 <_strtod_l+0x88>
 80049a4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80049a8:	e7be      	b.n	8004928 <_strtod_l+0x88>
 80049aa:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80049ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80049b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80049b4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80049b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80049bc:	e7f0      	b.n	80049a0 <_strtod_l+0x100>
 80049be:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004b40 <_strtod_l+0x2a0>
 80049c2:	e7ed      	b.n	80049a0 <_strtod_l+0x100>
 80049c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80049c8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80049cc:	e7e8      	b.n	80049a0 <_strtod_l+0x100>
 80049ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	9211      	str	r2, [sp, #68]	; 0x44
 80049d4:	785b      	ldrb	r3, [r3, #1]
 80049d6:	2b30      	cmp	r3, #48	; 0x30
 80049d8:	d0f9      	beq.n	80049ce <_strtod_l+0x12e>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0a4      	beq.n	8004928 <_strtod_l+0x88>
 80049de:	2301      	movs	r3, #1
 80049e0:	f04f 0a00 	mov.w	sl, #0
 80049e4:	9304      	str	r3, [sp, #16]
 80049e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049e8:	930a      	str	r3, [sp, #40]	; 0x28
 80049ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80049ee:	f8cd a018 	str.w	sl, [sp, #24]
 80049f2:	220a      	movs	r2, #10
 80049f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80049f6:	7807      	ldrb	r7, [r0, #0]
 80049f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80049fc:	b2d9      	uxtb	r1, r3
 80049fe:	2909      	cmp	r1, #9
 8004a00:	d92a      	bls.n	8004a58 <_strtod_l+0x1b8>
 8004a02:	9907      	ldr	r1, [sp, #28]
 8004a04:	462a      	mov	r2, r5
 8004a06:	f003 f9fe 	bl	8007e06 <strncmp>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d033      	beq.n	8004a76 <_strtod_l+0x1d6>
 8004a0e:	2000      	movs	r0, #0
 8004a10:	9b06      	ldr	r3, [sp, #24]
 8004a12:	463a      	mov	r2, r7
 8004a14:	4601      	mov	r1, r0
 8004a16:	4607      	mov	r7, r0
 8004a18:	2a65      	cmp	r2, #101	; 0x65
 8004a1a:	d001      	beq.n	8004a20 <_strtod_l+0x180>
 8004a1c:	2a45      	cmp	r2, #69	; 0x45
 8004a1e:	d117      	bne.n	8004a50 <_strtod_l+0x1b0>
 8004a20:	b91b      	cbnz	r3, 8004a2a <_strtod_l+0x18a>
 8004a22:	9b04      	ldr	r3, [sp, #16]
 8004a24:	4303      	orrs	r3, r0
 8004a26:	d09c      	beq.n	8004962 <_strtod_l+0xc2>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8004a2e:	f10b 0201 	add.w	r2, fp, #1
 8004a32:	9211      	str	r2, [sp, #68]	; 0x44
 8004a34:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8004a38:	2a2b      	cmp	r2, #43	; 0x2b
 8004a3a:	d071      	beq.n	8004b20 <_strtod_l+0x280>
 8004a3c:	2a2d      	cmp	r2, #45	; 0x2d
 8004a3e:	d077      	beq.n	8004b30 <_strtod_l+0x290>
 8004a40:	f04f 0e00 	mov.w	lr, #0
 8004a44:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004a48:	2d09      	cmp	r5, #9
 8004a4a:	d97f      	bls.n	8004b4c <_strtod_l+0x2ac>
 8004a4c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8004a50:	2500      	movs	r5, #0
 8004a52:	e09b      	b.n	8004b8c <_strtod_l+0x2ec>
 8004a54:	2300      	movs	r3, #0
 8004a56:	e7c3      	b.n	80049e0 <_strtod_l+0x140>
 8004a58:	9906      	ldr	r1, [sp, #24]
 8004a5a:	2908      	cmp	r1, #8
 8004a5c:	bfdd      	ittte	le
 8004a5e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004a60:	fb02 3301 	mlale	r3, r2, r1, r3
 8004a64:	9309      	strle	r3, [sp, #36]	; 0x24
 8004a66:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004a6a:	9b06      	ldr	r3, [sp, #24]
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	3301      	adds	r3, #1
 8004a70:	9306      	str	r3, [sp, #24]
 8004a72:	9011      	str	r0, [sp, #68]	; 0x44
 8004a74:	e7be      	b.n	80049f4 <_strtod_l+0x154>
 8004a76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a78:	195a      	adds	r2, r3, r5
 8004a7a:	9211      	str	r2, [sp, #68]	; 0x44
 8004a7c:	5d5a      	ldrb	r2, [r3, r5]
 8004a7e:	9b06      	ldr	r3, [sp, #24]
 8004a80:	b3a3      	cbz	r3, 8004aec <_strtod_l+0x24c>
 8004a82:	4607      	mov	r7, r0
 8004a84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004a88:	2909      	cmp	r1, #9
 8004a8a:	d912      	bls.n	8004ab2 <_strtod_l+0x212>
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	e7c3      	b.n	8004a18 <_strtod_l+0x178>
 8004a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	9211      	str	r2, [sp, #68]	; 0x44
 8004a96:	785a      	ldrb	r2, [r3, #1]
 8004a98:	3001      	adds	r0, #1
 8004a9a:	2a30      	cmp	r2, #48	; 0x30
 8004a9c:	d0f8      	beq.n	8004a90 <_strtod_l+0x1f0>
 8004a9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	f200 8497 	bhi.w	80053d6 <_strtod_l+0xb36>
 8004aa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8004aac:	4607      	mov	r7, r0
 8004aae:	2000      	movs	r0, #0
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	3a30      	subs	r2, #48	; 0x30
 8004ab4:	f100 0101 	add.w	r1, r0, #1
 8004ab8:	d012      	beq.n	8004ae0 <_strtod_l+0x240>
 8004aba:	440f      	add	r7, r1
 8004abc:	eb00 0c03 	add.w	ip, r0, r3
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	250a      	movs	r5, #10
 8004ac4:	4561      	cmp	r1, ip
 8004ac6:	d113      	bne.n	8004af0 <_strtod_l+0x250>
 8004ac8:	1819      	adds	r1, r3, r0
 8004aca:	2908      	cmp	r1, #8
 8004acc:	f103 0301 	add.w	r3, r3, #1
 8004ad0:	4403      	add	r3, r0
 8004ad2:	dc1c      	bgt.n	8004b0e <_strtod_l+0x26e>
 8004ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ad6:	210a      	movs	r1, #10
 8004ad8:	fb01 2200 	mla	r2, r1, r0, r2
 8004adc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ade:	2100      	movs	r1, #0
 8004ae0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004ae2:	1c50      	adds	r0, r2, #1
 8004ae4:	9011      	str	r0, [sp, #68]	; 0x44
 8004ae6:	7852      	ldrb	r2, [r2, #1]
 8004ae8:	4608      	mov	r0, r1
 8004aea:	e7cb      	b.n	8004a84 <_strtod_l+0x1e4>
 8004aec:	9806      	ldr	r0, [sp, #24]
 8004aee:	e7d4      	b.n	8004a9a <_strtod_l+0x1fa>
 8004af0:	2908      	cmp	r1, #8
 8004af2:	dc04      	bgt.n	8004afe <_strtod_l+0x25e>
 8004af4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004af6:	436e      	muls	r6, r5
 8004af8:	9609      	str	r6, [sp, #36]	; 0x24
 8004afa:	3101      	adds	r1, #1
 8004afc:	e7e2      	b.n	8004ac4 <_strtod_l+0x224>
 8004afe:	f101 0e01 	add.w	lr, r1, #1
 8004b02:	f1be 0f10 	cmp.w	lr, #16
 8004b06:	bfd8      	it	le
 8004b08:	fb05 fa0a 	mulle.w	sl, r5, sl
 8004b0c:	e7f5      	b.n	8004afa <_strtod_l+0x25a>
 8004b0e:	2b10      	cmp	r3, #16
 8004b10:	bfdc      	itt	le
 8004b12:	210a      	movle	r1, #10
 8004b14:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8004b18:	e7e1      	b.n	8004ade <_strtod_l+0x23e>
 8004b1a:	2700      	movs	r7, #0
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	e780      	b.n	8004a22 <_strtod_l+0x182>
 8004b20:	f04f 0e00 	mov.w	lr, #0
 8004b24:	f10b 0202 	add.w	r2, fp, #2
 8004b28:	9211      	str	r2, [sp, #68]	; 0x44
 8004b2a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8004b2e:	e789      	b.n	8004a44 <_strtod_l+0x1a4>
 8004b30:	f04f 0e01 	mov.w	lr, #1
 8004b34:	e7f6      	b.n	8004b24 <_strtod_l+0x284>
 8004b36:	bf00      	nop
 8004b38:	0800834c 	.word	0x0800834c
 8004b3c:	0800809c 	.word	0x0800809c
 8004b40:	7ff00000 	.word	0x7ff00000
 8004b44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004b46:	1c55      	adds	r5, r2, #1
 8004b48:	9511      	str	r5, [sp, #68]	; 0x44
 8004b4a:	7852      	ldrb	r2, [r2, #1]
 8004b4c:	2a30      	cmp	r2, #48	; 0x30
 8004b4e:	d0f9      	beq.n	8004b44 <_strtod_l+0x2a4>
 8004b50:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8004b54:	2d08      	cmp	r5, #8
 8004b56:	f63f af7b 	bhi.w	8004a50 <_strtod_l+0x1b0>
 8004b5a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004b5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004b60:	9207      	str	r2, [sp, #28]
 8004b62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004b64:	1c55      	adds	r5, r2, #1
 8004b66:	9511      	str	r5, [sp, #68]	; 0x44
 8004b68:	7852      	ldrb	r2, [r2, #1]
 8004b6a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004b6e:	2e09      	cmp	r6, #9
 8004b70:	d937      	bls.n	8004be2 <_strtod_l+0x342>
 8004b72:	9e07      	ldr	r6, [sp, #28]
 8004b74:	1bad      	subs	r5, r5, r6
 8004b76:	2d08      	cmp	r5, #8
 8004b78:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004b7c:	dc02      	bgt.n	8004b84 <_strtod_l+0x2e4>
 8004b7e:	4565      	cmp	r5, ip
 8004b80:	bfa8      	it	ge
 8004b82:	4665      	movge	r5, ip
 8004b84:	f1be 0f00 	cmp.w	lr, #0
 8004b88:	d000      	beq.n	8004b8c <_strtod_l+0x2ec>
 8004b8a:	426d      	negs	r5, r5
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d14d      	bne.n	8004c2c <_strtod_l+0x38c>
 8004b90:	9b04      	ldr	r3, [sp, #16]
 8004b92:	4303      	orrs	r3, r0
 8004b94:	f47f aec8 	bne.w	8004928 <_strtod_l+0x88>
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	f47f aee2 	bne.w	8004962 <_strtod_l+0xc2>
 8004b9e:	2a69      	cmp	r2, #105	; 0x69
 8004ba0:	d027      	beq.n	8004bf2 <_strtod_l+0x352>
 8004ba2:	dc24      	bgt.n	8004bee <_strtod_l+0x34e>
 8004ba4:	2a49      	cmp	r2, #73	; 0x49
 8004ba6:	d024      	beq.n	8004bf2 <_strtod_l+0x352>
 8004ba8:	2a4e      	cmp	r2, #78	; 0x4e
 8004baa:	f47f aeda 	bne.w	8004962 <_strtod_l+0xc2>
 8004bae:	4996      	ldr	r1, [pc, #600]	; (8004e08 <_strtod_l+0x568>)
 8004bb0:	a811      	add	r0, sp, #68	; 0x44
 8004bb2:	f001 ffed 	bl	8006b90 <__match>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	f43f aed3 	beq.w	8004962 <_strtod_l+0xc2>
 8004bbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b28      	cmp	r3, #40	; 0x28
 8004bc2:	d12d      	bne.n	8004c20 <_strtod_l+0x380>
 8004bc4:	4991      	ldr	r1, [pc, #580]	; (8004e0c <_strtod_l+0x56c>)
 8004bc6:	aa14      	add	r2, sp, #80	; 0x50
 8004bc8:	a811      	add	r0, sp, #68	; 0x44
 8004bca:	f001 fff5 	bl	8006bb8 <__hexnan>
 8004bce:	2805      	cmp	r0, #5
 8004bd0:	d126      	bne.n	8004c20 <_strtod_l+0x380>
 8004bd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004bd4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8004bd8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004bdc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004be0:	e6a2      	b.n	8004928 <_strtod_l+0x88>
 8004be2:	250a      	movs	r5, #10
 8004be4:	fb05 250c 	mla	r5, r5, ip, r2
 8004be8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8004bec:	e7b9      	b.n	8004b62 <_strtod_l+0x2c2>
 8004bee:	2a6e      	cmp	r2, #110	; 0x6e
 8004bf0:	e7db      	b.n	8004baa <_strtod_l+0x30a>
 8004bf2:	4987      	ldr	r1, [pc, #540]	; (8004e10 <_strtod_l+0x570>)
 8004bf4:	a811      	add	r0, sp, #68	; 0x44
 8004bf6:	f001 ffcb 	bl	8006b90 <__match>
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	f43f aeb1 	beq.w	8004962 <_strtod_l+0xc2>
 8004c00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c02:	4984      	ldr	r1, [pc, #528]	; (8004e14 <_strtod_l+0x574>)
 8004c04:	3b01      	subs	r3, #1
 8004c06:	a811      	add	r0, sp, #68	; 0x44
 8004c08:	9311      	str	r3, [sp, #68]	; 0x44
 8004c0a:	f001 ffc1 	bl	8006b90 <__match>
 8004c0e:	b910      	cbnz	r0, 8004c16 <_strtod_l+0x376>
 8004c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c12:	3301      	adds	r3, #1
 8004c14:	9311      	str	r3, [sp, #68]	; 0x44
 8004c16:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8004e28 <_strtod_l+0x588>
 8004c1a:	f04f 0800 	mov.w	r8, #0
 8004c1e:	e683      	b.n	8004928 <_strtod_l+0x88>
 8004c20:	487d      	ldr	r0, [pc, #500]	; (8004e18 <_strtod_l+0x578>)
 8004c22:	f003 f851 	bl	8007cc8 <nan>
 8004c26:	ec59 8b10 	vmov	r8, r9, d0
 8004c2a:	e67d      	b.n	8004928 <_strtod_l+0x88>
 8004c2c:	1bea      	subs	r2, r5, r7
 8004c2e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8004c32:	9207      	str	r2, [sp, #28]
 8004c34:	9a06      	ldr	r2, [sp, #24]
 8004c36:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004c3a:	2a00      	cmp	r2, #0
 8004c3c:	bf08      	it	eq
 8004c3e:	461a      	moveq	r2, r3
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	9206      	str	r2, [sp, #24]
 8004c44:	461a      	mov	r2, r3
 8004c46:	bfa8      	it	ge
 8004c48:	2210      	movge	r2, #16
 8004c4a:	2b09      	cmp	r3, #9
 8004c4c:	ec59 8b17 	vmov	r8, r9, d7
 8004c50:	dd0c      	ble.n	8004c6c <_strtod_l+0x3cc>
 8004c52:	4972      	ldr	r1, [pc, #456]	; (8004e1c <_strtod_l+0x57c>)
 8004c54:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8004c58:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8004c5c:	ee06 aa90 	vmov	s13, sl
 8004c60:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8004c64:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004c68:	ec59 8b16 	vmov	r8, r9, d6
 8004c6c:	2b0f      	cmp	r3, #15
 8004c6e:	dc36      	bgt.n	8004cde <_strtod_l+0x43e>
 8004c70:	9907      	ldr	r1, [sp, #28]
 8004c72:	2900      	cmp	r1, #0
 8004c74:	f43f ae58 	beq.w	8004928 <_strtod_l+0x88>
 8004c78:	dd23      	ble.n	8004cc2 <_strtod_l+0x422>
 8004c7a:	2916      	cmp	r1, #22
 8004c7c:	dc0b      	bgt.n	8004c96 <_strtod_l+0x3f6>
 8004c7e:	4b67      	ldr	r3, [pc, #412]	; (8004e1c <_strtod_l+0x57c>)
 8004c80:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004c84:	ed93 7b00 	vldr	d7, [r3]
 8004c88:	ec49 8b16 	vmov	d6, r8, r9
 8004c8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004c90:	ec59 8b17 	vmov	r8, r9, d7
 8004c94:	e648      	b.n	8004928 <_strtod_l+0x88>
 8004c96:	9807      	ldr	r0, [sp, #28]
 8004c98:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8004c9c:	4281      	cmp	r1, r0
 8004c9e:	db1e      	blt.n	8004cde <_strtod_l+0x43e>
 8004ca0:	4a5e      	ldr	r2, [pc, #376]	; (8004e1c <_strtod_l+0x57c>)
 8004ca2:	f1c3 030f 	rsb	r3, r3, #15
 8004ca6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8004caa:	ed91 7b00 	vldr	d7, [r1]
 8004cae:	ec49 8b16 	vmov	d6, r8, r9
 8004cb2:	1ac3      	subs	r3, r0, r3
 8004cb4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8004cb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004cbc:	ed92 6b00 	vldr	d6, [r2]
 8004cc0:	e7e4      	b.n	8004c8c <_strtod_l+0x3ec>
 8004cc2:	9907      	ldr	r1, [sp, #28]
 8004cc4:	3116      	adds	r1, #22
 8004cc6:	db0a      	blt.n	8004cde <_strtod_l+0x43e>
 8004cc8:	4b54      	ldr	r3, [pc, #336]	; (8004e1c <_strtod_l+0x57c>)
 8004cca:	1b7d      	subs	r5, r7, r5
 8004ccc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004cd0:	ed95 7b00 	vldr	d7, [r5]
 8004cd4:	ec49 8b16 	vmov	d6, r8, r9
 8004cd8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004cdc:	e7d8      	b.n	8004c90 <_strtod_l+0x3f0>
 8004cde:	9907      	ldr	r1, [sp, #28]
 8004ce0:	1a9a      	subs	r2, r3, r2
 8004ce2:	440a      	add	r2, r1
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	dd6f      	ble.n	8004dc8 <_strtod_l+0x528>
 8004ce8:	f012 000f 	ands.w	r0, r2, #15
 8004cec:	d00a      	beq.n	8004d04 <_strtod_l+0x464>
 8004cee:	494b      	ldr	r1, [pc, #300]	; (8004e1c <_strtod_l+0x57c>)
 8004cf0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8004cf4:	ed91 7b00 	vldr	d7, [r1]
 8004cf8:	ec49 8b16 	vmov	d6, r8, r9
 8004cfc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d00:	ec59 8b17 	vmov	r8, r9, d7
 8004d04:	f032 020f 	bics.w	r2, r2, #15
 8004d08:	d04f      	beq.n	8004daa <_strtod_l+0x50a>
 8004d0a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8004d0e:	dd22      	ble.n	8004d56 <_strtod_l+0x4b6>
 8004d10:	2500      	movs	r5, #0
 8004d12:	462e      	mov	r6, r5
 8004d14:	9506      	str	r5, [sp, #24]
 8004d16:	462f      	mov	r7, r5
 8004d18:	2322      	movs	r3, #34	; 0x22
 8004d1a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8004e28 <_strtod_l+0x588>
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	f04f 0800 	mov.w	r8, #0
 8004d24:	9b06      	ldr	r3, [sp, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f43f adfe 	beq.w	8004928 <_strtod_l+0x88>
 8004d2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f002 f8cc 	bl	8006ecc <_Bfree>
 8004d34:	4639      	mov	r1, r7
 8004d36:	4620      	mov	r0, r4
 8004d38:	f002 f8c8 	bl	8006ecc <_Bfree>
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f002 f8c4 	bl	8006ecc <_Bfree>
 8004d44:	9906      	ldr	r1, [sp, #24]
 8004d46:	4620      	mov	r0, r4
 8004d48:	f002 f8c0 	bl	8006ecc <_Bfree>
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f002 f8bc 	bl	8006ecc <_Bfree>
 8004d54:	e5e8      	b.n	8004928 <_strtod_l+0x88>
 8004d56:	2000      	movs	r0, #0
 8004d58:	ec49 8b17 	vmov	d7, r8, r9
 8004d5c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8004e20 <_strtod_l+0x580>
 8004d60:	1112      	asrs	r2, r2, #4
 8004d62:	4601      	mov	r1, r0
 8004d64:	2a01      	cmp	r2, #1
 8004d66:	dc23      	bgt.n	8004db0 <_strtod_l+0x510>
 8004d68:	b108      	cbz	r0, 8004d6e <_strtod_l+0x4ce>
 8004d6a:	ec59 8b17 	vmov	r8, r9, d7
 8004d6e:	4a2c      	ldr	r2, [pc, #176]	; (8004e20 <_strtod_l+0x580>)
 8004d70:	482c      	ldr	r0, [pc, #176]	; (8004e24 <_strtod_l+0x584>)
 8004d72:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004d76:	ed92 7b00 	vldr	d7, [r2]
 8004d7a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004d7e:	ec49 8b16 	vmov	d6, r8, r9
 8004d82:	4a29      	ldr	r2, [pc, #164]	; (8004e28 <_strtod_l+0x588>)
 8004d84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d88:	ee17 1a90 	vmov	r1, s15
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	4282      	cmp	r2, r0
 8004d90:	ec59 8b17 	vmov	r8, r9, d7
 8004d94:	d8bc      	bhi.n	8004d10 <_strtod_l+0x470>
 8004d96:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8004d9a:	4282      	cmp	r2, r0
 8004d9c:	bf86      	itte	hi
 8004d9e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8004e2c <_strtod_l+0x58c>
 8004da2:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8004da6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8004daa:	2200      	movs	r2, #0
 8004dac:	9204      	str	r2, [sp, #16]
 8004dae:	e078      	b.n	8004ea2 <_strtod_l+0x602>
 8004db0:	07d6      	lsls	r6, r2, #31
 8004db2:	d504      	bpl.n	8004dbe <_strtod_l+0x51e>
 8004db4:	ed9c 6b00 	vldr	d6, [ip]
 8004db8:	2001      	movs	r0, #1
 8004dba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004dbe:	3101      	adds	r1, #1
 8004dc0:	1052      	asrs	r2, r2, #1
 8004dc2:	f10c 0c08 	add.w	ip, ip, #8
 8004dc6:	e7cd      	b.n	8004d64 <_strtod_l+0x4c4>
 8004dc8:	d0ef      	beq.n	8004daa <_strtod_l+0x50a>
 8004dca:	4252      	negs	r2, r2
 8004dcc:	f012 000f 	ands.w	r0, r2, #15
 8004dd0:	d00a      	beq.n	8004de8 <_strtod_l+0x548>
 8004dd2:	4912      	ldr	r1, [pc, #72]	; (8004e1c <_strtod_l+0x57c>)
 8004dd4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8004dd8:	ed91 7b00 	vldr	d7, [r1]
 8004ddc:	ec49 8b16 	vmov	d6, r8, r9
 8004de0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004de4:	ec59 8b17 	vmov	r8, r9, d7
 8004de8:	1112      	asrs	r2, r2, #4
 8004dea:	d0de      	beq.n	8004daa <_strtod_l+0x50a>
 8004dec:	2a1f      	cmp	r2, #31
 8004dee:	dd1f      	ble.n	8004e30 <_strtod_l+0x590>
 8004df0:	2500      	movs	r5, #0
 8004df2:	462e      	mov	r6, r5
 8004df4:	9506      	str	r5, [sp, #24]
 8004df6:	462f      	mov	r7, r5
 8004df8:	2322      	movs	r3, #34	; 0x22
 8004dfa:	f04f 0800 	mov.w	r8, #0
 8004dfe:	f04f 0900 	mov.w	r9, #0
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	e78e      	b.n	8004d24 <_strtod_l+0x484>
 8004e06:	bf00      	nop
 8004e08:	0800806e 	.word	0x0800806e
 8004e0c:	080080b0 	.word	0x080080b0
 8004e10:	08008066 	.word	0x08008066
 8004e14:	080081f4 	.word	0x080081f4
 8004e18:	08008049 	.word	0x08008049
 8004e1c:	080083e8 	.word	0x080083e8
 8004e20:	080083c0 	.word	0x080083c0
 8004e24:	7ca00000 	.word	0x7ca00000
 8004e28:	7ff00000 	.word	0x7ff00000
 8004e2c:	7fefffff 	.word	0x7fefffff
 8004e30:	f012 0110 	ands.w	r1, r2, #16
 8004e34:	bf18      	it	ne
 8004e36:	216a      	movne	r1, #106	; 0x6a
 8004e38:	9104      	str	r1, [sp, #16]
 8004e3a:	ec49 8b17 	vmov	d7, r8, r9
 8004e3e:	49be      	ldr	r1, [pc, #760]	; (8005138 <_strtod_l+0x898>)
 8004e40:	2000      	movs	r0, #0
 8004e42:	07d6      	lsls	r6, r2, #31
 8004e44:	d504      	bpl.n	8004e50 <_strtod_l+0x5b0>
 8004e46:	ed91 6b00 	vldr	d6, [r1]
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e50:	1052      	asrs	r2, r2, #1
 8004e52:	f101 0108 	add.w	r1, r1, #8
 8004e56:	d1f4      	bne.n	8004e42 <_strtod_l+0x5a2>
 8004e58:	b108      	cbz	r0, 8004e5e <_strtod_l+0x5be>
 8004e5a:	ec59 8b17 	vmov	r8, r9, d7
 8004e5e:	9a04      	ldr	r2, [sp, #16]
 8004e60:	b1c2      	cbz	r2, 8004e94 <_strtod_l+0x5f4>
 8004e62:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8004e66:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8004e6a:	2a00      	cmp	r2, #0
 8004e6c:	4648      	mov	r0, r9
 8004e6e:	dd11      	ble.n	8004e94 <_strtod_l+0x5f4>
 8004e70:	2a1f      	cmp	r2, #31
 8004e72:	f340 812e 	ble.w	80050d2 <_strtod_l+0x832>
 8004e76:	2a34      	cmp	r2, #52	; 0x34
 8004e78:	bfde      	ittt	le
 8004e7a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8004e7e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8004e82:	fa02 f101 	lslle.w	r1, r2, r1
 8004e86:	f04f 0800 	mov.w	r8, #0
 8004e8a:	bfcc      	ite	gt
 8004e8c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004e90:	ea01 0900 	andle.w	r9, r1, r0
 8004e94:	ec49 8b17 	vmov	d7, r8, r9
 8004e98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea0:	d0a6      	beq.n	8004df0 <_strtod_l+0x550>
 8004ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ea4:	9200      	str	r2, [sp, #0]
 8004ea6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ea8:	9a06      	ldr	r2, [sp, #24]
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f002 f876 	bl	8006f9c <__s2b>
 8004eb0:	9006      	str	r0, [sp, #24]
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	f43f af2c 	beq.w	8004d10 <_strtod_l+0x470>
 8004eb8:	9b07      	ldr	r3, [sp, #28]
 8004eba:	1b7d      	subs	r5, r7, r5
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bfb4      	ite	lt
 8004ec0:	462b      	movlt	r3, r5
 8004ec2:	2300      	movge	r3, #0
 8004ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec6:	9b07      	ldr	r3, [sp, #28]
 8004ec8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8005118 <_strtod_l+0x878>
 8004ecc:	ed9f ab94 	vldr	d10, [pc, #592]	; 8005120 <_strtod_l+0x880>
 8004ed0:	ed9f bb95 	vldr	d11, [pc, #596]	; 8005128 <_strtod_l+0x888>
 8004ed4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ed8:	2500      	movs	r5, #0
 8004eda:	930c      	str	r3, [sp, #48]	; 0x30
 8004edc:	462e      	mov	r6, r5
 8004ede:	9b06      	ldr	r3, [sp, #24]
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	6859      	ldr	r1, [r3, #4]
 8004ee4:	f001 ffb2 	bl	8006e4c <_Balloc>
 8004ee8:	4607      	mov	r7, r0
 8004eea:	2800      	cmp	r0, #0
 8004eec:	f43f af14 	beq.w	8004d18 <_strtod_l+0x478>
 8004ef0:	9b06      	ldr	r3, [sp, #24]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	3202      	adds	r2, #2
 8004ef6:	f103 010c 	add.w	r1, r3, #12
 8004efa:	0092      	lsls	r2, r2, #2
 8004efc:	300c      	adds	r0, #12
 8004efe:	f001 ff7d 	bl	8006dfc <memcpy>
 8004f02:	ec49 8b10 	vmov	d0, r8, r9
 8004f06:	aa14      	add	r2, sp, #80	; 0x50
 8004f08:	a913      	add	r1, sp, #76	; 0x4c
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f002 fb8c 	bl	8007628 <__d2b>
 8004f10:	ec49 8b18 	vmov	d8, r8, r9
 8004f14:	9012      	str	r0, [sp, #72]	; 0x48
 8004f16:	2800      	cmp	r0, #0
 8004f18:	f43f aefe 	beq.w	8004d18 <_strtod_l+0x478>
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f002 f8d6 	bl	80070d0 <__i2b>
 8004f24:	4606      	mov	r6, r0
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f43f aef6 	beq.w	8004d18 <_strtod_l+0x478>
 8004f2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f2e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bfab      	itete	ge
 8004f34:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8004f36:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8004f38:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8004f3c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8004f40:	bfac      	ite	ge
 8004f42:	eb03 0b02 	addge.w	fp, r3, r2
 8004f46:	eba2 0a03 	sublt.w	sl, r2, r3
 8004f4a:	9a04      	ldr	r2, [sp, #16]
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	440b      	add	r3, r1
 8004f50:	4a7a      	ldr	r2, [pc, #488]	; (800513c <_strtod_l+0x89c>)
 8004f52:	3b01      	subs	r3, #1
 8004f54:	4293      	cmp	r3, r2
 8004f56:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8004f5a:	f280 80cd 	bge.w	80050f8 <_strtod_l+0x858>
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	2a1f      	cmp	r2, #31
 8004f62:	eba1 0102 	sub.w	r1, r1, r2
 8004f66:	f04f 0001 	mov.w	r0, #1
 8004f6a:	f300 80b9 	bgt.w	80050e0 <_strtod_l+0x840>
 8004f6e:	fa00 f302 	lsl.w	r3, r0, r2
 8004f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f74:	2300      	movs	r3, #0
 8004f76:	930a      	str	r3, [sp, #40]	; 0x28
 8004f78:	eb0b 0301 	add.w	r3, fp, r1
 8004f7c:	9a04      	ldr	r2, [sp, #16]
 8004f7e:	459b      	cmp	fp, r3
 8004f80:	448a      	add	sl, r1
 8004f82:	4492      	add	sl, r2
 8004f84:	465a      	mov	r2, fp
 8004f86:	bfa8      	it	ge
 8004f88:	461a      	movge	r2, r3
 8004f8a:	4552      	cmp	r2, sl
 8004f8c:	bfa8      	it	ge
 8004f8e:	4652      	movge	r2, sl
 8004f90:	2a00      	cmp	r2, #0
 8004f92:	bfc2      	ittt	gt
 8004f94:	1a9b      	subgt	r3, r3, r2
 8004f96:	ebaa 0a02 	subgt.w	sl, sl, r2
 8004f9a:	ebab 0b02 	subgt.w	fp, fp, r2
 8004f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fa0:	2a00      	cmp	r2, #0
 8004fa2:	dd18      	ble.n	8004fd6 <_strtod_l+0x736>
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004faa:	f002 f951 	bl	8007250 <__pow5mult>
 8004fae:	4606      	mov	r6, r0
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f43f aeb1 	beq.w	8004d18 <_strtod_l+0x478>
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f002 f89e 	bl	80070fc <__multiply>
 8004fc0:	900e      	str	r0, [sp, #56]	; 0x38
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	f43f aea8 	beq.w	8004d18 <_strtod_l+0x478>
 8004fc8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f001 ff7e 	bl	8006ecc <_Bfree>
 8004fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fd4:	9212      	str	r2, [sp, #72]	; 0x48
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f300 8093 	bgt.w	8005102 <_strtod_l+0x862>
 8004fdc:	9b07      	ldr	r3, [sp, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	dd08      	ble.n	8004ff4 <_strtod_l+0x754>
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f002 f932 	bl	8007250 <__pow5mult>
 8004fec:	4607      	mov	r7, r0
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f43f ae92 	beq.w	8004d18 <_strtod_l+0x478>
 8004ff4:	f1ba 0f00 	cmp.w	sl, #0
 8004ff8:	dd08      	ble.n	800500c <_strtod_l+0x76c>
 8004ffa:	4639      	mov	r1, r7
 8004ffc:	4652      	mov	r2, sl
 8004ffe:	4620      	mov	r0, r4
 8005000:	f002 f980 	bl	8007304 <__lshift>
 8005004:	4607      	mov	r7, r0
 8005006:	2800      	cmp	r0, #0
 8005008:	f43f ae86 	beq.w	8004d18 <_strtod_l+0x478>
 800500c:	f1bb 0f00 	cmp.w	fp, #0
 8005010:	dd08      	ble.n	8005024 <_strtod_l+0x784>
 8005012:	4631      	mov	r1, r6
 8005014:	465a      	mov	r2, fp
 8005016:	4620      	mov	r0, r4
 8005018:	f002 f974 	bl	8007304 <__lshift>
 800501c:	4606      	mov	r6, r0
 800501e:	2800      	cmp	r0, #0
 8005020:	f43f ae7a 	beq.w	8004d18 <_strtod_l+0x478>
 8005024:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005026:	463a      	mov	r2, r7
 8005028:	4620      	mov	r0, r4
 800502a:	f002 f9f7 	bl	800741c <__mdiff>
 800502e:	4605      	mov	r5, r0
 8005030:	2800      	cmp	r0, #0
 8005032:	f43f ae71 	beq.w	8004d18 <_strtod_l+0x478>
 8005036:	2300      	movs	r3, #0
 8005038:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800503c:	60c3      	str	r3, [r0, #12]
 800503e:	4631      	mov	r1, r6
 8005040:	f002 f9d0 	bl	80073e4 <__mcmp>
 8005044:	2800      	cmp	r0, #0
 8005046:	da7d      	bge.n	8005144 <_strtod_l+0x8a4>
 8005048:	ea5a 0308 	orrs.w	r3, sl, r8
 800504c:	f040 80a3 	bne.w	8005196 <_strtod_l+0x8f6>
 8005050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005054:	2b00      	cmp	r3, #0
 8005056:	f040 809e 	bne.w	8005196 <_strtod_l+0x8f6>
 800505a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800505e:	0d1b      	lsrs	r3, r3, #20
 8005060:	051b      	lsls	r3, r3, #20
 8005062:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005066:	f240 8096 	bls.w	8005196 <_strtod_l+0x8f6>
 800506a:	696b      	ldr	r3, [r5, #20]
 800506c:	b91b      	cbnz	r3, 8005076 <_strtod_l+0x7d6>
 800506e:	692b      	ldr	r3, [r5, #16]
 8005070:	2b01      	cmp	r3, #1
 8005072:	f340 8090 	ble.w	8005196 <_strtod_l+0x8f6>
 8005076:	4629      	mov	r1, r5
 8005078:	2201      	movs	r2, #1
 800507a:	4620      	mov	r0, r4
 800507c:	f002 f942 	bl	8007304 <__lshift>
 8005080:	4631      	mov	r1, r6
 8005082:	4605      	mov	r5, r0
 8005084:	f002 f9ae 	bl	80073e4 <__mcmp>
 8005088:	2800      	cmp	r0, #0
 800508a:	f340 8084 	ble.w	8005196 <_strtod_l+0x8f6>
 800508e:	9904      	ldr	r1, [sp, #16]
 8005090:	4a2b      	ldr	r2, [pc, #172]	; (8005140 <_strtod_l+0x8a0>)
 8005092:	464b      	mov	r3, r9
 8005094:	2900      	cmp	r1, #0
 8005096:	f000 809d 	beq.w	80051d4 <_strtod_l+0x934>
 800509a:	ea02 0109 	and.w	r1, r2, r9
 800509e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80050a2:	f300 8097 	bgt.w	80051d4 <_strtod_l+0x934>
 80050a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80050aa:	f77f aea5 	ble.w	8004df8 <_strtod_l+0x558>
 80050ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8005130 <_strtod_l+0x890>
 80050b2:	ec49 8b16 	vmov	d6, r8, r9
 80050b6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80050ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 80050be:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	bf08      	it	eq
 80050c6:	2322      	moveq	r3, #34	; 0x22
 80050c8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80050cc:	bf08      	it	eq
 80050ce:	6023      	streq	r3, [r4, #0]
 80050d0:	e62c      	b.n	8004d2c <_strtod_l+0x48c>
 80050d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050d6:	fa01 f202 	lsl.w	r2, r1, r2
 80050da:	ea02 0808 	and.w	r8, r2, r8
 80050de:	e6d9      	b.n	8004e94 <_strtod_l+0x5f4>
 80050e0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80050e4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80050e8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80050ec:	33e2      	adds	r3, #226	; 0xe2
 80050ee:	fa00 f303 	lsl.w	r3, r0, r3
 80050f2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80050f6:	e73f      	b.n	8004f78 <_strtod_l+0x6d8>
 80050f8:	2200      	movs	r2, #0
 80050fa:	2301      	movs	r3, #1
 80050fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005100:	e73a      	b.n	8004f78 <_strtod_l+0x6d8>
 8005102:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005104:	461a      	mov	r2, r3
 8005106:	4620      	mov	r0, r4
 8005108:	f002 f8fc 	bl	8007304 <__lshift>
 800510c:	9012      	str	r0, [sp, #72]	; 0x48
 800510e:	2800      	cmp	r0, #0
 8005110:	f47f af64 	bne.w	8004fdc <_strtod_l+0x73c>
 8005114:	e600      	b.n	8004d18 <_strtod_l+0x478>
 8005116:	bf00      	nop
 8005118:	94a03595 	.word	0x94a03595
 800511c:	3fcfffff 	.word	0x3fcfffff
 8005120:	94a03595 	.word	0x94a03595
 8005124:	3fdfffff 	.word	0x3fdfffff
 8005128:	35afe535 	.word	0x35afe535
 800512c:	3fe00000 	.word	0x3fe00000
 8005130:	00000000 	.word	0x00000000
 8005134:	39500000 	.word	0x39500000
 8005138:	080080c8 	.word	0x080080c8
 800513c:	fffffc02 	.word	0xfffffc02
 8005140:	7ff00000 	.word	0x7ff00000
 8005144:	46cb      	mov	fp, r9
 8005146:	d15f      	bne.n	8005208 <_strtod_l+0x968>
 8005148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800514c:	f1ba 0f00 	cmp.w	sl, #0
 8005150:	d02a      	beq.n	80051a8 <_strtod_l+0x908>
 8005152:	4aa7      	ldr	r2, [pc, #668]	; (80053f0 <_strtod_l+0xb50>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d12b      	bne.n	80051b0 <_strtod_l+0x910>
 8005158:	9b04      	ldr	r3, [sp, #16]
 800515a:	4642      	mov	r2, r8
 800515c:	b1fb      	cbz	r3, 800519e <_strtod_l+0x8fe>
 800515e:	4ba5      	ldr	r3, [pc, #660]	; (80053f4 <_strtod_l+0xb54>)
 8005160:	ea09 0303 	and.w	r3, r9, r3
 8005164:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800516c:	d81a      	bhi.n	80051a4 <_strtod_l+0x904>
 800516e:	0d1b      	lsrs	r3, r3, #20
 8005170:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005174:	fa01 f303 	lsl.w	r3, r1, r3
 8005178:	429a      	cmp	r2, r3
 800517a:	d119      	bne.n	80051b0 <_strtod_l+0x910>
 800517c:	4b9e      	ldr	r3, [pc, #632]	; (80053f8 <_strtod_l+0xb58>)
 800517e:	459b      	cmp	fp, r3
 8005180:	d102      	bne.n	8005188 <_strtod_l+0x8e8>
 8005182:	3201      	adds	r2, #1
 8005184:	f43f adc8 	beq.w	8004d18 <_strtod_l+0x478>
 8005188:	4b9a      	ldr	r3, [pc, #616]	; (80053f4 <_strtod_l+0xb54>)
 800518a:	ea0b 0303 	and.w	r3, fp, r3
 800518e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8005192:	f04f 0800 	mov.w	r8, #0
 8005196:	9b04      	ldr	r3, [sp, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d188      	bne.n	80050ae <_strtod_l+0x80e>
 800519c:	e5c6      	b.n	8004d2c <_strtod_l+0x48c>
 800519e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051a2:	e7e9      	b.n	8005178 <_strtod_l+0x8d8>
 80051a4:	460b      	mov	r3, r1
 80051a6:	e7e7      	b.n	8005178 <_strtod_l+0x8d8>
 80051a8:	ea53 0308 	orrs.w	r3, r3, r8
 80051ac:	f43f af6f 	beq.w	800508e <_strtod_l+0x7ee>
 80051b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b2:	b1cb      	cbz	r3, 80051e8 <_strtod_l+0x948>
 80051b4:	ea13 0f0b 	tst.w	r3, fp
 80051b8:	d0ed      	beq.n	8005196 <_strtod_l+0x8f6>
 80051ba:	9a04      	ldr	r2, [sp, #16]
 80051bc:	4640      	mov	r0, r8
 80051be:	4649      	mov	r1, r9
 80051c0:	f1ba 0f00 	cmp.w	sl, #0
 80051c4:	d014      	beq.n	80051f0 <_strtod_l+0x950>
 80051c6:	f7ff fb51 	bl	800486c <sulp>
 80051ca:	ee38 7b00 	vadd.f64	d7, d8, d0
 80051ce:	ec59 8b17 	vmov	r8, r9, d7
 80051d2:	e7e0      	b.n	8005196 <_strtod_l+0x8f6>
 80051d4:	4013      	ands	r3, r2
 80051d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80051da:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80051de:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80051e2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80051e6:	e7d6      	b.n	8005196 <_strtod_l+0x8f6>
 80051e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ea:	ea13 0f08 	tst.w	r3, r8
 80051ee:	e7e3      	b.n	80051b8 <_strtod_l+0x918>
 80051f0:	f7ff fb3c 	bl	800486c <sulp>
 80051f4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80051f8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	ec59 8b10 	vmov	r8, r9, d0
 8005204:	d1c7      	bne.n	8005196 <_strtod_l+0x8f6>
 8005206:	e5f7      	b.n	8004df8 <_strtod_l+0x558>
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	f002 fa68 	bl	80076e0 <__ratio>
 8005210:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8005214:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521c:	d865      	bhi.n	80052ea <_strtod_l+0xa4a>
 800521e:	f1ba 0f00 	cmp.w	sl, #0
 8005222:	d042      	beq.n	80052aa <_strtod_l+0xa0a>
 8005224:	4b75      	ldr	r3, [pc, #468]	; (80053fc <_strtod_l+0xb5c>)
 8005226:	2200      	movs	r2, #0
 8005228:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800522c:	4871      	ldr	r0, [pc, #452]	; (80053f4 <_strtod_l+0xb54>)
 800522e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8005408 <_strtod_l+0xb68>
 8005232:	ea0b 0100 	and.w	r1, fp, r0
 8005236:	4561      	cmp	r1, ip
 8005238:	f040 808e 	bne.w	8005358 <_strtod_l+0xab8>
 800523c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8005240:	ec49 8b10 	vmov	d0, r8, r9
 8005244:	ec43 2b1c 	vmov	d12, r2, r3
 8005248:	910a      	str	r1, [sp, #40]	; 0x28
 800524a:	f002 f971 	bl	8007530 <__ulp>
 800524e:	ec49 8b1e 	vmov	d14, r8, r9
 8005252:	4868      	ldr	r0, [pc, #416]	; (80053f4 <_strtod_l+0xb54>)
 8005254:	eeac eb00 	vfma.f64	d14, d12, d0
 8005258:	ee1e 3a90 	vmov	r3, s29
 800525c:	4a68      	ldr	r2, [pc, #416]	; (8005400 <_strtod_l+0xb60>)
 800525e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005260:	4018      	ands	r0, r3
 8005262:	4290      	cmp	r0, r2
 8005264:	ec59 8b1e 	vmov	r8, r9, d14
 8005268:	d94e      	bls.n	8005308 <_strtod_l+0xa68>
 800526a:	ee18 3a90 	vmov	r3, s17
 800526e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005272:	4293      	cmp	r3, r2
 8005274:	d104      	bne.n	8005280 <_strtod_l+0x9e0>
 8005276:	ee18 3a10 	vmov	r3, s16
 800527a:	3301      	adds	r3, #1
 800527c:	f43f ad4c 	beq.w	8004d18 <_strtod_l+0x478>
 8005280:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80053f8 <_strtod_l+0xb58>
 8005284:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005288:	9912      	ldr	r1, [sp, #72]	; 0x48
 800528a:	4620      	mov	r0, r4
 800528c:	f001 fe1e 	bl	8006ecc <_Bfree>
 8005290:	4639      	mov	r1, r7
 8005292:	4620      	mov	r0, r4
 8005294:	f001 fe1a 	bl	8006ecc <_Bfree>
 8005298:	4631      	mov	r1, r6
 800529a:	4620      	mov	r0, r4
 800529c:	f001 fe16 	bl	8006ecc <_Bfree>
 80052a0:	4629      	mov	r1, r5
 80052a2:	4620      	mov	r0, r4
 80052a4:	f001 fe12 	bl	8006ecc <_Bfree>
 80052a8:	e619      	b.n	8004ede <_strtod_l+0x63e>
 80052aa:	f1b8 0f00 	cmp.w	r8, #0
 80052ae:	d112      	bne.n	80052d6 <_strtod_l+0xa36>
 80052b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052b4:	b9b3      	cbnz	r3, 80052e4 <_strtod_l+0xa44>
 80052b6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80052ba:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80052be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80052c6:	bf58      	it	pl
 80052c8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80052cc:	eeb1 7b4d 	vneg.f64	d7, d13
 80052d0:	ec53 2b17 	vmov	r2, r3, d7
 80052d4:	e7aa      	b.n	800522c <_strtod_l+0x98c>
 80052d6:	f1b8 0f01 	cmp.w	r8, #1
 80052da:	d103      	bne.n	80052e4 <_strtod_l+0xa44>
 80052dc:	f1b9 0f00 	cmp.w	r9, #0
 80052e0:	f43f ad8a 	beq.w	8004df8 <_strtod_l+0x558>
 80052e4:	4b47      	ldr	r3, [pc, #284]	; (8005404 <_strtod_l+0xb64>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	e79e      	b.n	8005228 <_strtod_l+0x988>
 80052ea:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80052ee:	ee20 db0d 	vmul.f64	d13, d0, d13
 80052f2:	f1ba 0f00 	cmp.w	sl, #0
 80052f6:	d104      	bne.n	8005302 <_strtod_l+0xa62>
 80052f8:	eeb1 7b4d 	vneg.f64	d7, d13
 80052fc:	ec53 2b17 	vmov	r2, r3, d7
 8005300:	e794      	b.n	800522c <_strtod_l+0x98c>
 8005302:	eeb0 7b4d 	vmov.f64	d7, d13
 8005306:	e7f9      	b.n	80052fc <_strtod_l+0xa5c>
 8005308:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800530c:	9b04      	ldr	r3, [sp, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1ba      	bne.n	8005288 <_strtod_l+0x9e8>
 8005312:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005316:	0d1b      	lsrs	r3, r3, #20
 8005318:	051b      	lsls	r3, r3, #20
 800531a:	4299      	cmp	r1, r3
 800531c:	d1b4      	bne.n	8005288 <_strtod_l+0x9e8>
 800531e:	ec51 0b1d 	vmov	r0, r1, d13
 8005322:	f7fb f9b9 	bl	8000698 <__aeabi_d2lz>
 8005326:	f7fb f971 	bl	800060c <__aeabi_l2d>
 800532a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800532e:	ec41 0b17 	vmov	d7, r0, r1
 8005332:	ea43 0308 	orr.w	r3, r3, r8
 8005336:	ea53 030a 	orrs.w	r3, r3, sl
 800533a:	ee3d db47 	vsub.f64	d13, d13, d7
 800533e:	d03c      	beq.n	80053ba <_strtod_l+0xb1a>
 8005340:	eeb4 dbca 	vcmpe.f64	d13, d10
 8005344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005348:	f53f acf0 	bmi.w	8004d2c <_strtod_l+0x48c>
 800534c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8005350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005354:	dd98      	ble.n	8005288 <_strtod_l+0x9e8>
 8005356:	e4e9      	b.n	8004d2c <_strtod_l+0x48c>
 8005358:	9804      	ldr	r0, [sp, #16]
 800535a:	b1f0      	cbz	r0, 800539a <_strtod_l+0xafa>
 800535c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8005360:	d81b      	bhi.n	800539a <_strtod_l+0xafa>
 8005362:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80053e8 <_strtod_l+0xb48>
 8005366:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536e:	d811      	bhi.n	8005394 <_strtod_l+0xaf4>
 8005370:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8005374:	ee1d 3a10 	vmov	r3, s26
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf38      	it	cc
 800537c:	2301      	movcc	r3, #1
 800537e:	ee0d 3a10 	vmov	s26, r3
 8005382:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8005386:	f1ba 0f00 	cmp.w	sl, #0
 800538a:	d113      	bne.n	80053b4 <_strtod_l+0xb14>
 800538c:	eeb1 7b4d 	vneg.f64	d7, d13
 8005390:	ec53 2b17 	vmov	r2, r3, d7
 8005394:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8005398:	1a43      	subs	r3, r0, r1
 800539a:	eeb0 0b48 	vmov.f64	d0, d8
 800539e:	ec43 2b1c 	vmov	d12, r2, r3
 80053a2:	910a      	str	r1, [sp, #40]	; 0x28
 80053a4:	f002 f8c4 	bl	8007530 <__ulp>
 80053a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053aa:	eeac 8b00 	vfma.f64	d8, d12, d0
 80053ae:	ec59 8b18 	vmov	r8, r9, d8
 80053b2:	e7ab      	b.n	800530c <_strtod_l+0xa6c>
 80053b4:	eeb0 7b4d 	vmov.f64	d7, d13
 80053b8:	e7ea      	b.n	8005390 <_strtod_l+0xaf0>
 80053ba:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80053be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c2:	f57f af61 	bpl.w	8005288 <_strtod_l+0x9e8>
 80053c6:	e4b1      	b.n	8004d2c <_strtod_l+0x48c>
 80053c8:	2300      	movs	r3, #0
 80053ca:	9308      	str	r3, [sp, #32]
 80053cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	f7ff baad 	b.w	8004930 <_strtod_l+0x90>
 80053d6:	2a65      	cmp	r2, #101	; 0x65
 80053d8:	f43f ab9f 	beq.w	8004b1a <_strtod_l+0x27a>
 80053dc:	2a45      	cmp	r2, #69	; 0x45
 80053de:	f43f ab9c 	beq.w	8004b1a <_strtod_l+0x27a>
 80053e2:	2101      	movs	r1, #1
 80053e4:	f7ff bbd4 	b.w	8004b90 <_strtod_l+0x2f0>
 80053e8:	ffc00000 	.word	0xffc00000
 80053ec:	41dfffff 	.word	0x41dfffff
 80053f0:	000fffff 	.word	0x000fffff
 80053f4:	7ff00000 	.word	0x7ff00000
 80053f8:	7fefffff 	.word	0x7fefffff
 80053fc:	3ff00000 	.word	0x3ff00000
 8005400:	7c9fffff 	.word	0x7c9fffff
 8005404:	bff00000 	.word	0xbff00000
 8005408:	7fe00000 	.word	0x7fe00000

0800540c <_strtod_r>:
 800540c:	4b01      	ldr	r3, [pc, #4]	; (8005414 <_strtod_r+0x8>)
 800540e:	f7ff ba47 	b.w	80048a0 <_strtod_l>
 8005412:	bf00      	nop
 8005414:	20000084 	.word	0x20000084

08005418 <_strtol_l.constprop.0>:
 8005418:	2b01      	cmp	r3, #1
 800541a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800541e:	d001      	beq.n	8005424 <_strtol_l.constprop.0+0xc>
 8005420:	2b24      	cmp	r3, #36	; 0x24
 8005422:	d906      	bls.n	8005432 <_strtol_l.constprop.0+0x1a>
 8005424:	f7fe fa14 	bl	8003850 <__errno>
 8005428:	2316      	movs	r3, #22
 800542a:	6003      	str	r3, [r0, #0]
 800542c:	2000      	movs	r0, #0
 800542e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005432:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005518 <_strtol_l.constprop.0+0x100>
 8005436:	460d      	mov	r5, r1
 8005438:	462e      	mov	r6, r5
 800543a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800543e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005442:	f017 0708 	ands.w	r7, r7, #8
 8005446:	d1f7      	bne.n	8005438 <_strtol_l.constprop.0+0x20>
 8005448:	2c2d      	cmp	r4, #45	; 0x2d
 800544a:	d132      	bne.n	80054b2 <_strtol_l.constprop.0+0x9a>
 800544c:	782c      	ldrb	r4, [r5, #0]
 800544e:	2701      	movs	r7, #1
 8005450:	1cb5      	adds	r5, r6, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d05b      	beq.n	800550e <_strtol_l.constprop.0+0xf6>
 8005456:	2b10      	cmp	r3, #16
 8005458:	d109      	bne.n	800546e <_strtol_l.constprop.0+0x56>
 800545a:	2c30      	cmp	r4, #48	; 0x30
 800545c:	d107      	bne.n	800546e <_strtol_l.constprop.0+0x56>
 800545e:	782c      	ldrb	r4, [r5, #0]
 8005460:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005464:	2c58      	cmp	r4, #88	; 0x58
 8005466:	d14d      	bne.n	8005504 <_strtol_l.constprop.0+0xec>
 8005468:	786c      	ldrb	r4, [r5, #1]
 800546a:	2310      	movs	r3, #16
 800546c:	3502      	adds	r5, #2
 800546e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005472:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005476:	f04f 0c00 	mov.w	ip, #0
 800547a:	fbb8 f9f3 	udiv	r9, r8, r3
 800547e:	4666      	mov	r6, ip
 8005480:	fb03 8a19 	mls	sl, r3, r9, r8
 8005484:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005488:	f1be 0f09 	cmp.w	lr, #9
 800548c:	d816      	bhi.n	80054bc <_strtol_l.constprop.0+0xa4>
 800548e:	4674      	mov	r4, lr
 8005490:	42a3      	cmp	r3, r4
 8005492:	dd24      	ble.n	80054de <_strtol_l.constprop.0+0xc6>
 8005494:	f1bc 0f00 	cmp.w	ip, #0
 8005498:	db1e      	blt.n	80054d8 <_strtol_l.constprop.0+0xc0>
 800549a:	45b1      	cmp	r9, r6
 800549c:	d31c      	bcc.n	80054d8 <_strtol_l.constprop.0+0xc0>
 800549e:	d101      	bne.n	80054a4 <_strtol_l.constprop.0+0x8c>
 80054a0:	45a2      	cmp	sl, r4
 80054a2:	db19      	blt.n	80054d8 <_strtol_l.constprop.0+0xc0>
 80054a4:	fb06 4603 	mla	r6, r6, r3, r4
 80054a8:	f04f 0c01 	mov.w	ip, #1
 80054ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054b0:	e7e8      	b.n	8005484 <_strtol_l.constprop.0+0x6c>
 80054b2:	2c2b      	cmp	r4, #43	; 0x2b
 80054b4:	bf04      	itt	eq
 80054b6:	782c      	ldrbeq	r4, [r5, #0]
 80054b8:	1cb5      	addeq	r5, r6, #2
 80054ba:	e7ca      	b.n	8005452 <_strtol_l.constprop.0+0x3a>
 80054bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80054c0:	f1be 0f19 	cmp.w	lr, #25
 80054c4:	d801      	bhi.n	80054ca <_strtol_l.constprop.0+0xb2>
 80054c6:	3c37      	subs	r4, #55	; 0x37
 80054c8:	e7e2      	b.n	8005490 <_strtol_l.constprop.0+0x78>
 80054ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80054ce:	f1be 0f19 	cmp.w	lr, #25
 80054d2:	d804      	bhi.n	80054de <_strtol_l.constprop.0+0xc6>
 80054d4:	3c57      	subs	r4, #87	; 0x57
 80054d6:	e7db      	b.n	8005490 <_strtol_l.constprop.0+0x78>
 80054d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80054dc:	e7e6      	b.n	80054ac <_strtol_l.constprop.0+0x94>
 80054de:	f1bc 0f00 	cmp.w	ip, #0
 80054e2:	da05      	bge.n	80054f0 <_strtol_l.constprop.0+0xd8>
 80054e4:	2322      	movs	r3, #34	; 0x22
 80054e6:	6003      	str	r3, [r0, #0]
 80054e8:	4646      	mov	r6, r8
 80054ea:	b942      	cbnz	r2, 80054fe <_strtol_l.constprop.0+0xe6>
 80054ec:	4630      	mov	r0, r6
 80054ee:	e79e      	b.n	800542e <_strtol_l.constprop.0+0x16>
 80054f0:	b107      	cbz	r7, 80054f4 <_strtol_l.constprop.0+0xdc>
 80054f2:	4276      	negs	r6, r6
 80054f4:	2a00      	cmp	r2, #0
 80054f6:	d0f9      	beq.n	80054ec <_strtol_l.constprop.0+0xd4>
 80054f8:	f1bc 0f00 	cmp.w	ip, #0
 80054fc:	d000      	beq.n	8005500 <_strtol_l.constprop.0+0xe8>
 80054fe:	1e69      	subs	r1, r5, #1
 8005500:	6011      	str	r1, [r2, #0]
 8005502:	e7f3      	b.n	80054ec <_strtol_l.constprop.0+0xd4>
 8005504:	2430      	movs	r4, #48	; 0x30
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1b1      	bne.n	800546e <_strtol_l.constprop.0+0x56>
 800550a:	2308      	movs	r3, #8
 800550c:	e7af      	b.n	800546e <_strtol_l.constprop.0+0x56>
 800550e:	2c30      	cmp	r4, #48	; 0x30
 8005510:	d0a5      	beq.n	800545e <_strtol_l.constprop.0+0x46>
 8005512:	230a      	movs	r3, #10
 8005514:	e7ab      	b.n	800546e <_strtol_l.constprop.0+0x56>
 8005516:	bf00      	nop
 8005518:	080080f1 	.word	0x080080f1

0800551c <_strtol_r>:
 800551c:	f7ff bf7c 	b.w	8005418 <_strtol_l.constprop.0>

08005520 <__swbuf_r>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	460e      	mov	r6, r1
 8005524:	4614      	mov	r4, r2
 8005526:	4605      	mov	r5, r0
 8005528:	b118      	cbz	r0, 8005532 <__swbuf_r+0x12>
 800552a:	6983      	ldr	r3, [r0, #24]
 800552c:	b90b      	cbnz	r3, 8005532 <__swbuf_r+0x12>
 800552e:	f000 ffd3 	bl	80064d8 <__sinit>
 8005532:	4b21      	ldr	r3, [pc, #132]	; (80055b8 <__swbuf_r+0x98>)
 8005534:	429c      	cmp	r4, r3
 8005536:	d12b      	bne.n	8005590 <__swbuf_r+0x70>
 8005538:	686c      	ldr	r4, [r5, #4]
 800553a:	69a3      	ldr	r3, [r4, #24]
 800553c:	60a3      	str	r3, [r4, #8]
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	071a      	lsls	r2, r3, #28
 8005542:	d52f      	bpl.n	80055a4 <__swbuf_r+0x84>
 8005544:	6923      	ldr	r3, [r4, #16]
 8005546:	b36b      	cbz	r3, 80055a4 <__swbuf_r+0x84>
 8005548:	6923      	ldr	r3, [r4, #16]
 800554a:	6820      	ldr	r0, [r4, #0]
 800554c:	1ac0      	subs	r0, r0, r3
 800554e:	6963      	ldr	r3, [r4, #20]
 8005550:	b2f6      	uxtb	r6, r6
 8005552:	4283      	cmp	r3, r0
 8005554:	4637      	mov	r7, r6
 8005556:	dc04      	bgt.n	8005562 <__swbuf_r+0x42>
 8005558:	4621      	mov	r1, r4
 800555a:	4628      	mov	r0, r5
 800555c:	f000 ff28 	bl	80063b0 <_fflush_r>
 8005560:	bb30      	cbnz	r0, 80055b0 <__swbuf_r+0x90>
 8005562:	68a3      	ldr	r3, [r4, #8]
 8005564:	3b01      	subs	r3, #1
 8005566:	60a3      	str	r3, [r4, #8]
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	6022      	str	r2, [r4, #0]
 800556e:	701e      	strb	r6, [r3, #0]
 8005570:	6963      	ldr	r3, [r4, #20]
 8005572:	3001      	adds	r0, #1
 8005574:	4283      	cmp	r3, r0
 8005576:	d004      	beq.n	8005582 <__swbuf_r+0x62>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	07db      	lsls	r3, r3, #31
 800557c:	d506      	bpl.n	800558c <__swbuf_r+0x6c>
 800557e:	2e0a      	cmp	r6, #10
 8005580:	d104      	bne.n	800558c <__swbuf_r+0x6c>
 8005582:	4621      	mov	r1, r4
 8005584:	4628      	mov	r0, r5
 8005586:	f000 ff13 	bl	80063b0 <_fflush_r>
 800558a:	b988      	cbnz	r0, 80055b0 <__swbuf_r+0x90>
 800558c:	4638      	mov	r0, r7
 800558e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <__swbuf_r+0x9c>)
 8005592:	429c      	cmp	r4, r3
 8005594:	d101      	bne.n	800559a <__swbuf_r+0x7a>
 8005596:	68ac      	ldr	r4, [r5, #8]
 8005598:	e7cf      	b.n	800553a <__swbuf_r+0x1a>
 800559a:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <__swbuf_r+0xa0>)
 800559c:	429c      	cmp	r4, r3
 800559e:	bf08      	it	eq
 80055a0:	68ec      	ldreq	r4, [r5, #12]
 80055a2:	e7ca      	b.n	800553a <__swbuf_r+0x1a>
 80055a4:	4621      	mov	r1, r4
 80055a6:	4628      	mov	r0, r5
 80055a8:	f000 f80c 	bl	80055c4 <__swsetup_r>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d0cb      	beq.n	8005548 <__swbuf_r+0x28>
 80055b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80055b4:	e7ea      	b.n	800558c <__swbuf_r+0x6c>
 80055b6:	bf00      	nop
 80055b8:	080082a4 	.word	0x080082a4
 80055bc:	080082c4 	.word	0x080082c4
 80055c0:	08008284 	.word	0x08008284

080055c4 <__swsetup_r>:
 80055c4:	4b32      	ldr	r3, [pc, #200]	; (8005690 <__swsetup_r+0xcc>)
 80055c6:	b570      	push	{r4, r5, r6, lr}
 80055c8:	681d      	ldr	r5, [r3, #0]
 80055ca:	4606      	mov	r6, r0
 80055cc:	460c      	mov	r4, r1
 80055ce:	b125      	cbz	r5, 80055da <__swsetup_r+0x16>
 80055d0:	69ab      	ldr	r3, [r5, #24]
 80055d2:	b913      	cbnz	r3, 80055da <__swsetup_r+0x16>
 80055d4:	4628      	mov	r0, r5
 80055d6:	f000 ff7f 	bl	80064d8 <__sinit>
 80055da:	4b2e      	ldr	r3, [pc, #184]	; (8005694 <__swsetup_r+0xd0>)
 80055dc:	429c      	cmp	r4, r3
 80055de:	d10f      	bne.n	8005600 <__swsetup_r+0x3c>
 80055e0:	686c      	ldr	r4, [r5, #4]
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055e8:	0719      	lsls	r1, r3, #28
 80055ea:	d42c      	bmi.n	8005646 <__swsetup_r+0x82>
 80055ec:	06dd      	lsls	r5, r3, #27
 80055ee:	d411      	bmi.n	8005614 <__swsetup_r+0x50>
 80055f0:	2309      	movs	r3, #9
 80055f2:	6033      	str	r3, [r6, #0]
 80055f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055fe:	e03e      	b.n	800567e <__swsetup_r+0xba>
 8005600:	4b25      	ldr	r3, [pc, #148]	; (8005698 <__swsetup_r+0xd4>)
 8005602:	429c      	cmp	r4, r3
 8005604:	d101      	bne.n	800560a <__swsetup_r+0x46>
 8005606:	68ac      	ldr	r4, [r5, #8]
 8005608:	e7eb      	b.n	80055e2 <__swsetup_r+0x1e>
 800560a:	4b24      	ldr	r3, [pc, #144]	; (800569c <__swsetup_r+0xd8>)
 800560c:	429c      	cmp	r4, r3
 800560e:	bf08      	it	eq
 8005610:	68ec      	ldreq	r4, [r5, #12]
 8005612:	e7e6      	b.n	80055e2 <__swsetup_r+0x1e>
 8005614:	0758      	lsls	r0, r3, #29
 8005616:	d512      	bpl.n	800563e <__swsetup_r+0x7a>
 8005618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800561a:	b141      	cbz	r1, 800562e <__swsetup_r+0x6a>
 800561c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005620:	4299      	cmp	r1, r3
 8005622:	d002      	beq.n	800562a <__swsetup_r+0x66>
 8005624:	4630      	mov	r0, r6
 8005626:	f002 f8e5 	bl	80077f4 <_free_r>
 800562a:	2300      	movs	r3, #0
 800562c:	6363      	str	r3, [r4, #52]	; 0x34
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	2300      	movs	r3, #0
 8005638:	6063      	str	r3, [r4, #4]
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	f043 0308 	orr.w	r3, r3, #8
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	b94b      	cbnz	r3, 800565e <__swsetup_r+0x9a>
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005654:	d003      	beq.n	800565e <__swsetup_r+0x9a>
 8005656:	4621      	mov	r1, r4
 8005658:	4630      	mov	r0, r6
 800565a:	f001 fb75 	bl	8006d48 <__smakebuf_r>
 800565e:	89a0      	ldrh	r0, [r4, #12]
 8005660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005664:	f010 0301 	ands.w	r3, r0, #1
 8005668:	d00a      	beq.n	8005680 <__swsetup_r+0xbc>
 800566a:	2300      	movs	r3, #0
 800566c:	60a3      	str	r3, [r4, #8]
 800566e:	6963      	ldr	r3, [r4, #20]
 8005670:	425b      	negs	r3, r3
 8005672:	61a3      	str	r3, [r4, #24]
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	b943      	cbnz	r3, 800568a <__swsetup_r+0xc6>
 8005678:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800567c:	d1ba      	bne.n	80055f4 <__swsetup_r+0x30>
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	0781      	lsls	r1, r0, #30
 8005682:	bf58      	it	pl
 8005684:	6963      	ldrpl	r3, [r4, #20]
 8005686:	60a3      	str	r3, [r4, #8]
 8005688:	e7f4      	b.n	8005674 <__swsetup_r+0xb0>
 800568a:	2000      	movs	r0, #0
 800568c:	e7f7      	b.n	800567e <__swsetup_r+0xba>
 800568e:	bf00      	nop
 8005690:	2000001c 	.word	0x2000001c
 8005694:	080082a4 	.word	0x080082a4
 8005698:	080082c4 	.word	0x080082c4
 800569c:	08008284 	.word	0x08008284

080056a0 <abort>:
 80056a0:	b508      	push	{r3, lr}
 80056a2:	2006      	movs	r0, #6
 80056a4:	f002 fb50 	bl	8007d48 <raise>
 80056a8:	2001      	movs	r0, #1
 80056aa:	f7fb fbe9 	bl	8000e80 <_exit>

080056ae <quorem>:
 80056ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b2:	6903      	ldr	r3, [r0, #16]
 80056b4:	690c      	ldr	r4, [r1, #16]
 80056b6:	42a3      	cmp	r3, r4
 80056b8:	4607      	mov	r7, r0
 80056ba:	f2c0 8081 	blt.w	80057c0 <quorem+0x112>
 80056be:	3c01      	subs	r4, #1
 80056c0:	f101 0814 	add.w	r8, r1, #20
 80056c4:	f100 0514 	add.w	r5, r0, #20
 80056c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056d6:	3301      	adds	r3, #1
 80056d8:	429a      	cmp	r2, r3
 80056da:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80056e6:	d331      	bcc.n	800574c <quorem+0x9e>
 80056e8:	f04f 0e00 	mov.w	lr, #0
 80056ec:	4640      	mov	r0, r8
 80056ee:	46ac      	mov	ip, r5
 80056f0:	46f2      	mov	sl, lr
 80056f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80056f6:	b293      	uxth	r3, r2
 80056f8:	fb06 e303 	mla	r3, r6, r3, lr
 80056fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005700:	b29b      	uxth	r3, r3
 8005702:	ebaa 0303 	sub.w	r3, sl, r3
 8005706:	f8dc a000 	ldr.w	sl, [ip]
 800570a:	0c12      	lsrs	r2, r2, #16
 800570c:	fa13 f38a 	uxtah	r3, r3, sl
 8005710:	fb06 e202 	mla	r2, r6, r2, lr
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	9b00      	ldr	r3, [sp, #0]
 8005718:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800571c:	b292      	uxth	r2, r2
 800571e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005722:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005726:	f8bd 3000 	ldrh.w	r3, [sp]
 800572a:	4581      	cmp	r9, r0
 800572c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005730:	f84c 3b04 	str.w	r3, [ip], #4
 8005734:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005738:	d2db      	bcs.n	80056f2 <quorem+0x44>
 800573a:	f855 300b 	ldr.w	r3, [r5, fp]
 800573e:	b92b      	cbnz	r3, 800574c <quorem+0x9e>
 8005740:	9b01      	ldr	r3, [sp, #4]
 8005742:	3b04      	subs	r3, #4
 8005744:	429d      	cmp	r5, r3
 8005746:	461a      	mov	r2, r3
 8005748:	d32e      	bcc.n	80057a8 <quorem+0xfa>
 800574a:	613c      	str	r4, [r7, #16]
 800574c:	4638      	mov	r0, r7
 800574e:	f001 fe49 	bl	80073e4 <__mcmp>
 8005752:	2800      	cmp	r0, #0
 8005754:	db24      	blt.n	80057a0 <quorem+0xf2>
 8005756:	3601      	adds	r6, #1
 8005758:	4628      	mov	r0, r5
 800575a:	f04f 0c00 	mov.w	ip, #0
 800575e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005762:	f8d0 e000 	ldr.w	lr, [r0]
 8005766:	b293      	uxth	r3, r2
 8005768:	ebac 0303 	sub.w	r3, ip, r3
 800576c:	0c12      	lsrs	r2, r2, #16
 800576e:	fa13 f38e 	uxtah	r3, r3, lr
 8005772:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005776:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800577a:	b29b      	uxth	r3, r3
 800577c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005780:	45c1      	cmp	r9, r8
 8005782:	f840 3b04 	str.w	r3, [r0], #4
 8005786:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800578a:	d2e8      	bcs.n	800575e <quorem+0xb0>
 800578c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005790:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005794:	b922      	cbnz	r2, 80057a0 <quorem+0xf2>
 8005796:	3b04      	subs	r3, #4
 8005798:	429d      	cmp	r5, r3
 800579a:	461a      	mov	r2, r3
 800579c:	d30a      	bcc.n	80057b4 <quorem+0x106>
 800579e:	613c      	str	r4, [r7, #16]
 80057a0:	4630      	mov	r0, r6
 80057a2:	b003      	add	sp, #12
 80057a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	3b04      	subs	r3, #4
 80057ac:	2a00      	cmp	r2, #0
 80057ae:	d1cc      	bne.n	800574a <quorem+0x9c>
 80057b0:	3c01      	subs	r4, #1
 80057b2:	e7c7      	b.n	8005744 <quorem+0x96>
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	3b04      	subs	r3, #4
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	d1f0      	bne.n	800579e <quorem+0xf0>
 80057bc:	3c01      	subs	r4, #1
 80057be:	e7eb      	b.n	8005798 <quorem+0xea>
 80057c0:	2000      	movs	r0, #0
 80057c2:	e7ee      	b.n	80057a2 <quorem+0xf4>
 80057c4:	0000      	movs	r0, r0
	...

080057c8 <_dtoa_r>:
 80057c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057cc:	ed2d 8b02 	vpush	{d8}
 80057d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80057d2:	b091      	sub	sp, #68	; 0x44
 80057d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80057d8:	ec59 8b10 	vmov	r8, r9, d0
 80057dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80057de:	9106      	str	r1, [sp, #24]
 80057e0:	4606      	mov	r6, r0
 80057e2:	9208      	str	r2, [sp, #32]
 80057e4:	930c      	str	r3, [sp, #48]	; 0x30
 80057e6:	b975      	cbnz	r5, 8005806 <_dtoa_r+0x3e>
 80057e8:	2010      	movs	r0, #16
 80057ea:	f001 faed 	bl	8006dc8 <malloc>
 80057ee:	4602      	mov	r2, r0
 80057f0:	6270      	str	r0, [r6, #36]	; 0x24
 80057f2:	b920      	cbnz	r0, 80057fe <_dtoa_r+0x36>
 80057f4:	4baa      	ldr	r3, [pc, #680]	; (8005aa0 <_dtoa_r+0x2d8>)
 80057f6:	21ea      	movs	r1, #234	; 0xea
 80057f8:	48aa      	ldr	r0, [pc, #680]	; (8005aa4 <_dtoa_r+0x2dc>)
 80057fa:	f7fe f80b 	bl	8003814 <__assert_func>
 80057fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005802:	6005      	str	r5, [r0, #0]
 8005804:	60c5      	str	r5, [r0, #12]
 8005806:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005808:	6819      	ldr	r1, [r3, #0]
 800580a:	b151      	cbz	r1, 8005822 <_dtoa_r+0x5a>
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	604a      	str	r2, [r1, #4]
 8005810:	2301      	movs	r3, #1
 8005812:	4093      	lsls	r3, r2
 8005814:	608b      	str	r3, [r1, #8]
 8005816:	4630      	mov	r0, r6
 8005818:	f001 fb58 	bl	8006ecc <_Bfree>
 800581c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	f1b9 0300 	subs.w	r3, r9, #0
 8005826:	bfbb      	ittet	lt
 8005828:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800582c:	9303      	strlt	r3, [sp, #12]
 800582e:	2300      	movge	r3, #0
 8005830:	2201      	movlt	r2, #1
 8005832:	bfac      	ite	ge
 8005834:	6023      	strge	r3, [r4, #0]
 8005836:	6022      	strlt	r2, [r4, #0]
 8005838:	4b9b      	ldr	r3, [pc, #620]	; (8005aa8 <_dtoa_r+0x2e0>)
 800583a:	9c03      	ldr	r4, [sp, #12]
 800583c:	43a3      	bics	r3, r4
 800583e:	d11c      	bne.n	800587a <_dtoa_r+0xb2>
 8005840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005842:	f242 730f 	movw	r3, #9999	; 0x270f
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800584c:	ea53 0308 	orrs.w	r3, r3, r8
 8005850:	f000 84fd 	beq.w	800624e <_dtoa_r+0xa86>
 8005854:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005856:	b963      	cbnz	r3, 8005872 <_dtoa_r+0xaa>
 8005858:	4b94      	ldr	r3, [pc, #592]	; (8005aac <_dtoa_r+0x2e4>)
 800585a:	e01f      	b.n	800589c <_dtoa_r+0xd4>
 800585c:	4b94      	ldr	r3, [pc, #592]	; (8005ab0 <_dtoa_r+0x2e8>)
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	3308      	adds	r3, #8
 8005862:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	9801      	ldr	r0, [sp, #4]
 8005868:	b011      	add	sp, #68	; 0x44
 800586a:	ecbd 8b02 	vpop	{d8}
 800586e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005872:	4b8e      	ldr	r3, [pc, #568]	; (8005aac <_dtoa_r+0x2e4>)
 8005874:	9301      	str	r3, [sp, #4]
 8005876:	3303      	adds	r3, #3
 8005878:	e7f3      	b.n	8005862 <_dtoa_r+0x9a>
 800587a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800587e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005886:	d10b      	bne.n	80058a0 <_dtoa_r+0xd8>
 8005888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800588a:	2301      	movs	r3, #1
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 84d9 	beq.w	8006248 <_dtoa_r+0xa80>
 8005896:	4887      	ldr	r0, [pc, #540]	; (8005ab4 <_dtoa_r+0x2ec>)
 8005898:	6018      	str	r0, [r3, #0]
 800589a:	1e43      	subs	r3, r0, #1
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	e7e2      	b.n	8005866 <_dtoa_r+0x9e>
 80058a0:	a90f      	add	r1, sp, #60	; 0x3c
 80058a2:	aa0e      	add	r2, sp, #56	; 0x38
 80058a4:	4630      	mov	r0, r6
 80058a6:	eeb0 0b48 	vmov.f64	d0, d8
 80058aa:	f001 febd 	bl	8007628 <__d2b>
 80058ae:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80058b2:	4605      	mov	r5, r0
 80058b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80058b6:	2900      	cmp	r1, #0
 80058b8:	d046      	beq.n	8005948 <_dtoa_r+0x180>
 80058ba:	ee18 4a90 	vmov	r4, s17
 80058be:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80058c2:	ec53 2b18 	vmov	r2, r3, d8
 80058c6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80058ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80058ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80058d2:	2400      	movs	r4, #0
 80058d4:	ec43 2b16 	vmov	d6, r2, r3
 80058d8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80058dc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8005a88 <_dtoa_r+0x2c0>
 80058e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80058e4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8005a90 <_dtoa_r+0x2c8>
 80058e8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80058ec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8005a98 <_dtoa_r+0x2d0>
 80058f0:	ee07 1a90 	vmov	s15, r1
 80058f4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80058f8:	eeb0 7b46 	vmov.f64	d7, d6
 80058fc:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005900:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005904:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800590c:	ee16 ba90 	vmov	fp, s13
 8005910:	940a      	str	r4, [sp, #40]	; 0x28
 8005912:	d508      	bpl.n	8005926 <_dtoa_r+0x15e>
 8005914:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005918:	eeb4 6b47 	vcmp.f64	d6, d7
 800591c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005920:	bf18      	it	ne
 8005922:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8005926:	f1bb 0f16 	cmp.w	fp, #22
 800592a:	d82f      	bhi.n	800598c <_dtoa_r+0x1c4>
 800592c:	4b62      	ldr	r3, [pc, #392]	; (8005ab8 <_dtoa_r+0x2f0>)
 800592e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005932:	ed93 7b00 	vldr	d7, [r3]
 8005936:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800593a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593e:	d501      	bpl.n	8005944 <_dtoa_r+0x17c>
 8005940:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005944:	2300      	movs	r3, #0
 8005946:	e022      	b.n	800598e <_dtoa_r+0x1c6>
 8005948:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800594a:	4401      	add	r1, r0
 800594c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8005950:	2b20      	cmp	r3, #32
 8005952:	bfc1      	itttt	gt
 8005954:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005958:	fa04 f303 	lslgt.w	r3, r4, r3
 800595c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8005960:	fa28 f804 	lsrgt.w	r8, r8, r4
 8005964:	bfd6      	itet	le
 8005966:	f1c3 0320 	rsble	r3, r3, #32
 800596a:	ea43 0808 	orrgt.w	r8, r3, r8
 800596e:	fa08 f803 	lslle.w	r8, r8, r3
 8005972:	ee07 8a90 	vmov	s15, r8
 8005976:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800597a:	3901      	subs	r1, #1
 800597c:	ee17 4a90 	vmov	r4, s15
 8005980:	ec53 2b17 	vmov	r2, r3, d7
 8005984:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8005988:	2401      	movs	r4, #1
 800598a:	e7a3      	b.n	80058d4 <_dtoa_r+0x10c>
 800598c:	2301      	movs	r3, #1
 800598e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005990:	1a43      	subs	r3, r0, r1
 8005992:	1e5a      	subs	r2, r3, #1
 8005994:	bf45      	ittet	mi
 8005996:	f1c3 0301 	rsbmi	r3, r3, #1
 800599a:	9304      	strmi	r3, [sp, #16]
 800599c:	2300      	movpl	r3, #0
 800599e:	2300      	movmi	r3, #0
 80059a0:	9205      	str	r2, [sp, #20]
 80059a2:	bf54      	ite	pl
 80059a4:	9304      	strpl	r3, [sp, #16]
 80059a6:	9305      	strmi	r3, [sp, #20]
 80059a8:	f1bb 0f00 	cmp.w	fp, #0
 80059ac:	db18      	blt.n	80059e0 <_dtoa_r+0x218>
 80059ae:	9b05      	ldr	r3, [sp, #20]
 80059b0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80059b4:	445b      	add	r3, fp
 80059b6:	9305      	str	r3, [sp, #20]
 80059b8:	2300      	movs	r3, #0
 80059ba:	9a06      	ldr	r2, [sp, #24]
 80059bc:	2a09      	cmp	r2, #9
 80059be:	d849      	bhi.n	8005a54 <_dtoa_r+0x28c>
 80059c0:	2a05      	cmp	r2, #5
 80059c2:	bfc4      	itt	gt
 80059c4:	3a04      	subgt	r2, #4
 80059c6:	9206      	strgt	r2, [sp, #24]
 80059c8:	9a06      	ldr	r2, [sp, #24]
 80059ca:	f1a2 0202 	sub.w	r2, r2, #2
 80059ce:	bfcc      	ite	gt
 80059d0:	2400      	movgt	r4, #0
 80059d2:	2401      	movle	r4, #1
 80059d4:	2a03      	cmp	r2, #3
 80059d6:	d848      	bhi.n	8005a6a <_dtoa_r+0x2a2>
 80059d8:	e8df f002 	tbb	[pc, r2]
 80059dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80059e0:	9b04      	ldr	r3, [sp, #16]
 80059e2:	2200      	movs	r2, #0
 80059e4:	eba3 030b 	sub.w	r3, r3, fp
 80059e8:	9304      	str	r3, [sp, #16]
 80059ea:	9209      	str	r2, [sp, #36]	; 0x24
 80059ec:	f1cb 0300 	rsb	r3, fp, #0
 80059f0:	e7e3      	b.n	80059ba <_dtoa_r+0x1f2>
 80059f2:	2200      	movs	r2, #0
 80059f4:	9207      	str	r2, [sp, #28]
 80059f6:	9a08      	ldr	r2, [sp, #32]
 80059f8:	2a00      	cmp	r2, #0
 80059fa:	dc39      	bgt.n	8005a70 <_dtoa_r+0x2a8>
 80059fc:	f04f 0a01 	mov.w	sl, #1
 8005a00:	46d1      	mov	r9, sl
 8005a02:	4652      	mov	r2, sl
 8005a04:	f8cd a020 	str.w	sl, [sp, #32]
 8005a08:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	6079      	str	r1, [r7, #4]
 8005a0e:	2004      	movs	r0, #4
 8005a10:	f100 0c14 	add.w	ip, r0, #20
 8005a14:	4594      	cmp	ip, r2
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	d92f      	bls.n	8005a7a <_dtoa_r+0x2b2>
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	930d      	str	r3, [sp, #52]	; 0x34
 8005a1e:	f001 fa15 	bl	8006e4c <_Balloc>
 8005a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a24:	9001      	str	r0, [sp, #4]
 8005a26:	4602      	mov	r2, r0
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d149      	bne.n	8005ac0 <_dtoa_r+0x2f8>
 8005a2c:	4b23      	ldr	r3, [pc, #140]	; (8005abc <_dtoa_r+0x2f4>)
 8005a2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005a32:	e6e1      	b.n	80057f8 <_dtoa_r+0x30>
 8005a34:	2201      	movs	r2, #1
 8005a36:	e7dd      	b.n	80059f4 <_dtoa_r+0x22c>
 8005a38:	2200      	movs	r2, #0
 8005a3a:	9207      	str	r2, [sp, #28]
 8005a3c:	9a08      	ldr	r2, [sp, #32]
 8005a3e:	eb0b 0a02 	add.w	sl, fp, r2
 8005a42:	f10a 0901 	add.w	r9, sl, #1
 8005a46:	464a      	mov	r2, r9
 8005a48:	2a01      	cmp	r2, #1
 8005a4a:	bfb8      	it	lt
 8005a4c:	2201      	movlt	r2, #1
 8005a4e:	e7db      	b.n	8005a08 <_dtoa_r+0x240>
 8005a50:	2201      	movs	r2, #1
 8005a52:	e7f2      	b.n	8005a3a <_dtoa_r+0x272>
 8005a54:	2401      	movs	r4, #1
 8005a56:	2200      	movs	r2, #0
 8005a58:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005a5c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005a60:	2100      	movs	r1, #0
 8005a62:	46d1      	mov	r9, sl
 8005a64:	2212      	movs	r2, #18
 8005a66:	9108      	str	r1, [sp, #32]
 8005a68:	e7ce      	b.n	8005a08 <_dtoa_r+0x240>
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	9207      	str	r2, [sp, #28]
 8005a6e:	e7f5      	b.n	8005a5c <_dtoa_r+0x294>
 8005a70:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005a74:	46d1      	mov	r9, sl
 8005a76:	4652      	mov	r2, sl
 8005a78:	e7c6      	b.n	8005a08 <_dtoa_r+0x240>
 8005a7a:	3101      	adds	r1, #1
 8005a7c:	6079      	str	r1, [r7, #4]
 8005a7e:	0040      	lsls	r0, r0, #1
 8005a80:	e7c6      	b.n	8005a10 <_dtoa_r+0x248>
 8005a82:	bf00      	nop
 8005a84:	f3af 8000 	nop.w
 8005a88:	636f4361 	.word	0x636f4361
 8005a8c:	3fd287a7 	.word	0x3fd287a7
 8005a90:	8b60c8b3 	.word	0x8b60c8b3
 8005a94:	3fc68a28 	.word	0x3fc68a28
 8005a98:	509f79fb 	.word	0x509f79fb
 8005a9c:	3fd34413 	.word	0x3fd34413
 8005aa0:	080081fe 	.word	0x080081fe
 8005aa4:	08008215 	.word	0x08008215
 8005aa8:	7ff00000 	.word	0x7ff00000
 8005aac:	080081fa 	.word	0x080081fa
 8005ab0:	080081f1 	.word	0x080081f1
 8005ab4:	08008072 	.word	0x08008072
 8005ab8:	080083e8 	.word	0x080083e8
 8005abc:	08008270 	.word	0x08008270
 8005ac0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8005ac2:	9901      	ldr	r1, [sp, #4]
 8005ac4:	6011      	str	r1, [r2, #0]
 8005ac6:	f1b9 0f0e 	cmp.w	r9, #14
 8005aca:	d86c      	bhi.n	8005ba6 <_dtoa_r+0x3de>
 8005acc:	2c00      	cmp	r4, #0
 8005ace:	d06a      	beq.n	8005ba6 <_dtoa_r+0x3de>
 8005ad0:	f1bb 0f00 	cmp.w	fp, #0
 8005ad4:	f340 80a0 	ble.w	8005c18 <_dtoa_r+0x450>
 8005ad8:	49c1      	ldr	r1, [pc, #772]	; (8005de0 <_dtoa_r+0x618>)
 8005ada:	f00b 020f 	and.w	r2, fp, #15
 8005ade:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8005ae2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005ae6:	ed92 7b00 	vldr	d7, [r2]
 8005aea:	ea4f 112b 	mov.w	r1, fp, asr #4
 8005aee:	f000 8087 	beq.w	8005c00 <_dtoa_r+0x438>
 8005af2:	4abc      	ldr	r2, [pc, #752]	; (8005de4 <_dtoa_r+0x61c>)
 8005af4:	ed92 6b08 	vldr	d6, [r2, #32]
 8005af8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005afc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005b00:	f001 010f 	and.w	r1, r1, #15
 8005b04:	2203      	movs	r2, #3
 8005b06:	48b7      	ldr	r0, [pc, #732]	; (8005de4 <_dtoa_r+0x61c>)
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	d17b      	bne.n	8005c04 <_dtoa_r+0x43c>
 8005b0c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005b10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005b14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b1a:	2900      	cmp	r1, #0
 8005b1c:	f000 80a2 	beq.w	8005c64 <_dtoa_r+0x49c>
 8005b20:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005b24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b30:	f140 8098 	bpl.w	8005c64 <_dtoa_r+0x49c>
 8005b34:	f1b9 0f00 	cmp.w	r9, #0
 8005b38:	f000 8094 	beq.w	8005c64 <_dtoa_r+0x49c>
 8005b3c:	f1ba 0f00 	cmp.w	sl, #0
 8005b40:	dd2f      	ble.n	8005ba2 <_dtoa_r+0x3da>
 8005b42:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005b46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005b4a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b4e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005b52:	3201      	adds	r2, #1
 8005b54:	4650      	mov	r0, sl
 8005b56:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005b5a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8005b5e:	ee07 2a90 	vmov	s15, r2
 8005b62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005b66:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005b6a:	ee15 4a90 	vmov	r4, s11
 8005b6e:	ec52 1b15 	vmov	r1, r2, d5
 8005b72:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d177      	bne.n	8005c6a <_dtoa_r+0x4a2>
 8005b7a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005b7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005b82:	ec42 1b17 	vmov	d7, r1, r2
 8005b86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8e:	f300 8263 	bgt.w	8006058 <_dtoa_r+0x890>
 8005b92:	eeb1 7b47 	vneg.f64	d7, d7
 8005b96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9e:	f100 8258 	bmi.w	8006052 <_dtoa_r+0x88a>
 8005ba2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005ba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ba8:	2a00      	cmp	r2, #0
 8005baa:	f2c0 811d 	blt.w	8005de8 <_dtoa_r+0x620>
 8005bae:	f1bb 0f0e 	cmp.w	fp, #14
 8005bb2:	f300 8119 	bgt.w	8005de8 <_dtoa_r+0x620>
 8005bb6:	4b8a      	ldr	r3, [pc, #552]	; (8005de0 <_dtoa_r+0x618>)
 8005bb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005bbc:	ed93 6b00 	vldr	d6, [r3]
 8005bc0:	9b08      	ldr	r3, [sp, #32]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f280 80b7 	bge.w	8005d36 <_dtoa_r+0x56e>
 8005bc8:	f1b9 0f00 	cmp.w	r9, #0
 8005bcc:	f300 80b3 	bgt.w	8005d36 <_dtoa_r+0x56e>
 8005bd0:	f040 823f 	bne.w	8006052 <_dtoa_r+0x88a>
 8005bd4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005bd8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005bdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005be0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be8:	464c      	mov	r4, r9
 8005bea:	464f      	mov	r7, r9
 8005bec:	f280 8215 	bge.w	800601a <_dtoa_r+0x852>
 8005bf0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005bf4:	2331      	movs	r3, #49	; 0x31
 8005bf6:	f808 3b01 	strb.w	r3, [r8], #1
 8005bfa:	f10b 0b01 	add.w	fp, fp, #1
 8005bfe:	e211      	b.n	8006024 <_dtoa_r+0x85c>
 8005c00:	2202      	movs	r2, #2
 8005c02:	e780      	b.n	8005b06 <_dtoa_r+0x33e>
 8005c04:	07cc      	lsls	r4, r1, #31
 8005c06:	d504      	bpl.n	8005c12 <_dtoa_r+0x44a>
 8005c08:	ed90 6b00 	vldr	d6, [r0]
 8005c0c:	3201      	adds	r2, #1
 8005c0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c12:	1049      	asrs	r1, r1, #1
 8005c14:	3008      	adds	r0, #8
 8005c16:	e777      	b.n	8005b08 <_dtoa_r+0x340>
 8005c18:	d022      	beq.n	8005c60 <_dtoa_r+0x498>
 8005c1a:	f1cb 0100 	rsb	r1, fp, #0
 8005c1e:	4a70      	ldr	r2, [pc, #448]	; (8005de0 <_dtoa_r+0x618>)
 8005c20:	f001 000f 	and.w	r0, r1, #15
 8005c24:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005c28:	ed92 7b00 	vldr	d7, [r2]
 8005c2c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005c30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c34:	486b      	ldr	r0, [pc, #428]	; (8005de4 <_dtoa_r+0x61c>)
 8005c36:	1109      	asrs	r1, r1, #4
 8005c38:	2400      	movs	r4, #0
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	b929      	cbnz	r1, 8005c4a <_dtoa_r+0x482>
 8005c3e:	2c00      	cmp	r4, #0
 8005c40:	f43f af6a 	beq.w	8005b18 <_dtoa_r+0x350>
 8005c44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c48:	e766      	b.n	8005b18 <_dtoa_r+0x350>
 8005c4a:	07cf      	lsls	r7, r1, #31
 8005c4c:	d505      	bpl.n	8005c5a <_dtoa_r+0x492>
 8005c4e:	ed90 6b00 	vldr	d6, [r0]
 8005c52:	3201      	adds	r2, #1
 8005c54:	2401      	movs	r4, #1
 8005c56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005c5a:	1049      	asrs	r1, r1, #1
 8005c5c:	3008      	adds	r0, #8
 8005c5e:	e7ed      	b.n	8005c3c <_dtoa_r+0x474>
 8005c60:	2202      	movs	r2, #2
 8005c62:	e759      	b.n	8005b18 <_dtoa_r+0x350>
 8005c64:	465f      	mov	r7, fp
 8005c66:	4648      	mov	r0, r9
 8005c68:	e775      	b.n	8005b56 <_dtoa_r+0x38e>
 8005c6a:	ec42 1b17 	vmov	d7, r1, r2
 8005c6e:	4a5c      	ldr	r2, [pc, #368]	; (8005de0 <_dtoa_r+0x618>)
 8005c70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005c74:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005c78:	9a01      	ldr	r2, [sp, #4]
 8005c7a:	1814      	adds	r4, r2, r0
 8005c7c:	9a07      	ldr	r2, [sp, #28]
 8005c7e:	b352      	cbz	r2, 8005cd6 <_dtoa_r+0x50e>
 8005c80:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005c84:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005c88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c8c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005c90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005c94:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005c98:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005c9c:	ee14 2a90 	vmov	r2, s9
 8005ca0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005ca4:	3230      	adds	r2, #48	; 0x30
 8005ca6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005caa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb2:	f808 2b01 	strb.w	r2, [r8], #1
 8005cb6:	d439      	bmi.n	8005d2c <_dtoa_r+0x564>
 8005cb8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005cbc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc4:	d472      	bmi.n	8005dac <_dtoa_r+0x5e4>
 8005cc6:	45a0      	cmp	r8, r4
 8005cc8:	f43f af6b 	beq.w	8005ba2 <_dtoa_r+0x3da>
 8005ccc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005cd0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005cd4:	e7e0      	b.n	8005c98 <_dtoa_r+0x4d0>
 8005cd6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005cda:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005cde:	4621      	mov	r1, r4
 8005ce0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005ce4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005ce8:	ee14 2a90 	vmov	r2, s9
 8005cec:	3230      	adds	r2, #48	; 0x30
 8005cee:	f808 2b01 	strb.w	r2, [r8], #1
 8005cf2:	45a0      	cmp	r8, r4
 8005cf4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005cf8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005cfc:	d118      	bne.n	8005d30 <_dtoa_r+0x568>
 8005cfe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005d02:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005d06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0e:	dc4d      	bgt.n	8005dac <_dtoa_r+0x5e4>
 8005d10:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005d14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1c:	f57f af41 	bpl.w	8005ba2 <_dtoa_r+0x3da>
 8005d20:	4688      	mov	r8, r1
 8005d22:	3901      	subs	r1, #1
 8005d24:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005d28:	2b30      	cmp	r3, #48	; 0x30
 8005d2a:	d0f9      	beq.n	8005d20 <_dtoa_r+0x558>
 8005d2c:	46bb      	mov	fp, r7
 8005d2e:	e02a      	b.n	8005d86 <_dtoa_r+0x5be>
 8005d30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005d34:	e7d6      	b.n	8005ce4 <_dtoa_r+0x51c>
 8005d36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d3a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8005d3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005d42:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005d46:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005d4a:	ee15 3a10 	vmov	r3, s10
 8005d4e:	3330      	adds	r3, #48	; 0x30
 8005d50:	f808 3b01 	strb.w	r3, [r8], #1
 8005d54:	9b01      	ldr	r3, [sp, #4]
 8005d56:	eba8 0303 	sub.w	r3, r8, r3
 8005d5a:	4599      	cmp	r9, r3
 8005d5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005d60:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005d64:	d133      	bne.n	8005dce <_dtoa_r+0x606>
 8005d66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005d6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d72:	dc1a      	bgt.n	8005daa <_dtoa_r+0x5e2>
 8005d74:	eeb4 7b46 	vcmp.f64	d7, d6
 8005d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7c:	d103      	bne.n	8005d86 <_dtoa_r+0x5be>
 8005d7e:	ee15 3a10 	vmov	r3, s10
 8005d82:	07d9      	lsls	r1, r3, #31
 8005d84:	d411      	bmi.n	8005daa <_dtoa_r+0x5e2>
 8005d86:	4629      	mov	r1, r5
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f001 f89f 	bl	8006ecc <_Bfree>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d92:	f888 3000 	strb.w	r3, [r8]
 8005d96:	f10b 0301 	add.w	r3, fp, #1
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f43f ad61 	beq.w	8005866 <_dtoa_r+0x9e>
 8005da4:	f8c3 8000 	str.w	r8, [r3]
 8005da8:	e55d      	b.n	8005866 <_dtoa_r+0x9e>
 8005daa:	465f      	mov	r7, fp
 8005dac:	4643      	mov	r3, r8
 8005dae:	4698      	mov	r8, r3
 8005db0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005db4:	2a39      	cmp	r2, #57	; 0x39
 8005db6:	d106      	bne.n	8005dc6 <_dtoa_r+0x5fe>
 8005db8:	9a01      	ldr	r2, [sp, #4]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d1f7      	bne.n	8005dae <_dtoa_r+0x5e6>
 8005dbe:	9901      	ldr	r1, [sp, #4]
 8005dc0:	2230      	movs	r2, #48	; 0x30
 8005dc2:	3701      	adds	r7, #1
 8005dc4:	700a      	strb	r2, [r1, #0]
 8005dc6:	781a      	ldrb	r2, [r3, #0]
 8005dc8:	3201      	adds	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	e7ae      	b.n	8005d2c <_dtoa_r+0x564>
 8005dce:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005dd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dda:	d1b2      	bne.n	8005d42 <_dtoa_r+0x57a>
 8005ddc:	e7d3      	b.n	8005d86 <_dtoa_r+0x5be>
 8005dde:	bf00      	nop
 8005de0:	080083e8 	.word	0x080083e8
 8005de4:	080083c0 	.word	0x080083c0
 8005de8:	9907      	ldr	r1, [sp, #28]
 8005dea:	2900      	cmp	r1, #0
 8005dec:	f000 80d0 	beq.w	8005f90 <_dtoa_r+0x7c8>
 8005df0:	9906      	ldr	r1, [sp, #24]
 8005df2:	2901      	cmp	r1, #1
 8005df4:	f300 80b4 	bgt.w	8005f60 <_dtoa_r+0x798>
 8005df8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005dfa:	2900      	cmp	r1, #0
 8005dfc:	f000 80ac 	beq.w	8005f58 <_dtoa_r+0x790>
 8005e00:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005e04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005e08:	461c      	mov	r4, r3
 8005e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e0c:	9b04      	ldr	r3, [sp, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	9304      	str	r3, [sp, #16]
 8005e12:	9b05      	ldr	r3, [sp, #20]
 8005e14:	2101      	movs	r1, #1
 8005e16:	4413      	add	r3, r2
 8005e18:	4630      	mov	r0, r6
 8005e1a:	9305      	str	r3, [sp, #20]
 8005e1c:	f001 f958 	bl	80070d0 <__i2b>
 8005e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e22:	4607      	mov	r7, r0
 8005e24:	f1b8 0f00 	cmp.w	r8, #0
 8005e28:	dd0d      	ble.n	8005e46 <_dtoa_r+0x67e>
 8005e2a:	9a05      	ldr	r2, [sp, #20]
 8005e2c:	2a00      	cmp	r2, #0
 8005e2e:	dd0a      	ble.n	8005e46 <_dtoa_r+0x67e>
 8005e30:	4542      	cmp	r2, r8
 8005e32:	9904      	ldr	r1, [sp, #16]
 8005e34:	bfa8      	it	ge
 8005e36:	4642      	movge	r2, r8
 8005e38:	1a89      	subs	r1, r1, r2
 8005e3a:	9104      	str	r1, [sp, #16]
 8005e3c:	9905      	ldr	r1, [sp, #20]
 8005e3e:	eba8 0802 	sub.w	r8, r8, r2
 8005e42:	1a8a      	subs	r2, r1, r2
 8005e44:	9205      	str	r2, [sp, #20]
 8005e46:	b303      	cbz	r3, 8005e8a <_dtoa_r+0x6c2>
 8005e48:	9a07      	ldr	r2, [sp, #28]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	f000 80a5 	beq.w	8005f9a <_dtoa_r+0x7d2>
 8005e50:	2c00      	cmp	r4, #0
 8005e52:	dd13      	ble.n	8005e7c <_dtoa_r+0x6b4>
 8005e54:	4639      	mov	r1, r7
 8005e56:	4622      	mov	r2, r4
 8005e58:	4630      	mov	r0, r6
 8005e5a:	930d      	str	r3, [sp, #52]	; 0x34
 8005e5c:	f001 f9f8 	bl	8007250 <__pow5mult>
 8005e60:	462a      	mov	r2, r5
 8005e62:	4601      	mov	r1, r0
 8005e64:	4607      	mov	r7, r0
 8005e66:	4630      	mov	r0, r6
 8005e68:	f001 f948 	bl	80070fc <__multiply>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	900a      	str	r0, [sp, #40]	; 0x28
 8005e70:	4630      	mov	r0, r6
 8005e72:	f001 f82b 	bl	8006ecc <_Bfree>
 8005e76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e7a:	4615      	mov	r5, r2
 8005e7c:	1b1a      	subs	r2, r3, r4
 8005e7e:	d004      	beq.n	8005e8a <_dtoa_r+0x6c2>
 8005e80:	4629      	mov	r1, r5
 8005e82:	4630      	mov	r0, r6
 8005e84:	f001 f9e4 	bl	8007250 <__pow5mult>
 8005e88:	4605      	mov	r5, r0
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f001 f91f 	bl	80070d0 <__i2b>
 8005e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	4604      	mov	r4, r0
 8005e98:	f340 8081 	ble.w	8005f9e <_dtoa_r+0x7d6>
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f001 f9d5 	bl	8007250 <__pow5mult>
 8005ea6:	9b06      	ldr	r3, [sp, #24]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	4604      	mov	r4, r0
 8005eac:	dd7a      	ble.n	8005fa4 <_dtoa_r+0x7dc>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8005eb2:	6922      	ldr	r2, [r4, #16]
 8005eb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005eb8:	6910      	ldr	r0, [r2, #16]
 8005eba:	f001 f8b9 	bl	8007030 <__hi0bits>
 8005ebe:	f1c0 0020 	rsb	r0, r0, #32
 8005ec2:	9b05      	ldr	r3, [sp, #20]
 8005ec4:	4418      	add	r0, r3
 8005ec6:	f010 001f 	ands.w	r0, r0, #31
 8005eca:	f000 808c 	beq.w	8005fe6 <_dtoa_r+0x81e>
 8005ece:	f1c0 0220 	rsb	r2, r0, #32
 8005ed2:	2a04      	cmp	r2, #4
 8005ed4:	f340 8085 	ble.w	8005fe2 <_dtoa_r+0x81a>
 8005ed8:	f1c0 001c 	rsb	r0, r0, #28
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	4403      	add	r3, r0
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	9b05      	ldr	r3, [sp, #20]
 8005ee4:	4403      	add	r3, r0
 8005ee6:	4480      	add	r8, r0
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	9b04      	ldr	r3, [sp, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	dd05      	ble.n	8005efc <_dtoa_r+0x734>
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	f001 fa05 	bl	8007304 <__lshift>
 8005efa:	4605      	mov	r5, r0
 8005efc:	9b05      	ldr	r3, [sp, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dd05      	ble.n	8005f0e <_dtoa_r+0x746>
 8005f02:	4621      	mov	r1, r4
 8005f04:	461a      	mov	r2, r3
 8005f06:	4630      	mov	r0, r6
 8005f08:	f001 f9fc 	bl	8007304 <__lshift>
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d06a      	beq.n	8005fea <_dtoa_r+0x822>
 8005f14:	4621      	mov	r1, r4
 8005f16:	4628      	mov	r0, r5
 8005f18:	f001 fa64 	bl	80073e4 <__mcmp>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	da64      	bge.n	8005fea <_dtoa_r+0x822>
 8005f20:	2300      	movs	r3, #0
 8005f22:	4629      	mov	r1, r5
 8005f24:	220a      	movs	r2, #10
 8005f26:	4630      	mov	r0, r6
 8005f28:	f000 fff2 	bl	8006f10 <__multadd>
 8005f2c:	9b07      	ldr	r3, [sp, #28]
 8005f2e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005f32:	4605      	mov	r5, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8191 	beq.w	800625c <_dtoa_r+0xa94>
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	220a      	movs	r2, #10
 8005f40:	4630      	mov	r0, r6
 8005f42:	f000 ffe5 	bl	8006f10 <__multadd>
 8005f46:	f1ba 0f00 	cmp.w	sl, #0
 8005f4a:	4607      	mov	r7, r0
 8005f4c:	f300 808d 	bgt.w	800606a <_dtoa_r+0x8a2>
 8005f50:	9b06      	ldr	r3, [sp, #24]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	dc50      	bgt.n	8005ff8 <_dtoa_r+0x830>
 8005f56:	e088      	b.n	800606a <_dtoa_r+0x8a2>
 8005f58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f5e:	e751      	b.n	8005e04 <_dtoa_r+0x63c>
 8005f60:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	bfbf      	itttt	lt
 8005f68:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8005f6a:	1ae3      	sublt	r3, r4, r3
 8005f6c:	18d2      	addlt	r2, r2, r3
 8005f6e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8005f70:	bfb6      	itet	lt
 8005f72:	4623      	movlt	r3, r4
 8005f74:	1b1c      	subge	r4, r3, r4
 8005f76:	2400      	movlt	r4, #0
 8005f78:	f1b9 0f00 	cmp.w	r9, #0
 8005f7c:	bfb5      	itete	lt
 8005f7e:	9a04      	ldrlt	r2, [sp, #16]
 8005f80:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005f84:	eba2 0809 	sublt.w	r8, r2, r9
 8005f88:	464a      	movge	r2, r9
 8005f8a:	bfb8      	it	lt
 8005f8c:	2200      	movlt	r2, #0
 8005f8e:	e73c      	b.n	8005e0a <_dtoa_r+0x642>
 8005f90:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005f94:	9f07      	ldr	r7, [sp, #28]
 8005f96:	461c      	mov	r4, r3
 8005f98:	e744      	b.n	8005e24 <_dtoa_r+0x65c>
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	e770      	b.n	8005e80 <_dtoa_r+0x6b8>
 8005f9e:	9b06      	ldr	r3, [sp, #24]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	dc18      	bgt.n	8005fd6 <_dtoa_r+0x80e>
 8005fa4:	9b02      	ldr	r3, [sp, #8]
 8005fa6:	b9b3      	cbnz	r3, 8005fd6 <_dtoa_r+0x80e>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005fae:	b9a2      	cbnz	r2, 8005fda <_dtoa_r+0x812>
 8005fb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fb4:	0d12      	lsrs	r2, r2, #20
 8005fb6:	0512      	lsls	r2, r2, #20
 8005fb8:	b18a      	cbz	r2, 8005fde <_dtoa_r+0x816>
 8005fba:	9b04      	ldr	r3, [sp, #16]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	9304      	str	r3, [sp, #16]
 8005fc0:	9b05      	ldr	r3, [sp, #20]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	9305      	str	r3, [sp, #20]
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8005fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f47f af70 	bne.w	8005eb2 <_dtoa_r+0x6ea>
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	e775      	b.n	8005ec2 <_dtoa_r+0x6fa>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e7f6      	b.n	8005fc8 <_dtoa_r+0x800>
 8005fda:	9b02      	ldr	r3, [sp, #8]
 8005fdc:	e7f4      	b.n	8005fc8 <_dtoa_r+0x800>
 8005fde:	920a      	str	r2, [sp, #40]	; 0x28
 8005fe0:	e7f3      	b.n	8005fca <_dtoa_r+0x802>
 8005fe2:	d082      	beq.n	8005eea <_dtoa_r+0x722>
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	301c      	adds	r0, #28
 8005fe8:	e778      	b.n	8005edc <_dtoa_r+0x714>
 8005fea:	f1b9 0f00 	cmp.w	r9, #0
 8005fee:	dc37      	bgt.n	8006060 <_dtoa_r+0x898>
 8005ff0:	9b06      	ldr	r3, [sp, #24]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	dd34      	ble.n	8006060 <_dtoa_r+0x898>
 8005ff6:	46ca      	mov	sl, r9
 8005ff8:	f1ba 0f00 	cmp.w	sl, #0
 8005ffc:	d10d      	bne.n	800601a <_dtoa_r+0x852>
 8005ffe:	4621      	mov	r1, r4
 8006000:	4653      	mov	r3, sl
 8006002:	2205      	movs	r2, #5
 8006004:	4630      	mov	r0, r6
 8006006:	f000 ff83 	bl	8006f10 <__multadd>
 800600a:	4601      	mov	r1, r0
 800600c:	4604      	mov	r4, r0
 800600e:	4628      	mov	r0, r5
 8006010:	f001 f9e8 	bl	80073e4 <__mcmp>
 8006014:	2800      	cmp	r0, #0
 8006016:	f73f adeb 	bgt.w	8005bf0 <_dtoa_r+0x428>
 800601a:	9b08      	ldr	r3, [sp, #32]
 800601c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006020:	ea6f 0b03 	mvn.w	fp, r3
 8006024:	f04f 0900 	mov.w	r9, #0
 8006028:	4621      	mov	r1, r4
 800602a:	4630      	mov	r0, r6
 800602c:	f000 ff4e 	bl	8006ecc <_Bfree>
 8006030:	2f00      	cmp	r7, #0
 8006032:	f43f aea8 	beq.w	8005d86 <_dtoa_r+0x5be>
 8006036:	f1b9 0f00 	cmp.w	r9, #0
 800603a:	d005      	beq.n	8006048 <_dtoa_r+0x880>
 800603c:	45b9      	cmp	r9, r7
 800603e:	d003      	beq.n	8006048 <_dtoa_r+0x880>
 8006040:	4649      	mov	r1, r9
 8006042:	4630      	mov	r0, r6
 8006044:	f000 ff42 	bl	8006ecc <_Bfree>
 8006048:	4639      	mov	r1, r7
 800604a:	4630      	mov	r0, r6
 800604c:	f000 ff3e 	bl	8006ecc <_Bfree>
 8006050:	e699      	b.n	8005d86 <_dtoa_r+0x5be>
 8006052:	2400      	movs	r4, #0
 8006054:	4627      	mov	r7, r4
 8006056:	e7e0      	b.n	800601a <_dtoa_r+0x852>
 8006058:	46bb      	mov	fp, r7
 800605a:	4604      	mov	r4, r0
 800605c:	4607      	mov	r7, r0
 800605e:	e5c7      	b.n	8005bf0 <_dtoa_r+0x428>
 8006060:	9b07      	ldr	r3, [sp, #28]
 8006062:	46ca      	mov	sl, r9
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 8100 	beq.w	800626a <_dtoa_r+0xaa2>
 800606a:	f1b8 0f00 	cmp.w	r8, #0
 800606e:	dd05      	ble.n	800607c <_dtoa_r+0x8b4>
 8006070:	4639      	mov	r1, r7
 8006072:	4642      	mov	r2, r8
 8006074:	4630      	mov	r0, r6
 8006076:	f001 f945 	bl	8007304 <__lshift>
 800607a:	4607      	mov	r7, r0
 800607c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800607e:	2b00      	cmp	r3, #0
 8006080:	d05d      	beq.n	800613e <_dtoa_r+0x976>
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	4630      	mov	r0, r6
 8006086:	f000 fee1 	bl	8006e4c <_Balloc>
 800608a:	4680      	mov	r8, r0
 800608c:	b928      	cbnz	r0, 800609a <_dtoa_r+0x8d2>
 800608e:	4b82      	ldr	r3, [pc, #520]	; (8006298 <_dtoa_r+0xad0>)
 8006090:	4602      	mov	r2, r0
 8006092:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006096:	f7ff bbaf 	b.w	80057f8 <_dtoa_r+0x30>
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	3202      	adds	r2, #2
 800609e:	0092      	lsls	r2, r2, #2
 80060a0:	f107 010c 	add.w	r1, r7, #12
 80060a4:	300c      	adds	r0, #12
 80060a6:	f000 fea9 	bl	8006dfc <memcpy>
 80060aa:	2201      	movs	r2, #1
 80060ac:	4641      	mov	r1, r8
 80060ae:	4630      	mov	r0, r6
 80060b0:	f001 f928 	bl	8007304 <__lshift>
 80060b4:	9b01      	ldr	r3, [sp, #4]
 80060b6:	3301      	adds	r3, #1
 80060b8:	9304      	str	r3, [sp, #16]
 80060ba:	9b01      	ldr	r3, [sp, #4]
 80060bc:	4453      	add	r3, sl
 80060be:	9308      	str	r3, [sp, #32]
 80060c0:	9b02      	ldr	r3, [sp, #8]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	46b9      	mov	r9, r7
 80060c8:	9307      	str	r3, [sp, #28]
 80060ca:	4607      	mov	r7, r0
 80060cc:	9b04      	ldr	r3, [sp, #16]
 80060ce:	4621      	mov	r1, r4
 80060d0:	3b01      	subs	r3, #1
 80060d2:	4628      	mov	r0, r5
 80060d4:	9302      	str	r3, [sp, #8]
 80060d6:	f7ff faea 	bl	80056ae <quorem>
 80060da:	4603      	mov	r3, r0
 80060dc:	3330      	adds	r3, #48	; 0x30
 80060de:	9005      	str	r0, [sp, #20]
 80060e0:	4649      	mov	r1, r9
 80060e2:	4628      	mov	r0, r5
 80060e4:	9309      	str	r3, [sp, #36]	; 0x24
 80060e6:	f001 f97d 	bl	80073e4 <__mcmp>
 80060ea:	463a      	mov	r2, r7
 80060ec:	4682      	mov	sl, r0
 80060ee:	4621      	mov	r1, r4
 80060f0:	4630      	mov	r0, r6
 80060f2:	f001 f993 	bl	800741c <__mdiff>
 80060f6:	68c2      	ldr	r2, [r0, #12]
 80060f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060fa:	4680      	mov	r8, r0
 80060fc:	bb0a      	cbnz	r2, 8006142 <_dtoa_r+0x97a>
 80060fe:	4601      	mov	r1, r0
 8006100:	4628      	mov	r0, r5
 8006102:	f001 f96f 	bl	80073e4 <__mcmp>
 8006106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006108:	4602      	mov	r2, r0
 800610a:	4641      	mov	r1, r8
 800610c:	4630      	mov	r0, r6
 800610e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006112:	f000 fedb 	bl	8006ecc <_Bfree>
 8006116:	9b06      	ldr	r3, [sp, #24]
 8006118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800611a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800611e:	ea43 0102 	orr.w	r1, r3, r2
 8006122:	9b07      	ldr	r3, [sp, #28]
 8006124:	430b      	orrs	r3, r1
 8006126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006128:	d10d      	bne.n	8006146 <_dtoa_r+0x97e>
 800612a:	2b39      	cmp	r3, #57	; 0x39
 800612c:	d029      	beq.n	8006182 <_dtoa_r+0x9ba>
 800612e:	f1ba 0f00 	cmp.w	sl, #0
 8006132:	dd01      	ble.n	8006138 <_dtoa_r+0x970>
 8006134:	9b05      	ldr	r3, [sp, #20]
 8006136:	3331      	adds	r3, #49	; 0x31
 8006138:	9a02      	ldr	r2, [sp, #8]
 800613a:	7013      	strb	r3, [r2, #0]
 800613c:	e774      	b.n	8006028 <_dtoa_r+0x860>
 800613e:	4638      	mov	r0, r7
 8006140:	e7b8      	b.n	80060b4 <_dtoa_r+0x8ec>
 8006142:	2201      	movs	r2, #1
 8006144:	e7e1      	b.n	800610a <_dtoa_r+0x942>
 8006146:	f1ba 0f00 	cmp.w	sl, #0
 800614a:	db06      	blt.n	800615a <_dtoa_r+0x992>
 800614c:	9906      	ldr	r1, [sp, #24]
 800614e:	ea41 0a0a 	orr.w	sl, r1, sl
 8006152:	9907      	ldr	r1, [sp, #28]
 8006154:	ea5a 0101 	orrs.w	r1, sl, r1
 8006158:	d120      	bne.n	800619c <_dtoa_r+0x9d4>
 800615a:	2a00      	cmp	r2, #0
 800615c:	ddec      	ble.n	8006138 <_dtoa_r+0x970>
 800615e:	4629      	mov	r1, r5
 8006160:	2201      	movs	r2, #1
 8006162:	4630      	mov	r0, r6
 8006164:	9304      	str	r3, [sp, #16]
 8006166:	f001 f8cd 	bl	8007304 <__lshift>
 800616a:	4621      	mov	r1, r4
 800616c:	4605      	mov	r5, r0
 800616e:	f001 f939 	bl	80073e4 <__mcmp>
 8006172:	2800      	cmp	r0, #0
 8006174:	9b04      	ldr	r3, [sp, #16]
 8006176:	dc02      	bgt.n	800617e <_dtoa_r+0x9b6>
 8006178:	d1de      	bne.n	8006138 <_dtoa_r+0x970>
 800617a:	07da      	lsls	r2, r3, #31
 800617c:	d5dc      	bpl.n	8006138 <_dtoa_r+0x970>
 800617e:	2b39      	cmp	r3, #57	; 0x39
 8006180:	d1d8      	bne.n	8006134 <_dtoa_r+0x96c>
 8006182:	9a02      	ldr	r2, [sp, #8]
 8006184:	2339      	movs	r3, #57	; 0x39
 8006186:	7013      	strb	r3, [r2, #0]
 8006188:	4643      	mov	r3, r8
 800618a:	4698      	mov	r8, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006192:	2a39      	cmp	r2, #57	; 0x39
 8006194:	d051      	beq.n	800623a <_dtoa_r+0xa72>
 8006196:	3201      	adds	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	e745      	b.n	8006028 <_dtoa_r+0x860>
 800619c:	2a00      	cmp	r2, #0
 800619e:	dd03      	ble.n	80061a8 <_dtoa_r+0x9e0>
 80061a0:	2b39      	cmp	r3, #57	; 0x39
 80061a2:	d0ee      	beq.n	8006182 <_dtoa_r+0x9ba>
 80061a4:	3301      	adds	r3, #1
 80061a6:	e7c7      	b.n	8006138 <_dtoa_r+0x970>
 80061a8:	9a04      	ldr	r2, [sp, #16]
 80061aa:	9908      	ldr	r1, [sp, #32]
 80061ac:	f802 3c01 	strb.w	r3, [r2, #-1]
 80061b0:	428a      	cmp	r2, r1
 80061b2:	d02b      	beq.n	800620c <_dtoa_r+0xa44>
 80061b4:	4629      	mov	r1, r5
 80061b6:	2300      	movs	r3, #0
 80061b8:	220a      	movs	r2, #10
 80061ba:	4630      	mov	r0, r6
 80061bc:	f000 fea8 	bl	8006f10 <__multadd>
 80061c0:	45b9      	cmp	r9, r7
 80061c2:	4605      	mov	r5, r0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	f04f 020a 	mov.w	r2, #10
 80061cc:	4649      	mov	r1, r9
 80061ce:	4630      	mov	r0, r6
 80061d0:	d107      	bne.n	80061e2 <_dtoa_r+0xa1a>
 80061d2:	f000 fe9d 	bl	8006f10 <__multadd>
 80061d6:	4681      	mov	r9, r0
 80061d8:	4607      	mov	r7, r0
 80061da:	9b04      	ldr	r3, [sp, #16]
 80061dc:	3301      	adds	r3, #1
 80061de:	9304      	str	r3, [sp, #16]
 80061e0:	e774      	b.n	80060cc <_dtoa_r+0x904>
 80061e2:	f000 fe95 	bl	8006f10 <__multadd>
 80061e6:	4639      	mov	r1, r7
 80061e8:	4681      	mov	r9, r0
 80061ea:	2300      	movs	r3, #0
 80061ec:	220a      	movs	r2, #10
 80061ee:	4630      	mov	r0, r6
 80061f0:	f000 fe8e 	bl	8006f10 <__multadd>
 80061f4:	4607      	mov	r7, r0
 80061f6:	e7f0      	b.n	80061da <_dtoa_r+0xa12>
 80061f8:	f1ba 0f00 	cmp.w	sl, #0
 80061fc:	9a01      	ldr	r2, [sp, #4]
 80061fe:	bfcc      	ite	gt
 8006200:	46d0      	movgt	r8, sl
 8006202:	f04f 0801 	movle.w	r8, #1
 8006206:	4490      	add	r8, r2
 8006208:	f04f 0900 	mov.w	r9, #0
 800620c:	4629      	mov	r1, r5
 800620e:	2201      	movs	r2, #1
 8006210:	4630      	mov	r0, r6
 8006212:	9302      	str	r3, [sp, #8]
 8006214:	f001 f876 	bl	8007304 <__lshift>
 8006218:	4621      	mov	r1, r4
 800621a:	4605      	mov	r5, r0
 800621c:	f001 f8e2 	bl	80073e4 <__mcmp>
 8006220:	2800      	cmp	r0, #0
 8006222:	dcb1      	bgt.n	8006188 <_dtoa_r+0x9c0>
 8006224:	d102      	bne.n	800622c <_dtoa_r+0xa64>
 8006226:	9b02      	ldr	r3, [sp, #8]
 8006228:	07db      	lsls	r3, r3, #31
 800622a:	d4ad      	bmi.n	8006188 <_dtoa_r+0x9c0>
 800622c:	4643      	mov	r3, r8
 800622e:	4698      	mov	r8, r3
 8006230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006234:	2a30      	cmp	r2, #48	; 0x30
 8006236:	d0fa      	beq.n	800622e <_dtoa_r+0xa66>
 8006238:	e6f6      	b.n	8006028 <_dtoa_r+0x860>
 800623a:	9a01      	ldr	r2, [sp, #4]
 800623c:	429a      	cmp	r2, r3
 800623e:	d1a4      	bne.n	800618a <_dtoa_r+0x9c2>
 8006240:	f10b 0b01 	add.w	fp, fp, #1
 8006244:	2331      	movs	r3, #49	; 0x31
 8006246:	e778      	b.n	800613a <_dtoa_r+0x972>
 8006248:	4b14      	ldr	r3, [pc, #80]	; (800629c <_dtoa_r+0xad4>)
 800624a:	f7ff bb27 	b.w	800589c <_dtoa_r+0xd4>
 800624e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006250:	2b00      	cmp	r3, #0
 8006252:	f47f ab03 	bne.w	800585c <_dtoa_r+0x94>
 8006256:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <_dtoa_r+0xad8>)
 8006258:	f7ff bb20 	b.w	800589c <_dtoa_r+0xd4>
 800625c:	f1ba 0f00 	cmp.w	sl, #0
 8006260:	dc03      	bgt.n	800626a <_dtoa_r+0xaa2>
 8006262:	9b06      	ldr	r3, [sp, #24]
 8006264:	2b02      	cmp	r3, #2
 8006266:	f73f aec7 	bgt.w	8005ff8 <_dtoa_r+0x830>
 800626a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f7ff fa1c 	bl	80056ae <quorem>
 8006276:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800627a:	f808 3b01 	strb.w	r3, [r8], #1
 800627e:	9a01      	ldr	r2, [sp, #4]
 8006280:	eba8 0202 	sub.w	r2, r8, r2
 8006284:	4592      	cmp	sl, r2
 8006286:	ddb7      	ble.n	80061f8 <_dtoa_r+0xa30>
 8006288:	4629      	mov	r1, r5
 800628a:	2300      	movs	r3, #0
 800628c:	220a      	movs	r2, #10
 800628e:	4630      	mov	r0, r6
 8006290:	f000 fe3e 	bl	8006f10 <__multadd>
 8006294:	4605      	mov	r5, r0
 8006296:	e7ea      	b.n	800626e <_dtoa_r+0xaa6>
 8006298:	08008270 	.word	0x08008270
 800629c:	08008071 	.word	0x08008071
 80062a0:	080081f1 	.word	0x080081f1

080062a4 <__sflush_r>:
 80062a4:	898a      	ldrh	r2, [r1, #12]
 80062a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062aa:	4605      	mov	r5, r0
 80062ac:	0710      	lsls	r0, r2, #28
 80062ae:	460c      	mov	r4, r1
 80062b0:	d458      	bmi.n	8006364 <__sflush_r+0xc0>
 80062b2:	684b      	ldr	r3, [r1, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	dc05      	bgt.n	80062c4 <__sflush_r+0x20>
 80062b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	dc02      	bgt.n	80062c4 <__sflush_r+0x20>
 80062be:	2000      	movs	r0, #0
 80062c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062c6:	2e00      	cmp	r6, #0
 80062c8:	d0f9      	beq.n	80062be <__sflush_r+0x1a>
 80062ca:	2300      	movs	r3, #0
 80062cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062d0:	682f      	ldr	r7, [r5, #0]
 80062d2:	602b      	str	r3, [r5, #0]
 80062d4:	d032      	beq.n	800633c <__sflush_r+0x98>
 80062d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	075a      	lsls	r2, r3, #29
 80062dc:	d505      	bpl.n	80062ea <__sflush_r+0x46>
 80062de:	6863      	ldr	r3, [r4, #4]
 80062e0:	1ac0      	subs	r0, r0, r3
 80062e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062e4:	b10b      	cbz	r3, 80062ea <__sflush_r+0x46>
 80062e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062e8:	1ac0      	subs	r0, r0, r3
 80062ea:	2300      	movs	r3, #0
 80062ec:	4602      	mov	r2, r0
 80062ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062f0:	6a21      	ldr	r1, [r4, #32]
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b0      	blx	r6
 80062f6:	1c43      	adds	r3, r0, #1
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	d106      	bne.n	800630a <__sflush_r+0x66>
 80062fc:	6829      	ldr	r1, [r5, #0]
 80062fe:	291d      	cmp	r1, #29
 8006300:	d82c      	bhi.n	800635c <__sflush_r+0xb8>
 8006302:	4a2a      	ldr	r2, [pc, #168]	; (80063ac <__sflush_r+0x108>)
 8006304:	40ca      	lsrs	r2, r1
 8006306:	07d6      	lsls	r6, r2, #31
 8006308:	d528      	bpl.n	800635c <__sflush_r+0xb8>
 800630a:	2200      	movs	r2, #0
 800630c:	6062      	str	r2, [r4, #4]
 800630e:	04d9      	lsls	r1, r3, #19
 8006310:	6922      	ldr	r2, [r4, #16]
 8006312:	6022      	str	r2, [r4, #0]
 8006314:	d504      	bpl.n	8006320 <__sflush_r+0x7c>
 8006316:	1c42      	adds	r2, r0, #1
 8006318:	d101      	bne.n	800631e <__sflush_r+0x7a>
 800631a:	682b      	ldr	r3, [r5, #0]
 800631c:	b903      	cbnz	r3, 8006320 <__sflush_r+0x7c>
 800631e:	6560      	str	r0, [r4, #84]	; 0x54
 8006320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006322:	602f      	str	r7, [r5, #0]
 8006324:	2900      	cmp	r1, #0
 8006326:	d0ca      	beq.n	80062be <__sflush_r+0x1a>
 8006328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800632c:	4299      	cmp	r1, r3
 800632e:	d002      	beq.n	8006336 <__sflush_r+0x92>
 8006330:	4628      	mov	r0, r5
 8006332:	f001 fa5f 	bl	80077f4 <_free_r>
 8006336:	2000      	movs	r0, #0
 8006338:	6360      	str	r0, [r4, #52]	; 0x34
 800633a:	e7c1      	b.n	80062c0 <__sflush_r+0x1c>
 800633c:	6a21      	ldr	r1, [r4, #32]
 800633e:	2301      	movs	r3, #1
 8006340:	4628      	mov	r0, r5
 8006342:	47b0      	blx	r6
 8006344:	1c41      	adds	r1, r0, #1
 8006346:	d1c7      	bne.n	80062d8 <__sflush_r+0x34>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0c4      	beq.n	80062d8 <__sflush_r+0x34>
 800634e:	2b1d      	cmp	r3, #29
 8006350:	d001      	beq.n	8006356 <__sflush_r+0xb2>
 8006352:	2b16      	cmp	r3, #22
 8006354:	d101      	bne.n	800635a <__sflush_r+0xb6>
 8006356:	602f      	str	r7, [r5, #0]
 8006358:	e7b1      	b.n	80062be <__sflush_r+0x1a>
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006360:	81a3      	strh	r3, [r4, #12]
 8006362:	e7ad      	b.n	80062c0 <__sflush_r+0x1c>
 8006364:	690f      	ldr	r7, [r1, #16]
 8006366:	2f00      	cmp	r7, #0
 8006368:	d0a9      	beq.n	80062be <__sflush_r+0x1a>
 800636a:	0793      	lsls	r3, r2, #30
 800636c:	680e      	ldr	r6, [r1, #0]
 800636e:	bf08      	it	eq
 8006370:	694b      	ldreq	r3, [r1, #20]
 8006372:	600f      	str	r7, [r1, #0]
 8006374:	bf18      	it	ne
 8006376:	2300      	movne	r3, #0
 8006378:	eba6 0807 	sub.w	r8, r6, r7
 800637c:	608b      	str	r3, [r1, #8]
 800637e:	f1b8 0f00 	cmp.w	r8, #0
 8006382:	dd9c      	ble.n	80062be <__sflush_r+0x1a>
 8006384:	6a21      	ldr	r1, [r4, #32]
 8006386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006388:	4643      	mov	r3, r8
 800638a:	463a      	mov	r2, r7
 800638c:	4628      	mov	r0, r5
 800638e:	47b0      	blx	r6
 8006390:	2800      	cmp	r0, #0
 8006392:	dc06      	bgt.n	80063a2 <__sflush_r+0xfe>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800639a:	81a3      	strh	r3, [r4, #12]
 800639c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063a0:	e78e      	b.n	80062c0 <__sflush_r+0x1c>
 80063a2:	4407      	add	r7, r0
 80063a4:	eba8 0800 	sub.w	r8, r8, r0
 80063a8:	e7e9      	b.n	800637e <__sflush_r+0xda>
 80063aa:	bf00      	nop
 80063ac:	20400001 	.word	0x20400001

080063b0 <_fflush_r>:
 80063b0:	b538      	push	{r3, r4, r5, lr}
 80063b2:	690b      	ldr	r3, [r1, #16]
 80063b4:	4605      	mov	r5, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	b913      	cbnz	r3, 80063c0 <_fflush_r+0x10>
 80063ba:	2500      	movs	r5, #0
 80063bc:	4628      	mov	r0, r5
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	b118      	cbz	r0, 80063ca <_fflush_r+0x1a>
 80063c2:	6983      	ldr	r3, [r0, #24]
 80063c4:	b90b      	cbnz	r3, 80063ca <_fflush_r+0x1a>
 80063c6:	f000 f887 	bl	80064d8 <__sinit>
 80063ca:	4b14      	ldr	r3, [pc, #80]	; (800641c <_fflush_r+0x6c>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	d11b      	bne.n	8006408 <_fflush_r+0x58>
 80063d0:	686c      	ldr	r4, [r5, #4]
 80063d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0ef      	beq.n	80063ba <_fflush_r+0xa>
 80063da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063dc:	07d0      	lsls	r0, r2, #31
 80063de:	d404      	bmi.n	80063ea <_fflush_r+0x3a>
 80063e0:	0599      	lsls	r1, r3, #22
 80063e2:	d402      	bmi.n	80063ea <_fflush_r+0x3a>
 80063e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063e6:	f000 fc88 	bl	8006cfa <__retarget_lock_acquire_recursive>
 80063ea:	4628      	mov	r0, r5
 80063ec:	4621      	mov	r1, r4
 80063ee:	f7ff ff59 	bl	80062a4 <__sflush_r>
 80063f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063f4:	07da      	lsls	r2, r3, #31
 80063f6:	4605      	mov	r5, r0
 80063f8:	d4e0      	bmi.n	80063bc <_fflush_r+0xc>
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	059b      	lsls	r3, r3, #22
 80063fe:	d4dd      	bmi.n	80063bc <_fflush_r+0xc>
 8006400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006402:	f000 fc7b 	bl	8006cfc <__retarget_lock_release_recursive>
 8006406:	e7d9      	b.n	80063bc <_fflush_r+0xc>
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <_fflush_r+0x70>)
 800640a:	429c      	cmp	r4, r3
 800640c:	d101      	bne.n	8006412 <_fflush_r+0x62>
 800640e:	68ac      	ldr	r4, [r5, #8]
 8006410:	e7df      	b.n	80063d2 <_fflush_r+0x22>
 8006412:	4b04      	ldr	r3, [pc, #16]	; (8006424 <_fflush_r+0x74>)
 8006414:	429c      	cmp	r4, r3
 8006416:	bf08      	it	eq
 8006418:	68ec      	ldreq	r4, [r5, #12]
 800641a:	e7da      	b.n	80063d2 <_fflush_r+0x22>
 800641c:	080082a4 	.word	0x080082a4
 8006420:	080082c4 	.word	0x080082c4
 8006424:	08008284 	.word	0x08008284

08006428 <std>:
 8006428:	2300      	movs	r3, #0
 800642a:	b510      	push	{r4, lr}
 800642c:	4604      	mov	r4, r0
 800642e:	e9c0 3300 	strd	r3, r3, [r0]
 8006432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006436:	6083      	str	r3, [r0, #8]
 8006438:	8181      	strh	r1, [r0, #12]
 800643a:	6643      	str	r3, [r0, #100]	; 0x64
 800643c:	81c2      	strh	r2, [r0, #14]
 800643e:	6183      	str	r3, [r0, #24]
 8006440:	4619      	mov	r1, r3
 8006442:	2208      	movs	r2, #8
 8006444:	305c      	adds	r0, #92	; 0x5c
 8006446:	f7fd fa3f 	bl	80038c8 <memset>
 800644a:	4b05      	ldr	r3, [pc, #20]	; (8006460 <std+0x38>)
 800644c:	6263      	str	r3, [r4, #36]	; 0x24
 800644e:	4b05      	ldr	r3, [pc, #20]	; (8006464 <std+0x3c>)
 8006450:	62a3      	str	r3, [r4, #40]	; 0x28
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <std+0x40>)
 8006454:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006456:	4b05      	ldr	r3, [pc, #20]	; (800646c <std+0x44>)
 8006458:	6224      	str	r4, [r4, #32]
 800645a:	6323      	str	r3, [r4, #48]	; 0x30
 800645c:	bd10      	pop	{r4, pc}
 800645e:	bf00      	nop
 8006460:	08007d81 	.word	0x08007d81
 8006464:	08007da3 	.word	0x08007da3
 8006468:	08007ddb 	.word	0x08007ddb
 800646c:	08007dff 	.word	0x08007dff

08006470 <_cleanup_r>:
 8006470:	4901      	ldr	r1, [pc, #4]	; (8006478 <_cleanup_r+0x8>)
 8006472:	f000 b8af 	b.w	80065d4 <_fwalk_reent>
 8006476:	bf00      	nop
 8006478:	080063b1 	.word	0x080063b1

0800647c <__sfmoreglue>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	2268      	movs	r2, #104	; 0x68
 8006480:	1e4d      	subs	r5, r1, #1
 8006482:	4355      	muls	r5, r2
 8006484:	460e      	mov	r6, r1
 8006486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800648a:	f001 fa1f 	bl	80078cc <_malloc_r>
 800648e:	4604      	mov	r4, r0
 8006490:	b140      	cbz	r0, 80064a4 <__sfmoreglue+0x28>
 8006492:	2100      	movs	r1, #0
 8006494:	e9c0 1600 	strd	r1, r6, [r0]
 8006498:	300c      	adds	r0, #12
 800649a:	60a0      	str	r0, [r4, #8]
 800649c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064a0:	f7fd fa12 	bl	80038c8 <memset>
 80064a4:	4620      	mov	r0, r4
 80064a6:	bd70      	pop	{r4, r5, r6, pc}

080064a8 <__sfp_lock_acquire>:
 80064a8:	4801      	ldr	r0, [pc, #4]	; (80064b0 <__sfp_lock_acquire+0x8>)
 80064aa:	f000 bc26 	b.w	8006cfa <__retarget_lock_acquire_recursive>
 80064ae:	bf00      	nop
 80064b0:	200002ad 	.word	0x200002ad

080064b4 <__sfp_lock_release>:
 80064b4:	4801      	ldr	r0, [pc, #4]	; (80064bc <__sfp_lock_release+0x8>)
 80064b6:	f000 bc21 	b.w	8006cfc <__retarget_lock_release_recursive>
 80064ba:	bf00      	nop
 80064bc:	200002ad 	.word	0x200002ad

080064c0 <__sinit_lock_acquire>:
 80064c0:	4801      	ldr	r0, [pc, #4]	; (80064c8 <__sinit_lock_acquire+0x8>)
 80064c2:	f000 bc1a 	b.w	8006cfa <__retarget_lock_acquire_recursive>
 80064c6:	bf00      	nop
 80064c8:	200002ae 	.word	0x200002ae

080064cc <__sinit_lock_release>:
 80064cc:	4801      	ldr	r0, [pc, #4]	; (80064d4 <__sinit_lock_release+0x8>)
 80064ce:	f000 bc15 	b.w	8006cfc <__retarget_lock_release_recursive>
 80064d2:	bf00      	nop
 80064d4:	200002ae 	.word	0x200002ae

080064d8 <__sinit>:
 80064d8:	b510      	push	{r4, lr}
 80064da:	4604      	mov	r4, r0
 80064dc:	f7ff fff0 	bl	80064c0 <__sinit_lock_acquire>
 80064e0:	69a3      	ldr	r3, [r4, #24]
 80064e2:	b11b      	cbz	r3, 80064ec <__sinit+0x14>
 80064e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e8:	f7ff bff0 	b.w	80064cc <__sinit_lock_release>
 80064ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80064f0:	6523      	str	r3, [r4, #80]	; 0x50
 80064f2:	4b13      	ldr	r3, [pc, #76]	; (8006540 <__sinit+0x68>)
 80064f4:	4a13      	ldr	r2, [pc, #76]	; (8006544 <__sinit+0x6c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80064fa:	42a3      	cmp	r3, r4
 80064fc:	bf04      	itt	eq
 80064fe:	2301      	moveq	r3, #1
 8006500:	61a3      	streq	r3, [r4, #24]
 8006502:	4620      	mov	r0, r4
 8006504:	f000 f820 	bl	8006548 <__sfp>
 8006508:	6060      	str	r0, [r4, #4]
 800650a:	4620      	mov	r0, r4
 800650c:	f000 f81c 	bl	8006548 <__sfp>
 8006510:	60a0      	str	r0, [r4, #8]
 8006512:	4620      	mov	r0, r4
 8006514:	f000 f818 	bl	8006548 <__sfp>
 8006518:	2200      	movs	r2, #0
 800651a:	60e0      	str	r0, [r4, #12]
 800651c:	2104      	movs	r1, #4
 800651e:	6860      	ldr	r0, [r4, #4]
 8006520:	f7ff ff82 	bl	8006428 <std>
 8006524:	68a0      	ldr	r0, [r4, #8]
 8006526:	2201      	movs	r2, #1
 8006528:	2109      	movs	r1, #9
 800652a:	f7ff ff7d 	bl	8006428 <std>
 800652e:	68e0      	ldr	r0, [r4, #12]
 8006530:	2202      	movs	r2, #2
 8006532:	2112      	movs	r1, #18
 8006534:	f7ff ff78 	bl	8006428 <std>
 8006538:	2301      	movs	r3, #1
 800653a:	61a3      	str	r3, [r4, #24]
 800653c:	e7d2      	b.n	80064e4 <__sinit+0xc>
 800653e:	bf00      	nop
 8006540:	0800804c 	.word	0x0800804c
 8006544:	08006471 	.word	0x08006471

08006548 <__sfp>:
 8006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654a:	4607      	mov	r7, r0
 800654c:	f7ff ffac 	bl	80064a8 <__sfp_lock_acquire>
 8006550:	4b1e      	ldr	r3, [pc, #120]	; (80065cc <__sfp+0x84>)
 8006552:	681e      	ldr	r6, [r3, #0]
 8006554:	69b3      	ldr	r3, [r6, #24]
 8006556:	b913      	cbnz	r3, 800655e <__sfp+0x16>
 8006558:	4630      	mov	r0, r6
 800655a:	f7ff ffbd 	bl	80064d8 <__sinit>
 800655e:	3648      	adds	r6, #72	; 0x48
 8006560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006564:	3b01      	subs	r3, #1
 8006566:	d503      	bpl.n	8006570 <__sfp+0x28>
 8006568:	6833      	ldr	r3, [r6, #0]
 800656a:	b30b      	cbz	r3, 80065b0 <__sfp+0x68>
 800656c:	6836      	ldr	r6, [r6, #0]
 800656e:	e7f7      	b.n	8006560 <__sfp+0x18>
 8006570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006574:	b9d5      	cbnz	r5, 80065ac <__sfp+0x64>
 8006576:	4b16      	ldr	r3, [pc, #88]	; (80065d0 <__sfp+0x88>)
 8006578:	60e3      	str	r3, [r4, #12]
 800657a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800657e:	6665      	str	r5, [r4, #100]	; 0x64
 8006580:	f000 fbba 	bl	8006cf8 <__retarget_lock_init_recursive>
 8006584:	f7ff ff96 	bl	80064b4 <__sfp_lock_release>
 8006588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800658c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006590:	6025      	str	r5, [r4, #0]
 8006592:	61a5      	str	r5, [r4, #24]
 8006594:	2208      	movs	r2, #8
 8006596:	4629      	mov	r1, r5
 8006598:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800659c:	f7fd f994 	bl	80038c8 <memset>
 80065a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065a8:	4620      	mov	r0, r4
 80065aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ac:	3468      	adds	r4, #104	; 0x68
 80065ae:	e7d9      	b.n	8006564 <__sfp+0x1c>
 80065b0:	2104      	movs	r1, #4
 80065b2:	4638      	mov	r0, r7
 80065b4:	f7ff ff62 	bl	800647c <__sfmoreglue>
 80065b8:	4604      	mov	r4, r0
 80065ba:	6030      	str	r0, [r6, #0]
 80065bc:	2800      	cmp	r0, #0
 80065be:	d1d5      	bne.n	800656c <__sfp+0x24>
 80065c0:	f7ff ff78 	bl	80064b4 <__sfp_lock_release>
 80065c4:	230c      	movs	r3, #12
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	e7ee      	b.n	80065a8 <__sfp+0x60>
 80065ca:	bf00      	nop
 80065cc:	0800804c 	.word	0x0800804c
 80065d0:	ffff0001 	.word	0xffff0001

080065d4 <_fwalk_reent>:
 80065d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d8:	4606      	mov	r6, r0
 80065da:	4688      	mov	r8, r1
 80065dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065e0:	2700      	movs	r7, #0
 80065e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065e6:	f1b9 0901 	subs.w	r9, r9, #1
 80065ea:	d505      	bpl.n	80065f8 <_fwalk_reent+0x24>
 80065ec:	6824      	ldr	r4, [r4, #0]
 80065ee:	2c00      	cmp	r4, #0
 80065f0:	d1f7      	bne.n	80065e2 <_fwalk_reent+0xe>
 80065f2:	4638      	mov	r0, r7
 80065f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f8:	89ab      	ldrh	r3, [r5, #12]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d907      	bls.n	800660e <_fwalk_reent+0x3a>
 80065fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006602:	3301      	adds	r3, #1
 8006604:	d003      	beq.n	800660e <_fwalk_reent+0x3a>
 8006606:	4629      	mov	r1, r5
 8006608:	4630      	mov	r0, r6
 800660a:	47c0      	blx	r8
 800660c:	4307      	orrs	r7, r0
 800660e:	3568      	adds	r5, #104	; 0x68
 8006610:	e7e9      	b.n	80065e6 <_fwalk_reent+0x12>

08006612 <rshift>:
 8006612:	6903      	ldr	r3, [r0, #16]
 8006614:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800661c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006620:	f100 0414 	add.w	r4, r0, #20
 8006624:	dd45      	ble.n	80066b2 <rshift+0xa0>
 8006626:	f011 011f 	ands.w	r1, r1, #31
 800662a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800662e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006632:	d10c      	bne.n	800664e <rshift+0x3c>
 8006634:	f100 0710 	add.w	r7, r0, #16
 8006638:	4629      	mov	r1, r5
 800663a:	42b1      	cmp	r1, r6
 800663c:	d334      	bcc.n	80066a8 <rshift+0x96>
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	1eea      	subs	r2, r5, #3
 8006644:	4296      	cmp	r6, r2
 8006646:	bf38      	it	cc
 8006648:	2300      	movcc	r3, #0
 800664a:	4423      	add	r3, r4
 800664c:	e015      	b.n	800667a <rshift+0x68>
 800664e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006652:	f1c1 0820 	rsb	r8, r1, #32
 8006656:	40cf      	lsrs	r7, r1
 8006658:	f105 0e04 	add.w	lr, r5, #4
 800665c:	46a1      	mov	r9, r4
 800665e:	4576      	cmp	r6, lr
 8006660:	46f4      	mov	ip, lr
 8006662:	d815      	bhi.n	8006690 <rshift+0x7e>
 8006664:	1a9a      	subs	r2, r3, r2
 8006666:	0092      	lsls	r2, r2, #2
 8006668:	3a04      	subs	r2, #4
 800666a:	3501      	adds	r5, #1
 800666c:	42ae      	cmp	r6, r5
 800666e:	bf38      	it	cc
 8006670:	2200      	movcc	r2, #0
 8006672:	18a3      	adds	r3, r4, r2
 8006674:	50a7      	str	r7, [r4, r2]
 8006676:	b107      	cbz	r7, 800667a <rshift+0x68>
 8006678:	3304      	adds	r3, #4
 800667a:	1b1a      	subs	r2, r3, r4
 800667c:	42a3      	cmp	r3, r4
 800667e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006682:	bf08      	it	eq
 8006684:	2300      	moveq	r3, #0
 8006686:	6102      	str	r2, [r0, #16]
 8006688:	bf08      	it	eq
 800668a:	6143      	streq	r3, [r0, #20]
 800668c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006690:	f8dc c000 	ldr.w	ip, [ip]
 8006694:	fa0c fc08 	lsl.w	ip, ip, r8
 8006698:	ea4c 0707 	orr.w	r7, ip, r7
 800669c:	f849 7b04 	str.w	r7, [r9], #4
 80066a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80066a4:	40cf      	lsrs	r7, r1
 80066a6:	e7da      	b.n	800665e <rshift+0x4c>
 80066a8:	f851 cb04 	ldr.w	ip, [r1], #4
 80066ac:	f847 cf04 	str.w	ip, [r7, #4]!
 80066b0:	e7c3      	b.n	800663a <rshift+0x28>
 80066b2:	4623      	mov	r3, r4
 80066b4:	e7e1      	b.n	800667a <rshift+0x68>

080066b6 <__hexdig_fun>:
 80066b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80066ba:	2b09      	cmp	r3, #9
 80066bc:	d802      	bhi.n	80066c4 <__hexdig_fun+0xe>
 80066be:	3820      	subs	r0, #32
 80066c0:	b2c0      	uxtb	r0, r0
 80066c2:	4770      	bx	lr
 80066c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80066c8:	2b05      	cmp	r3, #5
 80066ca:	d801      	bhi.n	80066d0 <__hexdig_fun+0x1a>
 80066cc:	3847      	subs	r0, #71	; 0x47
 80066ce:	e7f7      	b.n	80066c0 <__hexdig_fun+0xa>
 80066d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80066d4:	2b05      	cmp	r3, #5
 80066d6:	d801      	bhi.n	80066dc <__hexdig_fun+0x26>
 80066d8:	3827      	subs	r0, #39	; 0x27
 80066da:	e7f1      	b.n	80066c0 <__hexdig_fun+0xa>
 80066dc:	2000      	movs	r0, #0
 80066de:	4770      	bx	lr

080066e0 <__gethex>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	ed2d 8b02 	vpush	{d8}
 80066e8:	b089      	sub	sp, #36	; 0x24
 80066ea:	ee08 0a10 	vmov	s16, r0
 80066ee:	9304      	str	r3, [sp, #16]
 80066f0:	4bb4      	ldr	r3, [pc, #720]	; (80069c4 <__gethex+0x2e4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	4618      	mov	r0, r3
 80066f8:	468b      	mov	fp, r1
 80066fa:	4690      	mov	r8, r2
 80066fc:	f7f9 fda0 	bl	8000240 <strlen>
 8006700:	9b01      	ldr	r3, [sp, #4]
 8006702:	f8db 2000 	ldr.w	r2, [fp]
 8006706:	4403      	add	r3, r0
 8006708:	4682      	mov	sl, r0
 800670a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800670e:	9305      	str	r3, [sp, #20]
 8006710:	1c93      	adds	r3, r2, #2
 8006712:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006716:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800671a:	32fe      	adds	r2, #254	; 0xfe
 800671c:	18d1      	adds	r1, r2, r3
 800671e:	461f      	mov	r7, r3
 8006720:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006724:	9100      	str	r1, [sp, #0]
 8006726:	2830      	cmp	r0, #48	; 0x30
 8006728:	d0f8      	beq.n	800671c <__gethex+0x3c>
 800672a:	f7ff ffc4 	bl	80066b6 <__hexdig_fun>
 800672e:	4604      	mov	r4, r0
 8006730:	2800      	cmp	r0, #0
 8006732:	d13a      	bne.n	80067aa <__gethex+0xca>
 8006734:	9901      	ldr	r1, [sp, #4]
 8006736:	4652      	mov	r2, sl
 8006738:	4638      	mov	r0, r7
 800673a:	f001 fb64 	bl	8007e06 <strncmp>
 800673e:	4605      	mov	r5, r0
 8006740:	2800      	cmp	r0, #0
 8006742:	d168      	bne.n	8006816 <__gethex+0x136>
 8006744:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006748:	eb07 060a 	add.w	r6, r7, sl
 800674c:	f7ff ffb3 	bl	80066b6 <__hexdig_fun>
 8006750:	2800      	cmp	r0, #0
 8006752:	d062      	beq.n	800681a <__gethex+0x13a>
 8006754:	4633      	mov	r3, r6
 8006756:	7818      	ldrb	r0, [r3, #0]
 8006758:	2830      	cmp	r0, #48	; 0x30
 800675a:	461f      	mov	r7, r3
 800675c:	f103 0301 	add.w	r3, r3, #1
 8006760:	d0f9      	beq.n	8006756 <__gethex+0x76>
 8006762:	f7ff ffa8 	bl	80066b6 <__hexdig_fun>
 8006766:	2301      	movs	r3, #1
 8006768:	fab0 f480 	clz	r4, r0
 800676c:	0964      	lsrs	r4, r4, #5
 800676e:	4635      	mov	r5, r6
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	463a      	mov	r2, r7
 8006774:	4616      	mov	r6, r2
 8006776:	3201      	adds	r2, #1
 8006778:	7830      	ldrb	r0, [r6, #0]
 800677a:	f7ff ff9c 	bl	80066b6 <__hexdig_fun>
 800677e:	2800      	cmp	r0, #0
 8006780:	d1f8      	bne.n	8006774 <__gethex+0x94>
 8006782:	9901      	ldr	r1, [sp, #4]
 8006784:	4652      	mov	r2, sl
 8006786:	4630      	mov	r0, r6
 8006788:	f001 fb3d 	bl	8007e06 <strncmp>
 800678c:	b980      	cbnz	r0, 80067b0 <__gethex+0xd0>
 800678e:	b94d      	cbnz	r5, 80067a4 <__gethex+0xc4>
 8006790:	eb06 050a 	add.w	r5, r6, sl
 8006794:	462a      	mov	r2, r5
 8006796:	4616      	mov	r6, r2
 8006798:	3201      	adds	r2, #1
 800679a:	7830      	ldrb	r0, [r6, #0]
 800679c:	f7ff ff8b 	bl	80066b6 <__hexdig_fun>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d1f8      	bne.n	8006796 <__gethex+0xb6>
 80067a4:	1bad      	subs	r5, r5, r6
 80067a6:	00ad      	lsls	r5, r5, #2
 80067a8:	e004      	b.n	80067b4 <__gethex+0xd4>
 80067aa:	2400      	movs	r4, #0
 80067ac:	4625      	mov	r5, r4
 80067ae:	e7e0      	b.n	8006772 <__gethex+0x92>
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	d1f7      	bne.n	80067a4 <__gethex+0xc4>
 80067b4:	7833      	ldrb	r3, [r6, #0]
 80067b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80067ba:	2b50      	cmp	r3, #80	; 0x50
 80067bc:	d13b      	bne.n	8006836 <__gethex+0x156>
 80067be:	7873      	ldrb	r3, [r6, #1]
 80067c0:	2b2b      	cmp	r3, #43	; 0x2b
 80067c2:	d02c      	beq.n	800681e <__gethex+0x13e>
 80067c4:	2b2d      	cmp	r3, #45	; 0x2d
 80067c6:	d02e      	beq.n	8006826 <__gethex+0x146>
 80067c8:	1c71      	adds	r1, r6, #1
 80067ca:	f04f 0900 	mov.w	r9, #0
 80067ce:	7808      	ldrb	r0, [r1, #0]
 80067d0:	f7ff ff71 	bl	80066b6 <__hexdig_fun>
 80067d4:	1e43      	subs	r3, r0, #1
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b18      	cmp	r3, #24
 80067da:	d82c      	bhi.n	8006836 <__gethex+0x156>
 80067dc:	f1a0 0210 	sub.w	r2, r0, #16
 80067e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80067e4:	f7ff ff67 	bl	80066b6 <__hexdig_fun>
 80067e8:	1e43      	subs	r3, r0, #1
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b18      	cmp	r3, #24
 80067ee:	d91d      	bls.n	800682c <__gethex+0x14c>
 80067f0:	f1b9 0f00 	cmp.w	r9, #0
 80067f4:	d000      	beq.n	80067f8 <__gethex+0x118>
 80067f6:	4252      	negs	r2, r2
 80067f8:	4415      	add	r5, r2
 80067fa:	f8cb 1000 	str.w	r1, [fp]
 80067fe:	b1e4      	cbz	r4, 800683a <__gethex+0x15a>
 8006800:	9b00      	ldr	r3, [sp, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf14      	ite	ne
 8006806:	2700      	movne	r7, #0
 8006808:	2706      	moveq	r7, #6
 800680a:	4638      	mov	r0, r7
 800680c:	b009      	add	sp, #36	; 0x24
 800680e:	ecbd 8b02 	vpop	{d8}
 8006812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006816:	463e      	mov	r6, r7
 8006818:	4625      	mov	r5, r4
 800681a:	2401      	movs	r4, #1
 800681c:	e7ca      	b.n	80067b4 <__gethex+0xd4>
 800681e:	f04f 0900 	mov.w	r9, #0
 8006822:	1cb1      	adds	r1, r6, #2
 8006824:	e7d3      	b.n	80067ce <__gethex+0xee>
 8006826:	f04f 0901 	mov.w	r9, #1
 800682a:	e7fa      	b.n	8006822 <__gethex+0x142>
 800682c:	230a      	movs	r3, #10
 800682e:	fb03 0202 	mla	r2, r3, r2, r0
 8006832:	3a10      	subs	r2, #16
 8006834:	e7d4      	b.n	80067e0 <__gethex+0x100>
 8006836:	4631      	mov	r1, r6
 8006838:	e7df      	b.n	80067fa <__gethex+0x11a>
 800683a:	1bf3      	subs	r3, r6, r7
 800683c:	3b01      	subs	r3, #1
 800683e:	4621      	mov	r1, r4
 8006840:	2b07      	cmp	r3, #7
 8006842:	dc0b      	bgt.n	800685c <__gethex+0x17c>
 8006844:	ee18 0a10 	vmov	r0, s16
 8006848:	f000 fb00 	bl	8006e4c <_Balloc>
 800684c:	4604      	mov	r4, r0
 800684e:	b940      	cbnz	r0, 8006862 <__gethex+0x182>
 8006850:	4b5d      	ldr	r3, [pc, #372]	; (80069c8 <__gethex+0x2e8>)
 8006852:	4602      	mov	r2, r0
 8006854:	21de      	movs	r1, #222	; 0xde
 8006856:	485d      	ldr	r0, [pc, #372]	; (80069cc <__gethex+0x2ec>)
 8006858:	f7fc ffdc 	bl	8003814 <__assert_func>
 800685c:	3101      	adds	r1, #1
 800685e:	105b      	asrs	r3, r3, #1
 8006860:	e7ee      	b.n	8006840 <__gethex+0x160>
 8006862:	f100 0914 	add.w	r9, r0, #20
 8006866:	f04f 0b00 	mov.w	fp, #0
 800686a:	f1ca 0301 	rsb	r3, sl, #1
 800686e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006872:	f8cd b000 	str.w	fp, [sp]
 8006876:	9306      	str	r3, [sp, #24]
 8006878:	42b7      	cmp	r7, r6
 800687a:	d340      	bcc.n	80068fe <__gethex+0x21e>
 800687c:	9802      	ldr	r0, [sp, #8]
 800687e:	9b00      	ldr	r3, [sp, #0]
 8006880:	f840 3b04 	str.w	r3, [r0], #4
 8006884:	eba0 0009 	sub.w	r0, r0, r9
 8006888:	1080      	asrs	r0, r0, #2
 800688a:	0146      	lsls	r6, r0, #5
 800688c:	6120      	str	r0, [r4, #16]
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fbce 	bl	8007030 <__hi0bits>
 8006894:	1a30      	subs	r0, r6, r0
 8006896:	f8d8 6000 	ldr.w	r6, [r8]
 800689a:	42b0      	cmp	r0, r6
 800689c:	dd63      	ble.n	8006966 <__gethex+0x286>
 800689e:	1b87      	subs	r7, r0, r6
 80068a0:	4639      	mov	r1, r7
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 ff6f 	bl	8007786 <__any_on>
 80068a8:	4682      	mov	sl, r0
 80068aa:	b1a8      	cbz	r0, 80068d8 <__gethex+0x1f8>
 80068ac:	1e7b      	subs	r3, r7, #1
 80068ae:	1159      	asrs	r1, r3, #5
 80068b0:	f003 021f 	and.w	r2, r3, #31
 80068b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80068b8:	f04f 0a01 	mov.w	sl, #1
 80068bc:	fa0a f202 	lsl.w	r2, sl, r2
 80068c0:	420a      	tst	r2, r1
 80068c2:	d009      	beq.n	80068d8 <__gethex+0x1f8>
 80068c4:	4553      	cmp	r3, sl
 80068c6:	dd05      	ble.n	80068d4 <__gethex+0x1f4>
 80068c8:	1eb9      	subs	r1, r7, #2
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 ff5b 	bl	8007786 <__any_on>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d145      	bne.n	8006960 <__gethex+0x280>
 80068d4:	f04f 0a02 	mov.w	sl, #2
 80068d8:	4639      	mov	r1, r7
 80068da:	4620      	mov	r0, r4
 80068dc:	f7ff fe99 	bl	8006612 <rshift>
 80068e0:	443d      	add	r5, r7
 80068e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068e6:	42ab      	cmp	r3, r5
 80068e8:	da4c      	bge.n	8006984 <__gethex+0x2a4>
 80068ea:	ee18 0a10 	vmov	r0, s16
 80068ee:	4621      	mov	r1, r4
 80068f0:	f000 faec 	bl	8006ecc <_Bfree>
 80068f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068f6:	2300      	movs	r3, #0
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	27a3      	movs	r7, #163	; 0xa3
 80068fc:	e785      	b.n	800680a <__gethex+0x12a>
 80068fe:	1e73      	subs	r3, r6, #1
 8006900:	9a05      	ldr	r2, [sp, #20]
 8006902:	9303      	str	r3, [sp, #12]
 8006904:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006908:	4293      	cmp	r3, r2
 800690a:	d019      	beq.n	8006940 <__gethex+0x260>
 800690c:	f1bb 0f20 	cmp.w	fp, #32
 8006910:	d107      	bne.n	8006922 <__gethex+0x242>
 8006912:	9b02      	ldr	r3, [sp, #8]
 8006914:	9a00      	ldr	r2, [sp, #0]
 8006916:	f843 2b04 	str.w	r2, [r3], #4
 800691a:	9302      	str	r3, [sp, #8]
 800691c:	2300      	movs	r3, #0
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	469b      	mov	fp, r3
 8006922:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006926:	f7ff fec6 	bl	80066b6 <__hexdig_fun>
 800692a:	9b00      	ldr	r3, [sp, #0]
 800692c:	f000 000f 	and.w	r0, r0, #15
 8006930:	fa00 f00b 	lsl.w	r0, r0, fp
 8006934:	4303      	orrs	r3, r0
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	f10b 0b04 	add.w	fp, fp, #4
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	e00d      	b.n	800695c <__gethex+0x27c>
 8006940:	9b03      	ldr	r3, [sp, #12]
 8006942:	9a06      	ldr	r2, [sp, #24]
 8006944:	4413      	add	r3, r2
 8006946:	42bb      	cmp	r3, r7
 8006948:	d3e0      	bcc.n	800690c <__gethex+0x22c>
 800694a:	4618      	mov	r0, r3
 800694c:	9901      	ldr	r1, [sp, #4]
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	4652      	mov	r2, sl
 8006952:	f001 fa58 	bl	8007e06 <strncmp>
 8006956:	9b07      	ldr	r3, [sp, #28]
 8006958:	2800      	cmp	r0, #0
 800695a:	d1d7      	bne.n	800690c <__gethex+0x22c>
 800695c:	461e      	mov	r6, r3
 800695e:	e78b      	b.n	8006878 <__gethex+0x198>
 8006960:	f04f 0a03 	mov.w	sl, #3
 8006964:	e7b8      	b.n	80068d8 <__gethex+0x1f8>
 8006966:	da0a      	bge.n	800697e <__gethex+0x29e>
 8006968:	1a37      	subs	r7, r6, r0
 800696a:	4621      	mov	r1, r4
 800696c:	ee18 0a10 	vmov	r0, s16
 8006970:	463a      	mov	r2, r7
 8006972:	f000 fcc7 	bl	8007304 <__lshift>
 8006976:	1bed      	subs	r5, r5, r7
 8006978:	4604      	mov	r4, r0
 800697a:	f100 0914 	add.w	r9, r0, #20
 800697e:	f04f 0a00 	mov.w	sl, #0
 8006982:	e7ae      	b.n	80068e2 <__gethex+0x202>
 8006984:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006988:	42a8      	cmp	r0, r5
 800698a:	dd72      	ble.n	8006a72 <__gethex+0x392>
 800698c:	1b45      	subs	r5, r0, r5
 800698e:	42ae      	cmp	r6, r5
 8006990:	dc36      	bgt.n	8006a00 <__gethex+0x320>
 8006992:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006996:	2b02      	cmp	r3, #2
 8006998:	d02a      	beq.n	80069f0 <__gethex+0x310>
 800699a:	2b03      	cmp	r3, #3
 800699c:	d02c      	beq.n	80069f8 <__gethex+0x318>
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d11c      	bne.n	80069dc <__gethex+0x2fc>
 80069a2:	42ae      	cmp	r6, r5
 80069a4:	d11a      	bne.n	80069dc <__gethex+0x2fc>
 80069a6:	2e01      	cmp	r6, #1
 80069a8:	d112      	bne.n	80069d0 <__gethex+0x2f0>
 80069aa:	9a04      	ldr	r2, [sp, #16]
 80069ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	2301      	movs	r3, #1
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	f8c9 3000 	str.w	r3, [r9]
 80069ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069bc:	2762      	movs	r7, #98	; 0x62
 80069be:	601c      	str	r4, [r3, #0]
 80069c0:	e723      	b.n	800680a <__gethex+0x12a>
 80069c2:	bf00      	nop
 80069c4:	0800834c 	.word	0x0800834c
 80069c8:	08008270 	.word	0x08008270
 80069cc:	080082e4 	.word	0x080082e4
 80069d0:	1e71      	subs	r1, r6, #1
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 fed7 	bl	8007786 <__any_on>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d1e6      	bne.n	80069aa <__gethex+0x2ca>
 80069dc:	ee18 0a10 	vmov	r0, s16
 80069e0:	4621      	mov	r1, r4
 80069e2:	f000 fa73 	bl	8006ecc <_Bfree>
 80069e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80069e8:	2300      	movs	r3, #0
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	2750      	movs	r7, #80	; 0x50
 80069ee:	e70c      	b.n	800680a <__gethex+0x12a>
 80069f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f2      	bne.n	80069dc <__gethex+0x2fc>
 80069f6:	e7d8      	b.n	80069aa <__gethex+0x2ca>
 80069f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1d5      	bne.n	80069aa <__gethex+0x2ca>
 80069fe:	e7ed      	b.n	80069dc <__gethex+0x2fc>
 8006a00:	1e6f      	subs	r7, r5, #1
 8006a02:	f1ba 0f00 	cmp.w	sl, #0
 8006a06:	d131      	bne.n	8006a6c <__gethex+0x38c>
 8006a08:	b127      	cbz	r7, 8006a14 <__gethex+0x334>
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 feba 	bl	8007786 <__any_on>
 8006a12:	4682      	mov	sl, r0
 8006a14:	117b      	asrs	r3, r7, #5
 8006a16:	2101      	movs	r1, #1
 8006a18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006a1c:	f007 071f 	and.w	r7, r7, #31
 8006a20:	fa01 f707 	lsl.w	r7, r1, r7
 8006a24:	421f      	tst	r7, r3
 8006a26:	4629      	mov	r1, r5
 8006a28:	4620      	mov	r0, r4
 8006a2a:	bf18      	it	ne
 8006a2c:	f04a 0a02 	orrne.w	sl, sl, #2
 8006a30:	1b76      	subs	r6, r6, r5
 8006a32:	f7ff fdee 	bl	8006612 <rshift>
 8006a36:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006a3a:	2702      	movs	r7, #2
 8006a3c:	f1ba 0f00 	cmp.w	sl, #0
 8006a40:	d048      	beq.n	8006ad4 <__gethex+0x3f4>
 8006a42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d015      	beq.n	8006a76 <__gethex+0x396>
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d017      	beq.n	8006a7e <__gethex+0x39e>
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d109      	bne.n	8006a66 <__gethex+0x386>
 8006a52:	f01a 0f02 	tst.w	sl, #2
 8006a56:	d006      	beq.n	8006a66 <__gethex+0x386>
 8006a58:	f8d9 0000 	ldr.w	r0, [r9]
 8006a5c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006a60:	f01a 0f01 	tst.w	sl, #1
 8006a64:	d10e      	bne.n	8006a84 <__gethex+0x3a4>
 8006a66:	f047 0710 	orr.w	r7, r7, #16
 8006a6a:	e033      	b.n	8006ad4 <__gethex+0x3f4>
 8006a6c:	f04f 0a01 	mov.w	sl, #1
 8006a70:	e7d0      	b.n	8006a14 <__gethex+0x334>
 8006a72:	2701      	movs	r7, #1
 8006a74:	e7e2      	b.n	8006a3c <__gethex+0x35c>
 8006a76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a78:	f1c3 0301 	rsb	r3, r3, #1
 8006a7c:	9315      	str	r3, [sp, #84]	; 0x54
 8006a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0f0      	beq.n	8006a66 <__gethex+0x386>
 8006a84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006a88:	f104 0314 	add.w	r3, r4, #20
 8006a8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006a90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006a94:	f04f 0c00 	mov.w	ip, #0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a9e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006aa2:	d01c      	beq.n	8006ade <__gethex+0x3fe>
 8006aa4:	3201      	adds	r2, #1
 8006aa6:	6002      	str	r2, [r0, #0]
 8006aa8:	2f02      	cmp	r7, #2
 8006aaa:	f104 0314 	add.w	r3, r4, #20
 8006aae:	d13f      	bne.n	8006b30 <__gethex+0x450>
 8006ab0:	f8d8 2000 	ldr.w	r2, [r8]
 8006ab4:	3a01      	subs	r2, #1
 8006ab6:	42b2      	cmp	r2, r6
 8006ab8:	d10a      	bne.n	8006ad0 <__gethex+0x3f0>
 8006aba:	1171      	asrs	r1, r6, #5
 8006abc:	2201      	movs	r2, #1
 8006abe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ac2:	f006 061f 	and.w	r6, r6, #31
 8006ac6:	fa02 f606 	lsl.w	r6, r2, r6
 8006aca:	421e      	tst	r6, r3
 8006acc:	bf18      	it	ne
 8006ace:	4617      	movne	r7, r2
 8006ad0:	f047 0720 	orr.w	r7, r7, #32
 8006ad4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ad6:	601c      	str	r4, [r3, #0]
 8006ad8:	9b04      	ldr	r3, [sp, #16]
 8006ada:	601d      	str	r5, [r3, #0]
 8006adc:	e695      	b.n	800680a <__gethex+0x12a>
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	f843 cc04 	str.w	ip, [r3, #-4]
 8006ae4:	d8d8      	bhi.n	8006a98 <__gethex+0x3b8>
 8006ae6:	68a3      	ldr	r3, [r4, #8]
 8006ae8:	459b      	cmp	fp, r3
 8006aea:	db19      	blt.n	8006b20 <__gethex+0x440>
 8006aec:	6861      	ldr	r1, [r4, #4]
 8006aee:	ee18 0a10 	vmov	r0, s16
 8006af2:	3101      	adds	r1, #1
 8006af4:	f000 f9aa 	bl	8006e4c <_Balloc>
 8006af8:	4681      	mov	r9, r0
 8006afa:	b918      	cbnz	r0, 8006b04 <__gethex+0x424>
 8006afc:	4b1a      	ldr	r3, [pc, #104]	; (8006b68 <__gethex+0x488>)
 8006afe:	4602      	mov	r2, r0
 8006b00:	2184      	movs	r1, #132	; 0x84
 8006b02:	e6a8      	b.n	8006856 <__gethex+0x176>
 8006b04:	6922      	ldr	r2, [r4, #16]
 8006b06:	3202      	adds	r2, #2
 8006b08:	f104 010c 	add.w	r1, r4, #12
 8006b0c:	0092      	lsls	r2, r2, #2
 8006b0e:	300c      	adds	r0, #12
 8006b10:	f000 f974 	bl	8006dfc <memcpy>
 8006b14:	4621      	mov	r1, r4
 8006b16:	ee18 0a10 	vmov	r0, s16
 8006b1a:	f000 f9d7 	bl	8006ecc <_Bfree>
 8006b1e:	464c      	mov	r4, r9
 8006b20:	6923      	ldr	r3, [r4, #16]
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b28:	6122      	str	r2, [r4, #16]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	615a      	str	r2, [r3, #20]
 8006b2e:	e7bb      	b.n	8006aa8 <__gethex+0x3c8>
 8006b30:	6922      	ldr	r2, [r4, #16]
 8006b32:	455a      	cmp	r2, fp
 8006b34:	dd0b      	ble.n	8006b4e <__gethex+0x46e>
 8006b36:	2101      	movs	r1, #1
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f7ff fd6a 	bl	8006612 <rshift>
 8006b3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b42:	3501      	adds	r5, #1
 8006b44:	42ab      	cmp	r3, r5
 8006b46:	f6ff aed0 	blt.w	80068ea <__gethex+0x20a>
 8006b4a:	2701      	movs	r7, #1
 8006b4c:	e7c0      	b.n	8006ad0 <__gethex+0x3f0>
 8006b4e:	f016 061f 	ands.w	r6, r6, #31
 8006b52:	d0fa      	beq.n	8006b4a <__gethex+0x46a>
 8006b54:	4453      	add	r3, sl
 8006b56:	f1c6 0620 	rsb	r6, r6, #32
 8006b5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006b5e:	f000 fa67 	bl	8007030 <__hi0bits>
 8006b62:	42b0      	cmp	r0, r6
 8006b64:	dbe7      	blt.n	8006b36 <__gethex+0x456>
 8006b66:	e7f0      	b.n	8006b4a <__gethex+0x46a>
 8006b68:	08008270 	.word	0x08008270

08006b6c <L_shift>:
 8006b6c:	f1c2 0208 	rsb	r2, r2, #8
 8006b70:	0092      	lsls	r2, r2, #2
 8006b72:	b570      	push	{r4, r5, r6, lr}
 8006b74:	f1c2 0620 	rsb	r6, r2, #32
 8006b78:	6843      	ldr	r3, [r0, #4]
 8006b7a:	6804      	ldr	r4, [r0, #0]
 8006b7c:	fa03 f506 	lsl.w	r5, r3, r6
 8006b80:	432c      	orrs	r4, r5
 8006b82:	40d3      	lsrs	r3, r2
 8006b84:	6004      	str	r4, [r0, #0]
 8006b86:	f840 3f04 	str.w	r3, [r0, #4]!
 8006b8a:	4288      	cmp	r0, r1
 8006b8c:	d3f4      	bcc.n	8006b78 <L_shift+0xc>
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}

08006b90 <__match>:
 8006b90:	b530      	push	{r4, r5, lr}
 8006b92:	6803      	ldr	r3, [r0, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b9a:	b914      	cbnz	r4, 8006ba2 <__match+0x12>
 8006b9c:	6003      	str	r3, [r0, #0]
 8006b9e:	2001      	movs	r0, #1
 8006ba0:	bd30      	pop	{r4, r5, pc}
 8006ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ba6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006baa:	2d19      	cmp	r5, #25
 8006bac:	bf98      	it	ls
 8006bae:	3220      	addls	r2, #32
 8006bb0:	42a2      	cmp	r2, r4
 8006bb2:	d0f0      	beq.n	8006b96 <__match+0x6>
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	e7f3      	b.n	8006ba0 <__match+0x10>

08006bb8 <__hexnan>:
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	680b      	ldr	r3, [r1, #0]
 8006bbe:	115e      	asrs	r6, r3, #5
 8006bc0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006bc4:	f013 031f 	ands.w	r3, r3, #31
 8006bc8:	b087      	sub	sp, #28
 8006bca:	bf18      	it	ne
 8006bcc:	3604      	addne	r6, #4
 8006bce:	2500      	movs	r5, #0
 8006bd0:	1f37      	subs	r7, r6, #4
 8006bd2:	4690      	mov	r8, r2
 8006bd4:	6802      	ldr	r2, [r0, #0]
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	4682      	mov	sl, r0
 8006bda:	f846 5c04 	str.w	r5, [r6, #-4]
 8006bde:	46b9      	mov	r9, r7
 8006be0:	463c      	mov	r4, r7
 8006be2:	9502      	str	r5, [sp, #8]
 8006be4:	46ab      	mov	fp, r5
 8006be6:	7851      	ldrb	r1, [r2, #1]
 8006be8:	1c53      	adds	r3, r2, #1
 8006bea:	9303      	str	r3, [sp, #12]
 8006bec:	b341      	cbz	r1, 8006c40 <__hexnan+0x88>
 8006bee:	4608      	mov	r0, r1
 8006bf0:	9205      	str	r2, [sp, #20]
 8006bf2:	9104      	str	r1, [sp, #16]
 8006bf4:	f7ff fd5f 	bl	80066b6 <__hexdig_fun>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d14f      	bne.n	8006c9c <__hexnan+0xe4>
 8006bfc:	9904      	ldr	r1, [sp, #16]
 8006bfe:	9a05      	ldr	r2, [sp, #20]
 8006c00:	2920      	cmp	r1, #32
 8006c02:	d818      	bhi.n	8006c36 <__hexnan+0x7e>
 8006c04:	9b02      	ldr	r3, [sp, #8]
 8006c06:	459b      	cmp	fp, r3
 8006c08:	dd13      	ble.n	8006c32 <__hexnan+0x7a>
 8006c0a:	454c      	cmp	r4, r9
 8006c0c:	d206      	bcs.n	8006c1c <__hexnan+0x64>
 8006c0e:	2d07      	cmp	r5, #7
 8006c10:	dc04      	bgt.n	8006c1c <__hexnan+0x64>
 8006c12:	462a      	mov	r2, r5
 8006c14:	4649      	mov	r1, r9
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7ff ffa8 	bl	8006b6c <L_shift>
 8006c1c:	4544      	cmp	r4, r8
 8006c1e:	d950      	bls.n	8006cc2 <__hexnan+0x10a>
 8006c20:	2300      	movs	r3, #0
 8006c22:	f1a4 0904 	sub.w	r9, r4, #4
 8006c26:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c2a:	f8cd b008 	str.w	fp, [sp, #8]
 8006c2e:	464c      	mov	r4, r9
 8006c30:	461d      	mov	r5, r3
 8006c32:	9a03      	ldr	r2, [sp, #12]
 8006c34:	e7d7      	b.n	8006be6 <__hexnan+0x2e>
 8006c36:	2929      	cmp	r1, #41	; 0x29
 8006c38:	d156      	bne.n	8006ce8 <__hexnan+0x130>
 8006c3a:	3202      	adds	r2, #2
 8006c3c:	f8ca 2000 	str.w	r2, [sl]
 8006c40:	f1bb 0f00 	cmp.w	fp, #0
 8006c44:	d050      	beq.n	8006ce8 <__hexnan+0x130>
 8006c46:	454c      	cmp	r4, r9
 8006c48:	d206      	bcs.n	8006c58 <__hexnan+0xa0>
 8006c4a:	2d07      	cmp	r5, #7
 8006c4c:	dc04      	bgt.n	8006c58 <__hexnan+0xa0>
 8006c4e:	462a      	mov	r2, r5
 8006c50:	4649      	mov	r1, r9
 8006c52:	4620      	mov	r0, r4
 8006c54:	f7ff ff8a 	bl	8006b6c <L_shift>
 8006c58:	4544      	cmp	r4, r8
 8006c5a:	d934      	bls.n	8006cc6 <__hexnan+0x10e>
 8006c5c:	f1a8 0204 	sub.w	r2, r8, #4
 8006c60:	4623      	mov	r3, r4
 8006c62:	f853 1b04 	ldr.w	r1, [r3], #4
 8006c66:	f842 1f04 	str.w	r1, [r2, #4]!
 8006c6a:	429f      	cmp	r7, r3
 8006c6c:	d2f9      	bcs.n	8006c62 <__hexnan+0xaa>
 8006c6e:	1b3b      	subs	r3, r7, r4
 8006c70:	f023 0303 	bic.w	r3, r3, #3
 8006c74:	3304      	adds	r3, #4
 8006c76:	3401      	adds	r4, #1
 8006c78:	3e03      	subs	r6, #3
 8006c7a:	42b4      	cmp	r4, r6
 8006c7c:	bf88      	it	hi
 8006c7e:	2304      	movhi	r3, #4
 8006c80:	4443      	add	r3, r8
 8006c82:	2200      	movs	r2, #0
 8006c84:	f843 2b04 	str.w	r2, [r3], #4
 8006c88:	429f      	cmp	r7, r3
 8006c8a:	d2fb      	bcs.n	8006c84 <__hexnan+0xcc>
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	b91b      	cbnz	r3, 8006c98 <__hexnan+0xe0>
 8006c90:	4547      	cmp	r7, r8
 8006c92:	d127      	bne.n	8006ce4 <__hexnan+0x12c>
 8006c94:	2301      	movs	r3, #1
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	2005      	movs	r0, #5
 8006c9a:	e026      	b.n	8006cea <__hexnan+0x132>
 8006c9c:	3501      	adds	r5, #1
 8006c9e:	2d08      	cmp	r5, #8
 8006ca0:	f10b 0b01 	add.w	fp, fp, #1
 8006ca4:	dd06      	ble.n	8006cb4 <__hexnan+0xfc>
 8006ca6:	4544      	cmp	r4, r8
 8006ca8:	d9c3      	bls.n	8006c32 <__hexnan+0x7a>
 8006caa:	2300      	movs	r3, #0
 8006cac:	f844 3c04 	str.w	r3, [r4, #-4]
 8006cb0:	2501      	movs	r5, #1
 8006cb2:	3c04      	subs	r4, #4
 8006cb4:	6822      	ldr	r2, [r4, #0]
 8006cb6:	f000 000f 	and.w	r0, r0, #15
 8006cba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006cbe:	6022      	str	r2, [r4, #0]
 8006cc0:	e7b7      	b.n	8006c32 <__hexnan+0x7a>
 8006cc2:	2508      	movs	r5, #8
 8006cc4:	e7b5      	b.n	8006c32 <__hexnan+0x7a>
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0df      	beq.n	8006c8c <__hexnan+0xd4>
 8006ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cd0:	f1c3 0320 	rsb	r3, r3, #32
 8006cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006cdc:	401a      	ands	r2, r3
 8006cde:	f846 2c04 	str.w	r2, [r6, #-4]
 8006ce2:	e7d3      	b.n	8006c8c <__hexnan+0xd4>
 8006ce4:	3f04      	subs	r7, #4
 8006ce6:	e7d1      	b.n	8006c8c <__hexnan+0xd4>
 8006ce8:	2004      	movs	r0, #4
 8006cea:	b007      	add	sp, #28
 8006cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006cf0 <_localeconv_r>:
 8006cf0:	4800      	ldr	r0, [pc, #0]	; (8006cf4 <_localeconv_r+0x4>)
 8006cf2:	4770      	bx	lr
 8006cf4:	20000174 	.word	0x20000174

08006cf8 <__retarget_lock_init_recursive>:
 8006cf8:	4770      	bx	lr

08006cfa <__retarget_lock_acquire_recursive>:
 8006cfa:	4770      	bx	lr

08006cfc <__retarget_lock_release_recursive>:
 8006cfc:	4770      	bx	lr

08006cfe <__swhatbuf_r>:
 8006cfe:	b570      	push	{r4, r5, r6, lr}
 8006d00:	460e      	mov	r6, r1
 8006d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d06:	2900      	cmp	r1, #0
 8006d08:	b096      	sub	sp, #88	; 0x58
 8006d0a:	4614      	mov	r4, r2
 8006d0c:	461d      	mov	r5, r3
 8006d0e:	da08      	bge.n	8006d22 <__swhatbuf_r+0x24>
 8006d10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	602a      	str	r2, [r5, #0]
 8006d18:	061a      	lsls	r2, r3, #24
 8006d1a:	d410      	bmi.n	8006d3e <__swhatbuf_r+0x40>
 8006d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d20:	e00e      	b.n	8006d40 <__swhatbuf_r+0x42>
 8006d22:	466a      	mov	r2, sp
 8006d24:	f001 f8b2 	bl	8007e8c <_fstat_r>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	dbf1      	blt.n	8006d10 <__swhatbuf_r+0x12>
 8006d2c:	9a01      	ldr	r2, [sp, #4]
 8006d2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d36:	425a      	negs	r2, r3
 8006d38:	415a      	adcs	r2, r3
 8006d3a:	602a      	str	r2, [r5, #0]
 8006d3c:	e7ee      	b.n	8006d1c <__swhatbuf_r+0x1e>
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	2000      	movs	r0, #0
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	b016      	add	sp, #88	; 0x58
 8006d46:	bd70      	pop	{r4, r5, r6, pc}

08006d48 <__smakebuf_r>:
 8006d48:	898b      	ldrh	r3, [r1, #12]
 8006d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d4c:	079d      	lsls	r5, r3, #30
 8006d4e:	4606      	mov	r6, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	d507      	bpl.n	8006d64 <__smakebuf_r+0x1c>
 8006d54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	6123      	str	r3, [r4, #16]
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	6163      	str	r3, [r4, #20]
 8006d60:	b002      	add	sp, #8
 8006d62:	bd70      	pop	{r4, r5, r6, pc}
 8006d64:	ab01      	add	r3, sp, #4
 8006d66:	466a      	mov	r2, sp
 8006d68:	f7ff ffc9 	bl	8006cfe <__swhatbuf_r>
 8006d6c:	9900      	ldr	r1, [sp, #0]
 8006d6e:	4605      	mov	r5, r0
 8006d70:	4630      	mov	r0, r6
 8006d72:	f000 fdab 	bl	80078cc <_malloc_r>
 8006d76:	b948      	cbnz	r0, 8006d8c <__smakebuf_r+0x44>
 8006d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7c:	059a      	lsls	r2, r3, #22
 8006d7e:	d4ef      	bmi.n	8006d60 <__smakebuf_r+0x18>
 8006d80:	f023 0303 	bic.w	r3, r3, #3
 8006d84:	f043 0302 	orr.w	r3, r3, #2
 8006d88:	81a3      	strh	r3, [r4, #12]
 8006d8a:	e7e3      	b.n	8006d54 <__smakebuf_r+0xc>
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <__smakebuf_r+0x7c>)
 8006d8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	6020      	str	r0, [r4, #0]
 8006d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	9b00      	ldr	r3, [sp, #0]
 8006d9c:	6163      	str	r3, [r4, #20]
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	6120      	str	r0, [r4, #16]
 8006da2:	b15b      	cbz	r3, 8006dbc <__smakebuf_r+0x74>
 8006da4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006da8:	4630      	mov	r0, r6
 8006daa:	f001 f881 	bl	8007eb0 <_isatty_r>
 8006dae:	b128      	cbz	r0, 8006dbc <__smakebuf_r+0x74>
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	f023 0303 	bic.w	r3, r3, #3
 8006db6:	f043 0301 	orr.w	r3, r3, #1
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	89a0      	ldrh	r0, [r4, #12]
 8006dbe:	4305      	orrs	r5, r0
 8006dc0:	81a5      	strh	r5, [r4, #12]
 8006dc2:	e7cd      	b.n	8006d60 <__smakebuf_r+0x18>
 8006dc4:	08006471 	.word	0x08006471

08006dc8 <malloc>:
 8006dc8:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <malloc+0xc>)
 8006dca:	4601      	mov	r1, r0
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	f000 bd7d 	b.w	80078cc <_malloc_r>
 8006dd2:	bf00      	nop
 8006dd4:	2000001c 	.word	0x2000001c

08006dd8 <__ascii_mbtowc>:
 8006dd8:	b082      	sub	sp, #8
 8006dda:	b901      	cbnz	r1, 8006dde <__ascii_mbtowc+0x6>
 8006ddc:	a901      	add	r1, sp, #4
 8006dde:	b142      	cbz	r2, 8006df2 <__ascii_mbtowc+0x1a>
 8006de0:	b14b      	cbz	r3, 8006df6 <__ascii_mbtowc+0x1e>
 8006de2:	7813      	ldrb	r3, [r2, #0]
 8006de4:	600b      	str	r3, [r1, #0]
 8006de6:	7812      	ldrb	r2, [r2, #0]
 8006de8:	1e10      	subs	r0, r2, #0
 8006dea:	bf18      	it	ne
 8006dec:	2001      	movne	r0, #1
 8006dee:	b002      	add	sp, #8
 8006df0:	4770      	bx	lr
 8006df2:	4610      	mov	r0, r2
 8006df4:	e7fb      	b.n	8006dee <__ascii_mbtowc+0x16>
 8006df6:	f06f 0001 	mvn.w	r0, #1
 8006dfa:	e7f8      	b.n	8006dee <__ascii_mbtowc+0x16>

08006dfc <memcpy>:
 8006dfc:	440a      	add	r2, r1
 8006dfe:	4291      	cmp	r1, r2
 8006e00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006e04:	d100      	bne.n	8006e08 <memcpy+0xc>
 8006e06:	4770      	bx	lr
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e12:	4291      	cmp	r1, r2
 8006e14:	d1f9      	bne.n	8006e0a <memcpy+0xe>
 8006e16:	bd10      	pop	{r4, pc}

08006e18 <memmove>:
 8006e18:	4288      	cmp	r0, r1
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	eb01 0402 	add.w	r4, r1, r2
 8006e20:	d902      	bls.n	8006e28 <memmove+0x10>
 8006e22:	4284      	cmp	r4, r0
 8006e24:	4623      	mov	r3, r4
 8006e26:	d807      	bhi.n	8006e38 <memmove+0x20>
 8006e28:	1e43      	subs	r3, r0, #1
 8006e2a:	42a1      	cmp	r1, r4
 8006e2c:	d008      	beq.n	8006e40 <memmove+0x28>
 8006e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e36:	e7f8      	b.n	8006e2a <memmove+0x12>
 8006e38:	4402      	add	r2, r0
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	428a      	cmp	r2, r1
 8006e3e:	d100      	bne.n	8006e42 <memmove+0x2a>
 8006e40:	bd10      	pop	{r4, pc}
 8006e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e4a:	e7f7      	b.n	8006e3c <memmove+0x24>

08006e4c <_Balloc>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e50:	4604      	mov	r4, r0
 8006e52:	460d      	mov	r5, r1
 8006e54:	b976      	cbnz	r6, 8006e74 <_Balloc+0x28>
 8006e56:	2010      	movs	r0, #16
 8006e58:	f7ff ffb6 	bl	8006dc8 <malloc>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	6260      	str	r0, [r4, #36]	; 0x24
 8006e60:	b920      	cbnz	r0, 8006e6c <_Balloc+0x20>
 8006e62:	4b18      	ldr	r3, [pc, #96]	; (8006ec4 <_Balloc+0x78>)
 8006e64:	4818      	ldr	r0, [pc, #96]	; (8006ec8 <_Balloc+0x7c>)
 8006e66:	2166      	movs	r1, #102	; 0x66
 8006e68:	f7fc fcd4 	bl	8003814 <__assert_func>
 8006e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e70:	6006      	str	r6, [r0, #0]
 8006e72:	60c6      	str	r6, [r0, #12]
 8006e74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e76:	68f3      	ldr	r3, [r6, #12]
 8006e78:	b183      	cbz	r3, 8006e9c <_Balloc+0x50>
 8006e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e82:	b9b8      	cbnz	r0, 8006eb4 <_Balloc+0x68>
 8006e84:	2101      	movs	r1, #1
 8006e86:	fa01 f605 	lsl.w	r6, r1, r5
 8006e8a:	1d72      	adds	r2, r6, #5
 8006e8c:	0092      	lsls	r2, r2, #2
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f000 fc9a 	bl	80077c8 <_calloc_r>
 8006e94:	b160      	cbz	r0, 8006eb0 <_Balloc+0x64>
 8006e96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e9a:	e00e      	b.n	8006eba <_Balloc+0x6e>
 8006e9c:	2221      	movs	r2, #33	; 0x21
 8006e9e:	2104      	movs	r1, #4
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 fc91 	bl	80077c8 <_calloc_r>
 8006ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea8:	60f0      	str	r0, [r6, #12]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e4      	bne.n	8006e7a <_Balloc+0x2e>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	6802      	ldr	r2, [r0, #0]
 8006eb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ec0:	e7f7      	b.n	8006eb2 <_Balloc+0x66>
 8006ec2:	bf00      	nop
 8006ec4:	080081fe 	.word	0x080081fe
 8006ec8:	08008360 	.word	0x08008360

08006ecc <_Bfree>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	b976      	cbnz	r6, 8006ef4 <_Bfree+0x28>
 8006ed6:	2010      	movs	r0, #16
 8006ed8:	f7ff ff76 	bl	8006dc8 <malloc>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6268      	str	r0, [r5, #36]	; 0x24
 8006ee0:	b920      	cbnz	r0, 8006eec <_Bfree+0x20>
 8006ee2:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <_Bfree+0x3c>)
 8006ee4:	4809      	ldr	r0, [pc, #36]	; (8006f0c <_Bfree+0x40>)
 8006ee6:	218a      	movs	r1, #138	; 0x8a
 8006ee8:	f7fc fc94 	bl	8003814 <__assert_func>
 8006eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ef0:	6006      	str	r6, [r0, #0]
 8006ef2:	60c6      	str	r6, [r0, #12]
 8006ef4:	b13c      	cbz	r4, 8006f06 <_Bfree+0x3a>
 8006ef6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ef8:	6862      	ldr	r2, [r4, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f00:	6021      	str	r1, [r4, #0]
 8006f02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	080081fe 	.word	0x080081fe
 8006f0c:	08008360 	.word	0x08008360

08006f10 <__multadd>:
 8006f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f14:	690d      	ldr	r5, [r1, #16]
 8006f16:	4607      	mov	r7, r0
 8006f18:	460c      	mov	r4, r1
 8006f1a:	461e      	mov	r6, r3
 8006f1c:	f101 0c14 	add.w	ip, r1, #20
 8006f20:	2000      	movs	r0, #0
 8006f22:	f8dc 3000 	ldr.w	r3, [ip]
 8006f26:	b299      	uxth	r1, r3
 8006f28:	fb02 6101 	mla	r1, r2, r1, r6
 8006f2c:	0c1e      	lsrs	r6, r3, #16
 8006f2e:	0c0b      	lsrs	r3, r1, #16
 8006f30:	fb02 3306 	mla	r3, r2, r6, r3
 8006f34:	b289      	uxth	r1, r1
 8006f36:	3001      	adds	r0, #1
 8006f38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f3c:	4285      	cmp	r5, r0
 8006f3e:	f84c 1b04 	str.w	r1, [ip], #4
 8006f42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f46:	dcec      	bgt.n	8006f22 <__multadd+0x12>
 8006f48:	b30e      	cbz	r6, 8006f8e <__multadd+0x7e>
 8006f4a:	68a3      	ldr	r3, [r4, #8]
 8006f4c:	42ab      	cmp	r3, r5
 8006f4e:	dc19      	bgt.n	8006f84 <__multadd+0x74>
 8006f50:	6861      	ldr	r1, [r4, #4]
 8006f52:	4638      	mov	r0, r7
 8006f54:	3101      	adds	r1, #1
 8006f56:	f7ff ff79 	bl	8006e4c <_Balloc>
 8006f5a:	4680      	mov	r8, r0
 8006f5c:	b928      	cbnz	r0, 8006f6a <__multadd+0x5a>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <__multadd+0x84>)
 8006f62:	480d      	ldr	r0, [pc, #52]	; (8006f98 <__multadd+0x88>)
 8006f64:	21b5      	movs	r1, #181	; 0xb5
 8006f66:	f7fc fc55 	bl	8003814 <__assert_func>
 8006f6a:	6922      	ldr	r2, [r4, #16]
 8006f6c:	3202      	adds	r2, #2
 8006f6e:	f104 010c 	add.w	r1, r4, #12
 8006f72:	0092      	lsls	r2, r2, #2
 8006f74:	300c      	adds	r0, #12
 8006f76:	f7ff ff41 	bl	8006dfc <memcpy>
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	4638      	mov	r0, r7
 8006f7e:	f7ff ffa5 	bl	8006ecc <_Bfree>
 8006f82:	4644      	mov	r4, r8
 8006f84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f88:	3501      	adds	r5, #1
 8006f8a:	615e      	str	r6, [r3, #20]
 8006f8c:	6125      	str	r5, [r4, #16]
 8006f8e:	4620      	mov	r0, r4
 8006f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f94:	08008270 	.word	0x08008270
 8006f98:	08008360 	.word	0x08008360

08006f9c <__s2b>:
 8006f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	4615      	mov	r5, r2
 8006fa4:	461f      	mov	r7, r3
 8006fa6:	2209      	movs	r2, #9
 8006fa8:	3308      	adds	r3, #8
 8006faa:	4606      	mov	r6, r0
 8006fac:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	db09      	blt.n	8006fcc <__s2b+0x30>
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f7ff ff47 	bl	8006e4c <_Balloc>
 8006fbe:	b940      	cbnz	r0, 8006fd2 <__s2b+0x36>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	4b19      	ldr	r3, [pc, #100]	; (8007028 <__s2b+0x8c>)
 8006fc4:	4819      	ldr	r0, [pc, #100]	; (800702c <__s2b+0x90>)
 8006fc6:	21ce      	movs	r1, #206	; 0xce
 8006fc8:	f7fc fc24 	bl	8003814 <__assert_func>
 8006fcc:	0052      	lsls	r2, r2, #1
 8006fce:	3101      	adds	r1, #1
 8006fd0:	e7f0      	b.n	8006fb4 <__s2b+0x18>
 8006fd2:	9b08      	ldr	r3, [sp, #32]
 8006fd4:	6143      	str	r3, [r0, #20]
 8006fd6:	2d09      	cmp	r5, #9
 8006fd8:	f04f 0301 	mov.w	r3, #1
 8006fdc:	6103      	str	r3, [r0, #16]
 8006fde:	dd16      	ble.n	800700e <__s2b+0x72>
 8006fe0:	f104 0909 	add.w	r9, r4, #9
 8006fe4:	46c8      	mov	r8, r9
 8006fe6:	442c      	add	r4, r5
 8006fe8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006fec:	4601      	mov	r1, r0
 8006fee:	3b30      	subs	r3, #48	; 0x30
 8006ff0:	220a      	movs	r2, #10
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7ff ff8c 	bl	8006f10 <__multadd>
 8006ff8:	45a0      	cmp	r8, r4
 8006ffa:	d1f5      	bne.n	8006fe8 <__s2b+0x4c>
 8006ffc:	f1a5 0408 	sub.w	r4, r5, #8
 8007000:	444c      	add	r4, r9
 8007002:	1b2d      	subs	r5, r5, r4
 8007004:	1963      	adds	r3, r4, r5
 8007006:	42bb      	cmp	r3, r7
 8007008:	db04      	blt.n	8007014 <__s2b+0x78>
 800700a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800700e:	340a      	adds	r4, #10
 8007010:	2509      	movs	r5, #9
 8007012:	e7f6      	b.n	8007002 <__s2b+0x66>
 8007014:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007018:	4601      	mov	r1, r0
 800701a:	3b30      	subs	r3, #48	; 0x30
 800701c:	220a      	movs	r2, #10
 800701e:	4630      	mov	r0, r6
 8007020:	f7ff ff76 	bl	8006f10 <__multadd>
 8007024:	e7ee      	b.n	8007004 <__s2b+0x68>
 8007026:	bf00      	nop
 8007028:	08008270 	.word	0x08008270
 800702c:	08008360 	.word	0x08008360

08007030 <__hi0bits>:
 8007030:	0c03      	lsrs	r3, r0, #16
 8007032:	041b      	lsls	r3, r3, #16
 8007034:	b9d3      	cbnz	r3, 800706c <__hi0bits+0x3c>
 8007036:	0400      	lsls	r0, r0, #16
 8007038:	2310      	movs	r3, #16
 800703a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800703e:	bf04      	itt	eq
 8007040:	0200      	lsleq	r0, r0, #8
 8007042:	3308      	addeq	r3, #8
 8007044:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007048:	bf04      	itt	eq
 800704a:	0100      	lsleq	r0, r0, #4
 800704c:	3304      	addeq	r3, #4
 800704e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007052:	bf04      	itt	eq
 8007054:	0080      	lsleq	r0, r0, #2
 8007056:	3302      	addeq	r3, #2
 8007058:	2800      	cmp	r0, #0
 800705a:	db05      	blt.n	8007068 <__hi0bits+0x38>
 800705c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007060:	f103 0301 	add.w	r3, r3, #1
 8007064:	bf08      	it	eq
 8007066:	2320      	moveq	r3, #32
 8007068:	4618      	mov	r0, r3
 800706a:	4770      	bx	lr
 800706c:	2300      	movs	r3, #0
 800706e:	e7e4      	b.n	800703a <__hi0bits+0xa>

08007070 <__lo0bits>:
 8007070:	6803      	ldr	r3, [r0, #0]
 8007072:	f013 0207 	ands.w	r2, r3, #7
 8007076:	4601      	mov	r1, r0
 8007078:	d00b      	beq.n	8007092 <__lo0bits+0x22>
 800707a:	07da      	lsls	r2, r3, #31
 800707c:	d423      	bmi.n	80070c6 <__lo0bits+0x56>
 800707e:	0798      	lsls	r0, r3, #30
 8007080:	bf49      	itett	mi
 8007082:	085b      	lsrmi	r3, r3, #1
 8007084:	089b      	lsrpl	r3, r3, #2
 8007086:	2001      	movmi	r0, #1
 8007088:	600b      	strmi	r3, [r1, #0]
 800708a:	bf5c      	itt	pl
 800708c:	600b      	strpl	r3, [r1, #0]
 800708e:	2002      	movpl	r0, #2
 8007090:	4770      	bx	lr
 8007092:	b298      	uxth	r0, r3
 8007094:	b9a8      	cbnz	r0, 80070c2 <__lo0bits+0x52>
 8007096:	0c1b      	lsrs	r3, r3, #16
 8007098:	2010      	movs	r0, #16
 800709a:	b2da      	uxtb	r2, r3
 800709c:	b90a      	cbnz	r2, 80070a2 <__lo0bits+0x32>
 800709e:	3008      	adds	r0, #8
 80070a0:	0a1b      	lsrs	r3, r3, #8
 80070a2:	071a      	lsls	r2, r3, #28
 80070a4:	bf04      	itt	eq
 80070a6:	091b      	lsreq	r3, r3, #4
 80070a8:	3004      	addeq	r0, #4
 80070aa:	079a      	lsls	r2, r3, #30
 80070ac:	bf04      	itt	eq
 80070ae:	089b      	lsreq	r3, r3, #2
 80070b0:	3002      	addeq	r0, #2
 80070b2:	07da      	lsls	r2, r3, #31
 80070b4:	d403      	bmi.n	80070be <__lo0bits+0x4e>
 80070b6:	085b      	lsrs	r3, r3, #1
 80070b8:	f100 0001 	add.w	r0, r0, #1
 80070bc:	d005      	beq.n	80070ca <__lo0bits+0x5a>
 80070be:	600b      	str	r3, [r1, #0]
 80070c0:	4770      	bx	lr
 80070c2:	4610      	mov	r0, r2
 80070c4:	e7e9      	b.n	800709a <__lo0bits+0x2a>
 80070c6:	2000      	movs	r0, #0
 80070c8:	4770      	bx	lr
 80070ca:	2020      	movs	r0, #32
 80070cc:	4770      	bx	lr
	...

080070d0 <__i2b>:
 80070d0:	b510      	push	{r4, lr}
 80070d2:	460c      	mov	r4, r1
 80070d4:	2101      	movs	r1, #1
 80070d6:	f7ff feb9 	bl	8006e4c <_Balloc>
 80070da:	4602      	mov	r2, r0
 80070dc:	b928      	cbnz	r0, 80070ea <__i2b+0x1a>
 80070de:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <__i2b+0x24>)
 80070e0:	4805      	ldr	r0, [pc, #20]	; (80070f8 <__i2b+0x28>)
 80070e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070e6:	f7fc fb95 	bl	8003814 <__assert_func>
 80070ea:	2301      	movs	r3, #1
 80070ec:	6144      	str	r4, [r0, #20]
 80070ee:	6103      	str	r3, [r0, #16]
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	bf00      	nop
 80070f4:	08008270 	.word	0x08008270
 80070f8:	08008360 	.word	0x08008360

080070fc <__multiply>:
 80070fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	4691      	mov	r9, r2
 8007102:	690a      	ldr	r2, [r1, #16]
 8007104:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007108:	429a      	cmp	r2, r3
 800710a:	bfb8      	it	lt
 800710c:	460b      	movlt	r3, r1
 800710e:	460c      	mov	r4, r1
 8007110:	bfbc      	itt	lt
 8007112:	464c      	movlt	r4, r9
 8007114:	4699      	movlt	r9, r3
 8007116:	6927      	ldr	r7, [r4, #16]
 8007118:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800711c:	68a3      	ldr	r3, [r4, #8]
 800711e:	6861      	ldr	r1, [r4, #4]
 8007120:	eb07 060a 	add.w	r6, r7, sl
 8007124:	42b3      	cmp	r3, r6
 8007126:	b085      	sub	sp, #20
 8007128:	bfb8      	it	lt
 800712a:	3101      	addlt	r1, #1
 800712c:	f7ff fe8e 	bl	8006e4c <_Balloc>
 8007130:	b930      	cbnz	r0, 8007140 <__multiply+0x44>
 8007132:	4602      	mov	r2, r0
 8007134:	4b44      	ldr	r3, [pc, #272]	; (8007248 <__multiply+0x14c>)
 8007136:	4845      	ldr	r0, [pc, #276]	; (800724c <__multiply+0x150>)
 8007138:	f240 115d 	movw	r1, #349	; 0x15d
 800713c:	f7fc fb6a 	bl	8003814 <__assert_func>
 8007140:	f100 0514 	add.w	r5, r0, #20
 8007144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007148:	462b      	mov	r3, r5
 800714a:	2200      	movs	r2, #0
 800714c:	4543      	cmp	r3, r8
 800714e:	d321      	bcc.n	8007194 <__multiply+0x98>
 8007150:	f104 0314 	add.w	r3, r4, #20
 8007154:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007158:	f109 0314 	add.w	r3, r9, #20
 800715c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007160:	9202      	str	r2, [sp, #8]
 8007162:	1b3a      	subs	r2, r7, r4
 8007164:	3a15      	subs	r2, #21
 8007166:	f022 0203 	bic.w	r2, r2, #3
 800716a:	3204      	adds	r2, #4
 800716c:	f104 0115 	add.w	r1, r4, #21
 8007170:	428f      	cmp	r7, r1
 8007172:	bf38      	it	cc
 8007174:	2204      	movcc	r2, #4
 8007176:	9201      	str	r2, [sp, #4]
 8007178:	9a02      	ldr	r2, [sp, #8]
 800717a:	9303      	str	r3, [sp, #12]
 800717c:	429a      	cmp	r2, r3
 800717e:	d80c      	bhi.n	800719a <__multiply+0x9e>
 8007180:	2e00      	cmp	r6, #0
 8007182:	dd03      	ble.n	800718c <__multiply+0x90>
 8007184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007188:	2b00      	cmp	r3, #0
 800718a:	d05a      	beq.n	8007242 <__multiply+0x146>
 800718c:	6106      	str	r6, [r0, #16]
 800718e:	b005      	add	sp, #20
 8007190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007194:	f843 2b04 	str.w	r2, [r3], #4
 8007198:	e7d8      	b.n	800714c <__multiply+0x50>
 800719a:	f8b3 a000 	ldrh.w	sl, [r3]
 800719e:	f1ba 0f00 	cmp.w	sl, #0
 80071a2:	d024      	beq.n	80071ee <__multiply+0xf2>
 80071a4:	f104 0e14 	add.w	lr, r4, #20
 80071a8:	46a9      	mov	r9, r5
 80071aa:	f04f 0c00 	mov.w	ip, #0
 80071ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071b2:	f8d9 1000 	ldr.w	r1, [r9]
 80071b6:	fa1f fb82 	uxth.w	fp, r2
 80071ba:	b289      	uxth	r1, r1
 80071bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80071c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80071c4:	f8d9 2000 	ldr.w	r2, [r9]
 80071c8:	4461      	add	r1, ip
 80071ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80071d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071d6:	b289      	uxth	r1, r1
 80071d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071dc:	4577      	cmp	r7, lr
 80071de:	f849 1b04 	str.w	r1, [r9], #4
 80071e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071e6:	d8e2      	bhi.n	80071ae <__multiply+0xb2>
 80071e8:	9a01      	ldr	r2, [sp, #4]
 80071ea:	f845 c002 	str.w	ip, [r5, r2]
 80071ee:	9a03      	ldr	r2, [sp, #12]
 80071f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071f4:	3304      	adds	r3, #4
 80071f6:	f1b9 0f00 	cmp.w	r9, #0
 80071fa:	d020      	beq.n	800723e <__multiply+0x142>
 80071fc:	6829      	ldr	r1, [r5, #0]
 80071fe:	f104 0c14 	add.w	ip, r4, #20
 8007202:	46ae      	mov	lr, r5
 8007204:	f04f 0a00 	mov.w	sl, #0
 8007208:	f8bc b000 	ldrh.w	fp, [ip]
 800720c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007210:	fb09 220b 	mla	r2, r9, fp, r2
 8007214:	4492      	add	sl, r2
 8007216:	b289      	uxth	r1, r1
 8007218:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800721c:	f84e 1b04 	str.w	r1, [lr], #4
 8007220:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007224:	f8be 1000 	ldrh.w	r1, [lr]
 8007228:	0c12      	lsrs	r2, r2, #16
 800722a:	fb09 1102 	mla	r1, r9, r2, r1
 800722e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007232:	4567      	cmp	r7, ip
 8007234:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007238:	d8e6      	bhi.n	8007208 <__multiply+0x10c>
 800723a:	9a01      	ldr	r2, [sp, #4]
 800723c:	50a9      	str	r1, [r5, r2]
 800723e:	3504      	adds	r5, #4
 8007240:	e79a      	b.n	8007178 <__multiply+0x7c>
 8007242:	3e01      	subs	r6, #1
 8007244:	e79c      	b.n	8007180 <__multiply+0x84>
 8007246:	bf00      	nop
 8007248:	08008270 	.word	0x08008270
 800724c:	08008360 	.word	0x08008360

08007250 <__pow5mult>:
 8007250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007254:	4615      	mov	r5, r2
 8007256:	f012 0203 	ands.w	r2, r2, #3
 800725a:	4606      	mov	r6, r0
 800725c:	460f      	mov	r7, r1
 800725e:	d007      	beq.n	8007270 <__pow5mult+0x20>
 8007260:	4c25      	ldr	r4, [pc, #148]	; (80072f8 <__pow5mult+0xa8>)
 8007262:	3a01      	subs	r2, #1
 8007264:	2300      	movs	r3, #0
 8007266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800726a:	f7ff fe51 	bl	8006f10 <__multadd>
 800726e:	4607      	mov	r7, r0
 8007270:	10ad      	asrs	r5, r5, #2
 8007272:	d03d      	beq.n	80072f0 <__pow5mult+0xa0>
 8007274:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007276:	b97c      	cbnz	r4, 8007298 <__pow5mult+0x48>
 8007278:	2010      	movs	r0, #16
 800727a:	f7ff fda5 	bl	8006dc8 <malloc>
 800727e:	4602      	mov	r2, r0
 8007280:	6270      	str	r0, [r6, #36]	; 0x24
 8007282:	b928      	cbnz	r0, 8007290 <__pow5mult+0x40>
 8007284:	4b1d      	ldr	r3, [pc, #116]	; (80072fc <__pow5mult+0xac>)
 8007286:	481e      	ldr	r0, [pc, #120]	; (8007300 <__pow5mult+0xb0>)
 8007288:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800728c:	f7fc fac2 	bl	8003814 <__assert_func>
 8007290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007294:	6004      	str	r4, [r0, #0]
 8007296:	60c4      	str	r4, [r0, #12]
 8007298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800729c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072a0:	b94c      	cbnz	r4, 80072b6 <__pow5mult+0x66>
 80072a2:	f240 2171 	movw	r1, #625	; 0x271
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff ff12 	bl	80070d0 <__i2b>
 80072ac:	2300      	movs	r3, #0
 80072ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80072b2:	4604      	mov	r4, r0
 80072b4:	6003      	str	r3, [r0, #0]
 80072b6:	f04f 0900 	mov.w	r9, #0
 80072ba:	07eb      	lsls	r3, r5, #31
 80072bc:	d50a      	bpl.n	80072d4 <__pow5mult+0x84>
 80072be:	4639      	mov	r1, r7
 80072c0:	4622      	mov	r2, r4
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7ff ff1a 	bl	80070fc <__multiply>
 80072c8:	4639      	mov	r1, r7
 80072ca:	4680      	mov	r8, r0
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff fdfd 	bl	8006ecc <_Bfree>
 80072d2:	4647      	mov	r7, r8
 80072d4:	106d      	asrs	r5, r5, #1
 80072d6:	d00b      	beq.n	80072f0 <__pow5mult+0xa0>
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	b938      	cbnz	r0, 80072ec <__pow5mult+0x9c>
 80072dc:	4622      	mov	r2, r4
 80072de:	4621      	mov	r1, r4
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7ff ff0b 	bl	80070fc <__multiply>
 80072e6:	6020      	str	r0, [r4, #0]
 80072e8:	f8c0 9000 	str.w	r9, [r0]
 80072ec:	4604      	mov	r4, r0
 80072ee:	e7e4      	b.n	80072ba <__pow5mult+0x6a>
 80072f0:	4638      	mov	r0, r7
 80072f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f6:	bf00      	nop
 80072f8:	080084b0 	.word	0x080084b0
 80072fc:	080081fe 	.word	0x080081fe
 8007300:	08008360 	.word	0x08008360

08007304 <__lshift>:
 8007304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007308:	460c      	mov	r4, r1
 800730a:	6849      	ldr	r1, [r1, #4]
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007312:	68a3      	ldr	r3, [r4, #8]
 8007314:	4607      	mov	r7, r0
 8007316:	4691      	mov	r9, r2
 8007318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800731c:	f108 0601 	add.w	r6, r8, #1
 8007320:	42b3      	cmp	r3, r6
 8007322:	db0b      	blt.n	800733c <__lshift+0x38>
 8007324:	4638      	mov	r0, r7
 8007326:	f7ff fd91 	bl	8006e4c <_Balloc>
 800732a:	4605      	mov	r5, r0
 800732c:	b948      	cbnz	r0, 8007342 <__lshift+0x3e>
 800732e:	4602      	mov	r2, r0
 8007330:	4b2a      	ldr	r3, [pc, #168]	; (80073dc <__lshift+0xd8>)
 8007332:	482b      	ldr	r0, [pc, #172]	; (80073e0 <__lshift+0xdc>)
 8007334:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007338:	f7fc fa6c 	bl	8003814 <__assert_func>
 800733c:	3101      	adds	r1, #1
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	e7ee      	b.n	8007320 <__lshift+0x1c>
 8007342:	2300      	movs	r3, #0
 8007344:	f100 0114 	add.w	r1, r0, #20
 8007348:	f100 0210 	add.w	r2, r0, #16
 800734c:	4618      	mov	r0, r3
 800734e:	4553      	cmp	r3, sl
 8007350:	db37      	blt.n	80073c2 <__lshift+0xbe>
 8007352:	6920      	ldr	r0, [r4, #16]
 8007354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007358:	f104 0314 	add.w	r3, r4, #20
 800735c:	f019 091f 	ands.w	r9, r9, #31
 8007360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007364:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007368:	d02f      	beq.n	80073ca <__lshift+0xc6>
 800736a:	f1c9 0e20 	rsb	lr, r9, #32
 800736e:	468a      	mov	sl, r1
 8007370:	f04f 0c00 	mov.w	ip, #0
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	fa02 f209 	lsl.w	r2, r2, r9
 800737a:	ea42 020c 	orr.w	r2, r2, ip
 800737e:	f84a 2b04 	str.w	r2, [sl], #4
 8007382:	f853 2b04 	ldr.w	r2, [r3], #4
 8007386:	4298      	cmp	r0, r3
 8007388:	fa22 fc0e 	lsr.w	ip, r2, lr
 800738c:	d8f2      	bhi.n	8007374 <__lshift+0x70>
 800738e:	1b03      	subs	r3, r0, r4
 8007390:	3b15      	subs	r3, #21
 8007392:	f023 0303 	bic.w	r3, r3, #3
 8007396:	3304      	adds	r3, #4
 8007398:	f104 0215 	add.w	r2, r4, #21
 800739c:	4290      	cmp	r0, r2
 800739e:	bf38      	it	cc
 80073a0:	2304      	movcc	r3, #4
 80073a2:	f841 c003 	str.w	ip, [r1, r3]
 80073a6:	f1bc 0f00 	cmp.w	ip, #0
 80073aa:	d001      	beq.n	80073b0 <__lshift+0xac>
 80073ac:	f108 0602 	add.w	r6, r8, #2
 80073b0:	3e01      	subs	r6, #1
 80073b2:	4638      	mov	r0, r7
 80073b4:	612e      	str	r6, [r5, #16]
 80073b6:	4621      	mov	r1, r4
 80073b8:	f7ff fd88 	bl	8006ecc <_Bfree>
 80073bc:	4628      	mov	r0, r5
 80073be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80073c6:	3301      	adds	r3, #1
 80073c8:	e7c1      	b.n	800734e <__lshift+0x4a>
 80073ca:	3904      	subs	r1, #4
 80073cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80073d4:	4298      	cmp	r0, r3
 80073d6:	d8f9      	bhi.n	80073cc <__lshift+0xc8>
 80073d8:	e7ea      	b.n	80073b0 <__lshift+0xac>
 80073da:	bf00      	nop
 80073dc:	08008270 	.word	0x08008270
 80073e0:	08008360 	.word	0x08008360

080073e4 <__mcmp>:
 80073e4:	b530      	push	{r4, r5, lr}
 80073e6:	6902      	ldr	r2, [r0, #16]
 80073e8:	690c      	ldr	r4, [r1, #16]
 80073ea:	1b12      	subs	r2, r2, r4
 80073ec:	d10e      	bne.n	800740c <__mcmp+0x28>
 80073ee:	f100 0314 	add.w	r3, r0, #20
 80073f2:	3114      	adds	r1, #20
 80073f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80073f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80073fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007400:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007404:	42a5      	cmp	r5, r4
 8007406:	d003      	beq.n	8007410 <__mcmp+0x2c>
 8007408:	d305      	bcc.n	8007416 <__mcmp+0x32>
 800740a:	2201      	movs	r2, #1
 800740c:	4610      	mov	r0, r2
 800740e:	bd30      	pop	{r4, r5, pc}
 8007410:	4283      	cmp	r3, r0
 8007412:	d3f3      	bcc.n	80073fc <__mcmp+0x18>
 8007414:	e7fa      	b.n	800740c <__mcmp+0x28>
 8007416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800741a:	e7f7      	b.n	800740c <__mcmp+0x28>

0800741c <__mdiff>:
 800741c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	460c      	mov	r4, r1
 8007422:	4606      	mov	r6, r0
 8007424:	4611      	mov	r1, r2
 8007426:	4620      	mov	r0, r4
 8007428:	4690      	mov	r8, r2
 800742a:	f7ff ffdb 	bl	80073e4 <__mcmp>
 800742e:	1e05      	subs	r5, r0, #0
 8007430:	d110      	bne.n	8007454 <__mdiff+0x38>
 8007432:	4629      	mov	r1, r5
 8007434:	4630      	mov	r0, r6
 8007436:	f7ff fd09 	bl	8006e4c <_Balloc>
 800743a:	b930      	cbnz	r0, 800744a <__mdiff+0x2e>
 800743c:	4b3a      	ldr	r3, [pc, #232]	; (8007528 <__mdiff+0x10c>)
 800743e:	4602      	mov	r2, r0
 8007440:	f240 2132 	movw	r1, #562	; 0x232
 8007444:	4839      	ldr	r0, [pc, #228]	; (800752c <__mdiff+0x110>)
 8007446:	f7fc f9e5 	bl	8003814 <__assert_func>
 800744a:	2301      	movs	r3, #1
 800744c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007454:	bfa4      	itt	ge
 8007456:	4643      	movge	r3, r8
 8007458:	46a0      	movge	r8, r4
 800745a:	4630      	mov	r0, r6
 800745c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007460:	bfa6      	itte	ge
 8007462:	461c      	movge	r4, r3
 8007464:	2500      	movge	r5, #0
 8007466:	2501      	movlt	r5, #1
 8007468:	f7ff fcf0 	bl	8006e4c <_Balloc>
 800746c:	b920      	cbnz	r0, 8007478 <__mdiff+0x5c>
 800746e:	4b2e      	ldr	r3, [pc, #184]	; (8007528 <__mdiff+0x10c>)
 8007470:	4602      	mov	r2, r0
 8007472:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007476:	e7e5      	b.n	8007444 <__mdiff+0x28>
 8007478:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800747c:	6926      	ldr	r6, [r4, #16]
 800747e:	60c5      	str	r5, [r0, #12]
 8007480:	f104 0914 	add.w	r9, r4, #20
 8007484:	f108 0514 	add.w	r5, r8, #20
 8007488:	f100 0e14 	add.w	lr, r0, #20
 800748c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007490:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007494:	f108 0210 	add.w	r2, r8, #16
 8007498:	46f2      	mov	sl, lr
 800749a:	2100      	movs	r1, #0
 800749c:	f859 3b04 	ldr.w	r3, [r9], #4
 80074a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074a4:	fa1f f883 	uxth.w	r8, r3
 80074a8:	fa11 f18b 	uxtah	r1, r1, fp
 80074ac:	0c1b      	lsrs	r3, r3, #16
 80074ae:	eba1 0808 	sub.w	r8, r1, r8
 80074b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80074ba:	fa1f f888 	uxth.w	r8, r8
 80074be:	1419      	asrs	r1, r3, #16
 80074c0:	454e      	cmp	r6, r9
 80074c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074c6:	f84a 3b04 	str.w	r3, [sl], #4
 80074ca:	d8e7      	bhi.n	800749c <__mdiff+0x80>
 80074cc:	1b33      	subs	r3, r6, r4
 80074ce:	3b15      	subs	r3, #21
 80074d0:	f023 0303 	bic.w	r3, r3, #3
 80074d4:	3304      	adds	r3, #4
 80074d6:	3415      	adds	r4, #21
 80074d8:	42a6      	cmp	r6, r4
 80074da:	bf38      	it	cc
 80074dc:	2304      	movcc	r3, #4
 80074de:	441d      	add	r5, r3
 80074e0:	4473      	add	r3, lr
 80074e2:	469e      	mov	lr, r3
 80074e4:	462e      	mov	r6, r5
 80074e6:	4566      	cmp	r6, ip
 80074e8:	d30e      	bcc.n	8007508 <__mdiff+0xec>
 80074ea:	f10c 0203 	add.w	r2, ip, #3
 80074ee:	1b52      	subs	r2, r2, r5
 80074f0:	f022 0203 	bic.w	r2, r2, #3
 80074f4:	3d03      	subs	r5, #3
 80074f6:	45ac      	cmp	ip, r5
 80074f8:	bf38      	it	cc
 80074fa:	2200      	movcc	r2, #0
 80074fc:	441a      	add	r2, r3
 80074fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007502:	b17b      	cbz	r3, 8007524 <__mdiff+0x108>
 8007504:	6107      	str	r7, [r0, #16]
 8007506:	e7a3      	b.n	8007450 <__mdiff+0x34>
 8007508:	f856 8b04 	ldr.w	r8, [r6], #4
 800750c:	fa11 f288 	uxtah	r2, r1, r8
 8007510:	1414      	asrs	r4, r2, #16
 8007512:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007516:	b292      	uxth	r2, r2
 8007518:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800751c:	f84e 2b04 	str.w	r2, [lr], #4
 8007520:	1421      	asrs	r1, r4, #16
 8007522:	e7e0      	b.n	80074e6 <__mdiff+0xca>
 8007524:	3f01      	subs	r7, #1
 8007526:	e7ea      	b.n	80074fe <__mdiff+0xe2>
 8007528:	08008270 	.word	0x08008270
 800752c:	08008360 	.word	0x08008360

08007530 <__ulp>:
 8007530:	b082      	sub	sp, #8
 8007532:	ed8d 0b00 	vstr	d0, [sp]
 8007536:	9b01      	ldr	r3, [sp, #4]
 8007538:	4912      	ldr	r1, [pc, #72]	; (8007584 <__ulp+0x54>)
 800753a:	4019      	ands	r1, r3
 800753c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007540:	2900      	cmp	r1, #0
 8007542:	dd05      	ble.n	8007550 <__ulp+0x20>
 8007544:	2200      	movs	r2, #0
 8007546:	460b      	mov	r3, r1
 8007548:	ec43 2b10 	vmov	d0, r2, r3
 800754c:	b002      	add	sp, #8
 800754e:	4770      	bx	lr
 8007550:	4249      	negs	r1, r1
 8007552:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007556:	ea4f 5021 	mov.w	r0, r1, asr #20
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	f04f 0300 	mov.w	r3, #0
 8007562:	da04      	bge.n	800756e <__ulp+0x3e>
 8007564:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007568:	fa41 f300 	asr.w	r3, r1, r0
 800756c:	e7ec      	b.n	8007548 <__ulp+0x18>
 800756e:	f1a0 0114 	sub.w	r1, r0, #20
 8007572:	291e      	cmp	r1, #30
 8007574:	bfda      	itte	le
 8007576:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800757a:	fa20 f101 	lsrle.w	r1, r0, r1
 800757e:	2101      	movgt	r1, #1
 8007580:	460a      	mov	r2, r1
 8007582:	e7e1      	b.n	8007548 <__ulp+0x18>
 8007584:	7ff00000 	.word	0x7ff00000

08007588 <__b2d>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	6905      	ldr	r5, [r0, #16]
 800758c:	f100 0714 	add.w	r7, r0, #20
 8007590:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007594:	1f2e      	subs	r6, r5, #4
 8007596:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800759a:	4620      	mov	r0, r4
 800759c:	f7ff fd48 	bl	8007030 <__hi0bits>
 80075a0:	f1c0 0320 	rsb	r3, r0, #32
 80075a4:	280a      	cmp	r0, #10
 80075a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007624 <__b2d+0x9c>
 80075aa:	600b      	str	r3, [r1, #0]
 80075ac:	dc14      	bgt.n	80075d8 <__b2d+0x50>
 80075ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80075b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80075b6:	42b7      	cmp	r7, r6
 80075b8:	ea41 030c 	orr.w	r3, r1, ip
 80075bc:	bf34      	ite	cc
 80075be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80075c2:	2100      	movcs	r1, #0
 80075c4:	3015      	adds	r0, #21
 80075c6:	fa04 f000 	lsl.w	r0, r4, r0
 80075ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80075ce:	ea40 0201 	orr.w	r2, r0, r1
 80075d2:	ec43 2b10 	vmov	d0, r2, r3
 80075d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d8:	42b7      	cmp	r7, r6
 80075da:	bf3a      	itte	cc
 80075dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80075e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80075e4:	2100      	movcs	r1, #0
 80075e6:	380b      	subs	r0, #11
 80075e8:	d017      	beq.n	800761a <__b2d+0x92>
 80075ea:	f1c0 0c20 	rsb	ip, r0, #32
 80075ee:	fa04 f500 	lsl.w	r5, r4, r0
 80075f2:	42be      	cmp	r6, r7
 80075f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80075f8:	ea45 0504 	orr.w	r5, r5, r4
 80075fc:	bf8c      	ite	hi
 80075fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007602:	2400      	movls	r4, #0
 8007604:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007608:	fa01 f000 	lsl.w	r0, r1, r0
 800760c:	fa24 f40c 	lsr.w	r4, r4, ip
 8007610:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007614:	ea40 0204 	orr.w	r2, r0, r4
 8007618:	e7db      	b.n	80075d2 <__b2d+0x4a>
 800761a:	ea44 030c 	orr.w	r3, r4, ip
 800761e:	460a      	mov	r2, r1
 8007620:	e7d7      	b.n	80075d2 <__b2d+0x4a>
 8007622:	bf00      	nop
 8007624:	3ff00000 	.word	0x3ff00000

08007628 <__d2b>:
 8007628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800762c:	4689      	mov	r9, r1
 800762e:	2101      	movs	r1, #1
 8007630:	ec57 6b10 	vmov	r6, r7, d0
 8007634:	4690      	mov	r8, r2
 8007636:	f7ff fc09 	bl	8006e4c <_Balloc>
 800763a:	4604      	mov	r4, r0
 800763c:	b930      	cbnz	r0, 800764c <__d2b+0x24>
 800763e:	4602      	mov	r2, r0
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <__d2b+0xb0>)
 8007642:	4826      	ldr	r0, [pc, #152]	; (80076dc <__d2b+0xb4>)
 8007644:	f240 310a 	movw	r1, #778	; 0x30a
 8007648:	f7fc f8e4 	bl	8003814 <__assert_func>
 800764c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007650:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007654:	bb35      	cbnz	r5, 80076a4 <__d2b+0x7c>
 8007656:	2e00      	cmp	r6, #0
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	d028      	beq.n	80076ae <__d2b+0x86>
 800765c:	4668      	mov	r0, sp
 800765e:	9600      	str	r6, [sp, #0]
 8007660:	f7ff fd06 	bl	8007070 <__lo0bits>
 8007664:	9900      	ldr	r1, [sp, #0]
 8007666:	b300      	cbz	r0, 80076aa <__d2b+0x82>
 8007668:	9a01      	ldr	r2, [sp, #4]
 800766a:	f1c0 0320 	rsb	r3, r0, #32
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	430b      	orrs	r3, r1
 8007674:	40c2      	lsrs	r2, r0
 8007676:	6163      	str	r3, [r4, #20]
 8007678:	9201      	str	r2, [sp, #4]
 800767a:	9b01      	ldr	r3, [sp, #4]
 800767c:	61a3      	str	r3, [r4, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	bf14      	ite	ne
 8007682:	2202      	movne	r2, #2
 8007684:	2201      	moveq	r2, #1
 8007686:	6122      	str	r2, [r4, #16]
 8007688:	b1d5      	cbz	r5, 80076c0 <__d2b+0x98>
 800768a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800768e:	4405      	add	r5, r0
 8007690:	f8c9 5000 	str.w	r5, [r9]
 8007694:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007698:	f8c8 0000 	str.w	r0, [r8]
 800769c:	4620      	mov	r0, r4
 800769e:	b003      	add	sp, #12
 80076a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076a8:	e7d5      	b.n	8007656 <__d2b+0x2e>
 80076aa:	6161      	str	r1, [r4, #20]
 80076ac:	e7e5      	b.n	800767a <__d2b+0x52>
 80076ae:	a801      	add	r0, sp, #4
 80076b0:	f7ff fcde 	bl	8007070 <__lo0bits>
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	6163      	str	r3, [r4, #20]
 80076b8:	2201      	movs	r2, #1
 80076ba:	6122      	str	r2, [r4, #16]
 80076bc:	3020      	adds	r0, #32
 80076be:	e7e3      	b.n	8007688 <__d2b+0x60>
 80076c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076c8:	f8c9 0000 	str.w	r0, [r9]
 80076cc:	6918      	ldr	r0, [r3, #16]
 80076ce:	f7ff fcaf 	bl	8007030 <__hi0bits>
 80076d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076d6:	e7df      	b.n	8007698 <__d2b+0x70>
 80076d8:	08008270 	.word	0x08008270
 80076dc:	08008360 	.word	0x08008360

080076e0 <__ratio>:
 80076e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	4688      	mov	r8, r1
 80076e6:	4669      	mov	r1, sp
 80076e8:	4681      	mov	r9, r0
 80076ea:	f7ff ff4d 	bl	8007588 <__b2d>
 80076ee:	a901      	add	r1, sp, #4
 80076f0:	4640      	mov	r0, r8
 80076f2:	ec55 4b10 	vmov	r4, r5, d0
 80076f6:	ee10 aa10 	vmov	sl, s0
 80076fa:	f7ff ff45 	bl	8007588 <__b2d>
 80076fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007702:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8007706:	1a59      	subs	r1, r3, r1
 8007708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007712:	ec57 6b10 	vmov	r6, r7, d0
 8007716:	2b00      	cmp	r3, #0
 8007718:	bfd6      	itet	le
 800771a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800771e:	462a      	movgt	r2, r5
 8007720:	463a      	movle	r2, r7
 8007722:	46ab      	mov	fp, r5
 8007724:	bfd6      	itet	le
 8007726:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800772a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800772e:	ee00 3a90 	vmovle	s1, r3
 8007732:	ec4b ab17 	vmov	d7, sl, fp
 8007736:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800773a:	b003      	add	sp, #12
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007740 <__copybits>:
 8007740:	3901      	subs	r1, #1
 8007742:	b570      	push	{r4, r5, r6, lr}
 8007744:	1149      	asrs	r1, r1, #5
 8007746:	6914      	ldr	r4, [r2, #16]
 8007748:	3101      	adds	r1, #1
 800774a:	f102 0314 	add.w	r3, r2, #20
 800774e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007752:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007756:	1f05      	subs	r5, r0, #4
 8007758:	42a3      	cmp	r3, r4
 800775a:	d30c      	bcc.n	8007776 <__copybits+0x36>
 800775c:	1aa3      	subs	r3, r4, r2
 800775e:	3b11      	subs	r3, #17
 8007760:	f023 0303 	bic.w	r3, r3, #3
 8007764:	3211      	adds	r2, #17
 8007766:	42a2      	cmp	r2, r4
 8007768:	bf88      	it	hi
 800776a:	2300      	movhi	r3, #0
 800776c:	4418      	add	r0, r3
 800776e:	2300      	movs	r3, #0
 8007770:	4288      	cmp	r0, r1
 8007772:	d305      	bcc.n	8007780 <__copybits+0x40>
 8007774:	bd70      	pop	{r4, r5, r6, pc}
 8007776:	f853 6b04 	ldr.w	r6, [r3], #4
 800777a:	f845 6f04 	str.w	r6, [r5, #4]!
 800777e:	e7eb      	b.n	8007758 <__copybits+0x18>
 8007780:	f840 3b04 	str.w	r3, [r0], #4
 8007784:	e7f4      	b.n	8007770 <__copybits+0x30>

08007786 <__any_on>:
 8007786:	f100 0214 	add.w	r2, r0, #20
 800778a:	6900      	ldr	r0, [r0, #16]
 800778c:	114b      	asrs	r3, r1, #5
 800778e:	4298      	cmp	r0, r3
 8007790:	b510      	push	{r4, lr}
 8007792:	db11      	blt.n	80077b8 <__any_on+0x32>
 8007794:	dd0a      	ble.n	80077ac <__any_on+0x26>
 8007796:	f011 011f 	ands.w	r1, r1, #31
 800779a:	d007      	beq.n	80077ac <__any_on+0x26>
 800779c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80077a0:	fa24 f001 	lsr.w	r0, r4, r1
 80077a4:	fa00 f101 	lsl.w	r1, r0, r1
 80077a8:	428c      	cmp	r4, r1
 80077aa:	d10b      	bne.n	80077c4 <__any_on+0x3e>
 80077ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d803      	bhi.n	80077bc <__any_on+0x36>
 80077b4:	2000      	movs	r0, #0
 80077b6:	bd10      	pop	{r4, pc}
 80077b8:	4603      	mov	r3, r0
 80077ba:	e7f7      	b.n	80077ac <__any_on+0x26>
 80077bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077c0:	2900      	cmp	r1, #0
 80077c2:	d0f5      	beq.n	80077b0 <__any_on+0x2a>
 80077c4:	2001      	movs	r0, #1
 80077c6:	e7f6      	b.n	80077b6 <__any_on+0x30>

080077c8 <_calloc_r>:
 80077c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ca:	fba1 2402 	umull	r2, r4, r1, r2
 80077ce:	b94c      	cbnz	r4, 80077e4 <_calloc_r+0x1c>
 80077d0:	4611      	mov	r1, r2
 80077d2:	9201      	str	r2, [sp, #4]
 80077d4:	f000 f87a 	bl	80078cc <_malloc_r>
 80077d8:	9a01      	ldr	r2, [sp, #4]
 80077da:	4605      	mov	r5, r0
 80077dc:	b930      	cbnz	r0, 80077ec <_calloc_r+0x24>
 80077de:	4628      	mov	r0, r5
 80077e0:	b003      	add	sp, #12
 80077e2:	bd30      	pop	{r4, r5, pc}
 80077e4:	220c      	movs	r2, #12
 80077e6:	6002      	str	r2, [r0, #0]
 80077e8:	2500      	movs	r5, #0
 80077ea:	e7f8      	b.n	80077de <_calloc_r+0x16>
 80077ec:	4621      	mov	r1, r4
 80077ee:	f7fc f86b 	bl	80038c8 <memset>
 80077f2:	e7f4      	b.n	80077de <_calloc_r+0x16>

080077f4 <_free_r>:
 80077f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077f6:	2900      	cmp	r1, #0
 80077f8:	d044      	beq.n	8007884 <_free_r+0x90>
 80077fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077fe:	9001      	str	r0, [sp, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f1a1 0404 	sub.w	r4, r1, #4
 8007806:	bfb8      	it	lt
 8007808:	18e4      	addlt	r4, r4, r3
 800780a:	f000 fb73 	bl	8007ef4 <__malloc_lock>
 800780e:	4a1e      	ldr	r2, [pc, #120]	; (8007888 <_free_r+0x94>)
 8007810:	9801      	ldr	r0, [sp, #4]
 8007812:	6813      	ldr	r3, [r2, #0]
 8007814:	b933      	cbnz	r3, 8007824 <_free_r+0x30>
 8007816:	6063      	str	r3, [r4, #4]
 8007818:	6014      	str	r4, [r2, #0]
 800781a:	b003      	add	sp, #12
 800781c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007820:	f000 bb6e 	b.w	8007f00 <__malloc_unlock>
 8007824:	42a3      	cmp	r3, r4
 8007826:	d908      	bls.n	800783a <_free_r+0x46>
 8007828:	6825      	ldr	r5, [r4, #0]
 800782a:	1961      	adds	r1, r4, r5
 800782c:	428b      	cmp	r3, r1
 800782e:	bf01      	itttt	eq
 8007830:	6819      	ldreq	r1, [r3, #0]
 8007832:	685b      	ldreq	r3, [r3, #4]
 8007834:	1949      	addeq	r1, r1, r5
 8007836:	6021      	streq	r1, [r4, #0]
 8007838:	e7ed      	b.n	8007816 <_free_r+0x22>
 800783a:	461a      	mov	r2, r3
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	b10b      	cbz	r3, 8007844 <_free_r+0x50>
 8007840:	42a3      	cmp	r3, r4
 8007842:	d9fa      	bls.n	800783a <_free_r+0x46>
 8007844:	6811      	ldr	r1, [r2, #0]
 8007846:	1855      	adds	r5, r2, r1
 8007848:	42a5      	cmp	r5, r4
 800784a:	d10b      	bne.n	8007864 <_free_r+0x70>
 800784c:	6824      	ldr	r4, [r4, #0]
 800784e:	4421      	add	r1, r4
 8007850:	1854      	adds	r4, r2, r1
 8007852:	42a3      	cmp	r3, r4
 8007854:	6011      	str	r1, [r2, #0]
 8007856:	d1e0      	bne.n	800781a <_free_r+0x26>
 8007858:	681c      	ldr	r4, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	6053      	str	r3, [r2, #4]
 800785e:	4421      	add	r1, r4
 8007860:	6011      	str	r1, [r2, #0]
 8007862:	e7da      	b.n	800781a <_free_r+0x26>
 8007864:	d902      	bls.n	800786c <_free_r+0x78>
 8007866:	230c      	movs	r3, #12
 8007868:	6003      	str	r3, [r0, #0]
 800786a:	e7d6      	b.n	800781a <_free_r+0x26>
 800786c:	6825      	ldr	r5, [r4, #0]
 800786e:	1961      	adds	r1, r4, r5
 8007870:	428b      	cmp	r3, r1
 8007872:	bf04      	itt	eq
 8007874:	6819      	ldreq	r1, [r3, #0]
 8007876:	685b      	ldreq	r3, [r3, #4]
 8007878:	6063      	str	r3, [r4, #4]
 800787a:	bf04      	itt	eq
 800787c:	1949      	addeq	r1, r1, r5
 800787e:	6021      	streq	r1, [r4, #0]
 8007880:	6054      	str	r4, [r2, #4]
 8007882:	e7ca      	b.n	800781a <_free_r+0x26>
 8007884:	b003      	add	sp, #12
 8007886:	bd30      	pop	{r4, r5, pc}
 8007888:	200002b0 	.word	0x200002b0

0800788c <sbrk_aligned>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	4e0e      	ldr	r6, [pc, #56]	; (80078c8 <sbrk_aligned+0x3c>)
 8007890:	460c      	mov	r4, r1
 8007892:	6831      	ldr	r1, [r6, #0]
 8007894:	4605      	mov	r5, r0
 8007896:	b911      	cbnz	r1, 800789e <sbrk_aligned+0x12>
 8007898:	f000 fa1e 	bl	8007cd8 <_sbrk_r>
 800789c:	6030      	str	r0, [r6, #0]
 800789e:	4621      	mov	r1, r4
 80078a0:	4628      	mov	r0, r5
 80078a2:	f000 fa19 	bl	8007cd8 <_sbrk_r>
 80078a6:	1c43      	adds	r3, r0, #1
 80078a8:	d00a      	beq.n	80078c0 <sbrk_aligned+0x34>
 80078aa:	1cc4      	adds	r4, r0, #3
 80078ac:	f024 0403 	bic.w	r4, r4, #3
 80078b0:	42a0      	cmp	r0, r4
 80078b2:	d007      	beq.n	80078c4 <sbrk_aligned+0x38>
 80078b4:	1a21      	subs	r1, r4, r0
 80078b6:	4628      	mov	r0, r5
 80078b8:	f000 fa0e 	bl	8007cd8 <_sbrk_r>
 80078bc:	3001      	adds	r0, #1
 80078be:	d101      	bne.n	80078c4 <sbrk_aligned+0x38>
 80078c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80078c4:	4620      	mov	r0, r4
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	200002b4 	.word	0x200002b4

080078cc <_malloc_r>:
 80078cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d0:	1ccd      	adds	r5, r1, #3
 80078d2:	f025 0503 	bic.w	r5, r5, #3
 80078d6:	3508      	adds	r5, #8
 80078d8:	2d0c      	cmp	r5, #12
 80078da:	bf38      	it	cc
 80078dc:	250c      	movcc	r5, #12
 80078de:	2d00      	cmp	r5, #0
 80078e0:	4607      	mov	r7, r0
 80078e2:	db01      	blt.n	80078e8 <_malloc_r+0x1c>
 80078e4:	42a9      	cmp	r1, r5
 80078e6:	d905      	bls.n	80078f4 <_malloc_r+0x28>
 80078e8:	230c      	movs	r3, #12
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	2600      	movs	r6, #0
 80078ee:	4630      	mov	r0, r6
 80078f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f4:	4e2e      	ldr	r6, [pc, #184]	; (80079b0 <_malloc_r+0xe4>)
 80078f6:	f000 fafd 	bl	8007ef4 <__malloc_lock>
 80078fa:	6833      	ldr	r3, [r6, #0]
 80078fc:	461c      	mov	r4, r3
 80078fe:	bb34      	cbnz	r4, 800794e <_malloc_r+0x82>
 8007900:	4629      	mov	r1, r5
 8007902:	4638      	mov	r0, r7
 8007904:	f7ff ffc2 	bl	800788c <sbrk_aligned>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	4604      	mov	r4, r0
 800790c:	d14d      	bne.n	80079aa <_malloc_r+0xde>
 800790e:	6834      	ldr	r4, [r6, #0]
 8007910:	4626      	mov	r6, r4
 8007912:	2e00      	cmp	r6, #0
 8007914:	d140      	bne.n	8007998 <_malloc_r+0xcc>
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	4631      	mov	r1, r6
 800791a:	4638      	mov	r0, r7
 800791c:	eb04 0803 	add.w	r8, r4, r3
 8007920:	f000 f9da 	bl	8007cd8 <_sbrk_r>
 8007924:	4580      	cmp	r8, r0
 8007926:	d13a      	bne.n	800799e <_malloc_r+0xd2>
 8007928:	6821      	ldr	r1, [r4, #0]
 800792a:	3503      	adds	r5, #3
 800792c:	1a6d      	subs	r5, r5, r1
 800792e:	f025 0503 	bic.w	r5, r5, #3
 8007932:	3508      	adds	r5, #8
 8007934:	2d0c      	cmp	r5, #12
 8007936:	bf38      	it	cc
 8007938:	250c      	movcc	r5, #12
 800793a:	4629      	mov	r1, r5
 800793c:	4638      	mov	r0, r7
 800793e:	f7ff ffa5 	bl	800788c <sbrk_aligned>
 8007942:	3001      	adds	r0, #1
 8007944:	d02b      	beq.n	800799e <_malloc_r+0xd2>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	442b      	add	r3, r5
 800794a:	6023      	str	r3, [r4, #0]
 800794c:	e00e      	b.n	800796c <_malloc_r+0xa0>
 800794e:	6822      	ldr	r2, [r4, #0]
 8007950:	1b52      	subs	r2, r2, r5
 8007952:	d41e      	bmi.n	8007992 <_malloc_r+0xc6>
 8007954:	2a0b      	cmp	r2, #11
 8007956:	d916      	bls.n	8007986 <_malloc_r+0xba>
 8007958:	1961      	adds	r1, r4, r5
 800795a:	42a3      	cmp	r3, r4
 800795c:	6025      	str	r5, [r4, #0]
 800795e:	bf18      	it	ne
 8007960:	6059      	strne	r1, [r3, #4]
 8007962:	6863      	ldr	r3, [r4, #4]
 8007964:	bf08      	it	eq
 8007966:	6031      	streq	r1, [r6, #0]
 8007968:	5162      	str	r2, [r4, r5]
 800796a:	604b      	str	r3, [r1, #4]
 800796c:	4638      	mov	r0, r7
 800796e:	f104 060b 	add.w	r6, r4, #11
 8007972:	f000 fac5 	bl	8007f00 <__malloc_unlock>
 8007976:	f026 0607 	bic.w	r6, r6, #7
 800797a:	1d23      	adds	r3, r4, #4
 800797c:	1af2      	subs	r2, r6, r3
 800797e:	d0b6      	beq.n	80078ee <_malloc_r+0x22>
 8007980:	1b9b      	subs	r3, r3, r6
 8007982:	50a3      	str	r3, [r4, r2]
 8007984:	e7b3      	b.n	80078ee <_malloc_r+0x22>
 8007986:	6862      	ldr	r2, [r4, #4]
 8007988:	42a3      	cmp	r3, r4
 800798a:	bf0c      	ite	eq
 800798c:	6032      	streq	r2, [r6, #0]
 800798e:	605a      	strne	r2, [r3, #4]
 8007990:	e7ec      	b.n	800796c <_malloc_r+0xa0>
 8007992:	4623      	mov	r3, r4
 8007994:	6864      	ldr	r4, [r4, #4]
 8007996:	e7b2      	b.n	80078fe <_malloc_r+0x32>
 8007998:	4634      	mov	r4, r6
 800799a:	6876      	ldr	r6, [r6, #4]
 800799c:	e7b9      	b.n	8007912 <_malloc_r+0x46>
 800799e:	230c      	movs	r3, #12
 80079a0:	603b      	str	r3, [r7, #0]
 80079a2:	4638      	mov	r0, r7
 80079a4:	f000 faac 	bl	8007f00 <__malloc_unlock>
 80079a8:	e7a1      	b.n	80078ee <_malloc_r+0x22>
 80079aa:	6025      	str	r5, [r4, #0]
 80079ac:	e7de      	b.n	800796c <_malloc_r+0xa0>
 80079ae:	bf00      	nop
 80079b0:	200002b0 	.word	0x200002b0

080079b4 <_realloc_r>:
 80079b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b8:	4680      	mov	r8, r0
 80079ba:	4614      	mov	r4, r2
 80079bc:	460e      	mov	r6, r1
 80079be:	b921      	cbnz	r1, 80079ca <_realloc_r+0x16>
 80079c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c4:	4611      	mov	r1, r2
 80079c6:	f7ff bf81 	b.w	80078cc <_malloc_r>
 80079ca:	b92a      	cbnz	r2, 80079d8 <_realloc_r+0x24>
 80079cc:	f7ff ff12 	bl	80077f4 <_free_r>
 80079d0:	4625      	mov	r5, r4
 80079d2:	4628      	mov	r0, r5
 80079d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d8:	f000 fa98 	bl	8007f0c <_malloc_usable_size_r>
 80079dc:	4284      	cmp	r4, r0
 80079de:	4607      	mov	r7, r0
 80079e0:	d802      	bhi.n	80079e8 <_realloc_r+0x34>
 80079e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079e6:	d812      	bhi.n	8007a0e <_realloc_r+0x5a>
 80079e8:	4621      	mov	r1, r4
 80079ea:	4640      	mov	r0, r8
 80079ec:	f7ff ff6e 	bl	80078cc <_malloc_r>
 80079f0:	4605      	mov	r5, r0
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d0ed      	beq.n	80079d2 <_realloc_r+0x1e>
 80079f6:	42bc      	cmp	r4, r7
 80079f8:	4622      	mov	r2, r4
 80079fa:	4631      	mov	r1, r6
 80079fc:	bf28      	it	cs
 80079fe:	463a      	movcs	r2, r7
 8007a00:	f7ff f9fc 	bl	8006dfc <memcpy>
 8007a04:	4631      	mov	r1, r6
 8007a06:	4640      	mov	r0, r8
 8007a08:	f7ff fef4 	bl	80077f4 <_free_r>
 8007a0c:	e7e1      	b.n	80079d2 <_realloc_r+0x1e>
 8007a0e:	4635      	mov	r5, r6
 8007a10:	e7df      	b.n	80079d2 <_realloc_r+0x1e>

08007a12 <__ssputs_r>:
 8007a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a16:	688e      	ldr	r6, [r1, #8]
 8007a18:	429e      	cmp	r6, r3
 8007a1a:	4682      	mov	sl, r0
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	4690      	mov	r8, r2
 8007a20:	461f      	mov	r7, r3
 8007a22:	d838      	bhi.n	8007a96 <__ssputs_r+0x84>
 8007a24:	898a      	ldrh	r2, [r1, #12]
 8007a26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a2a:	d032      	beq.n	8007a92 <__ssputs_r+0x80>
 8007a2c:	6825      	ldr	r5, [r4, #0]
 8007a2e:	6909      	ldr	r1, [r1, #16]
 8007a30:	eba5 0901 	sub.w	r9, r5, r1
 8007a34:	6965      	ldr	r5, [r4, #20]
 8007a36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a3e:	3301      	adds	r3, #1
 8007a40:	444b      	add	r3, r9
 8007a42:	106d      	asrs	r5, r5, #1
 8007a44:	429d      	cmp	r5, r3
 8007a46:	bf38      	it	cc
 8007a48:	461d      	movcc	r5, r3
 8007a4a:	0553      	lsls	r3, r2, #21
 8007a4c:	d531      	bpl.n	8007ab2 <__ssputs_r+0xa0>
 8007a4e:	4629      	mov	r1, r5
 8007a50:	f7ff ff3c 	bl	80078cc <_malloc_r>
 8007a54:	4606      	mov	r6, r0
 8007a56:	b950      	cbnz	r0, 8007a6e <__ssputs_r+0x5c>
 8007a58:	230c      	movs	r3, #12
 8007a5a:	f8ca 3000 	str.w	r3, [sl]
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a64:	81a3      	strh	r3, [r4, #12]
 8007a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a6e:	6921      	ldr	r1, [r4, #16]
 8007a70:	464a      	mov	r2, r9
 8007a72:	f7ff f9c3 	bl	8006dfc <memcpy>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	6126      	str	r6, [r4, #16]
 8007a84:	6165      	str	r5, [r4, #20]
 8007a86:	444e      	add	r6, r9
 8007a88:	eba5 0509 	sub.w	r5, r5, r9
 8007a8c:	6026      	str	r6, [r4, #0]
 8007a8e:	60a5      	str	r5, [r4, #8]
 8007a90:	463e      	mov	r6, r7
 8007a92:	42be      	cmp	r6, r7
 8007a94:	d900      	bls.n	8007a98 <__ssputs_r+0x86>
 8007a96:	463e      	mov	r6, r7
 8007a98:	6820      	ldr	r0, [r4, #0]
 8007a9a:	4632      	mov	r2, r6
 8007a9c:	4641      	mov	r1, r8
 8007a9e:	f7ff f9bb 	bl	8006e18 <memmove>
 8007aa2:	68a3      	ldr	r3, [r4, #8]
 8007aa4:	1b9b      	subs	r3, r3, r6
 8007aa6:	60a3      	str	r3, [r4, #8]
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	4433      	add	r3, r6
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	2000      	movs	r0, #0
 8007ab0:	e7db      	b.n	8007a6a <__ssputs_r+0x58>
 8007ab2:	462a      	mov	r2, r5
 8007ab4:	f7ff ff7e 	bl	80079b4 <_realloc_r>
 8007ab8:	4606      	mov	r6, r0
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d1e1      	bne.n	8007a82 <__ssputs_r+0x70>
 8007abe:	6921      	ldr	r1, [r4, #16]
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	f7ff fe97 	bl	80077f4 <_free_r>
 8007ac6:	e7c7      	b.n	8007a58 <__ssputs_r+0x46>

08007ac8 <_svfiprintf_r>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	4698      	mov	r8, r3
 8007ace:	898b      	ldrh	r3, [r1, #12]
 8007ad0:	061b      	lsls	r3, r3, #24
 8007ad2:	b09d      	sub	sp, #116	; 0x74
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	460d      	mov	r5, r1
 8007ad8:	4614      	mov	r4, r2
 8007ada:	d50e      	bpl.n	8007afa <_svfiprintf_r+0x32>
 8007adc:	690b      	ldr	r3, [r1, #16]
 8007ade:	b963      	cbnz	r3, 8007afa <_svfiprintf_r+0x32>
 8007ae0:	2140      	movs	r1, #64	; 0x40
 8007ae2:	f7ff fef3 	bl	80078cc <_malloc_r>
 8007ae6:	6028      	str	r0, [r5, #0]
 8007ae8:	6128      	str	r0, [r5, #16]
 8007aea:	b920      	cbnz	r0, 8007af6 <_svfiprintf_r+0x2e>
 8007aec:	230c      	movs	r3, #12
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007af4:	e0d1      	b.n	8007c9a <_svfiprintf_r+0x1d2>
 8007af6:	2340      	movs	r3, #64	; 0x40
 8007af8:	616b      	str	r3, [r5, #20]
 8007afa:	2300      	movs	r3, #0
 8007afc:	9309      	str	r3, [sp, #36]	; 0x24
 8007afe:	2320      	movs	r3, #32
 8007b00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b08:	2330      	movs	r3, #48	; 0x30
 8007b0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007cb4 <_svfiprintf_r+0x1ec>
 8007b0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b12:	f04f 0901 	mov.w	r9, #1
 8007b16:	4623      	mov	r3, r4
 8007b18:	469a      	mov	sl, r3
 8007b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b1e:	b10a      	cbz	r2, 8007b24 <_svfiprintf_r+0x5c>
 8007b20:	2a25      	cmp	r2, #37	; 0x25
 8007b22:	d1f9      	bne.n	8007b18 <_svfiprintf_r+0x50>
 8007b24:	ebba 0b04 	subs.w	fp, sl, r4
 8007b28:	d00b      	beq.n	8007b42 <_svfiprintf_r+0x7a>
 8007b2a:	465b      	mov	r3, fp
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7ff ff6e 	bl	8007a12 <__ssputs_r>
 8007b36:	3001      	adds	r0, #1
 8007b38:	f000 80aa 	beq.w	8007c90 <_svfiprintf_r+0x1c8>
 8007b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b3e:	445a      	add	r2, fp
 8007b40:	9209      	str	r2, [sp, #36]	; 0x24
 8007b42:	f89a 3000 	ldrb.w	r3, [sl]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 80a2 	beq.w	8007c90 <_svfiprintf_r+0x1c8>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b56:	f10a 0a01 	add.w	sl, sl, #1
 8007b5a:	9304      	str	r3, [sp, #16]
 8007b5c:	9307      	str	r3, [sp, #28]
 8007b5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b62:	931a      	str	r3, [sp, #104]	; 0x68
 8007b64:	4654      	mov	r4, sl
 8007b66:	2205      	movs	r2, #5
 8007b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b6c:	4851      	ldr	r0, [pc, #324]	; (8007cb4 <_svfiprintf_r+0x1ec>)
 8007b6e:	f7f8 fb6f 	bl	8000250 <memchr>
 8007b72:	9a04      	ldr	r2, [sp, #16]
 8007b74:	b9d8      	cbnz	r0, 8007bae <_svfiprintf_r+0xe6>
 8007b76:	06d0      	lsls	r0, r2, #27
 8007b78:	bf44      	itt	mi
 8007b7a:	2320      	movmi	r3, #32
 8007b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b80:	0711      	lsls	r1, r2, #28
 8007b82:	bf44      	itt	mi
 8007b84:	232b      	movmi	r3, #43	; 0x2b
 8007b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b90:	d015      	beq.n	8007bbe <_svfiprintf_r+0xf6>
 8007b92:	9a07      	ldr	r2, [sp, #28]
 8007b94:	4654      	mov	r4, sl
 8007b96:	2000      	movs	r0, #0
 8007b98:	f04f 0c0a 	mov.w	ip, #10
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ba2:	3b30      	subs	r3, #48	; 0x30
 8007ba4:	2b09      	cmp	r3, #9
 8007ba6:	d94e      	bls.n	8007c46 <_svfiprintf_r+0x17e>
 8007ba8:	b1b0      	cbz	r0, 8007bd8 <_svfiprintf_r+0x110>
 8007baa:	9207      	str	r2, [sp, #28]
 8007bac:	e014      	b.n	8007bd8 <_svfiprintf_r+0x110>
 8007bae:	eba0 0308 	sub.w	r3, r0, r8
 8007bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	9304      	str	r3, [sp, #16]
 8007bba:	46a2      	mov	sl, r4
 8007bbc:	e7d2      	b.n	8007b64 <_svfiprintf_r+0x9c>
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	1d19      	adds	r1, r3, #4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	9103      	str	r1, [sp, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfbb      	ittet	lt
 8007bca:	425b      	neglt	r3, r3
 8007bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007bd0:	9307      	strge	r3, [sp, #28]
 8007bd2:	9307      	strlt	r3, [sp, #28]
 8007bd4:	bfb8      	it	lt
 8007bd6:	9204      	strlt	r2, [sp, #16]
 8007bd8:	7823      	ldrb	r3, [r4, #0]
 8007bda:	2b2e      	cmp	r3, #46	; 0x2e
 8007bdc:	d10c      	bne.n	8007bf8 <_svfiprintf_r+0x130>
 8007bde:	7863      	ldrb	r3, [r4, #1]
 8007be0:	2b2a      	cmp	r3, #42	; 0x2a
 8007be2:	d135      	bne.n	8007c50 <_svfiprintf_r+0x188>
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	1d1a      	adds	r2, r3, #4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	9203      	str	r2, [sp, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	bfb8      	it	lt
 8007bf0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007bf4:	3402      	adds	r4, #2
 8007bf6:	9305      	str	r3, [sp, #20]
 8007bf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cc4 <_svfiprintf_r+0x1fc>
 8007bfc:	7821      	ldrb	r1, [r4, #0]
 8007bfe:	2203      	movs	r2, #3
 8007c00:	4650      	mov	r0, sl
 8007c02:	f7f8 fb25 	bl	8000250 <memchr>
 8007c06:	b140      	cbz	r0, 8007c1a <_svfiprintf_r+0x152>
 8007c08:	2340      	movs	r3, #64	; 0x40
 8007c0a:	eba0 000a 	sub.w	r0, r0, sl
 8007c0e:	fa03 f000 	lsl.w	r0, r3, r0
 8007c12:	9b04      	ldr	r3, [sp, #16]
 8007c14:	4303      	orrs	r3, r0
 8007c16:	3401      	adds	r4, #1
 8007c18:	9304      	str	r3, [sp, #16]
 8007c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c1e:	4826      	ldr	r0, [pc, #152]	; (8007cb8 <_svfiprintf_r+0x1f0>)
 8007c20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c24:	2206      	movs	r2, #6
 8007c26:	f7f8 fb13 	bl	8000250 <memchr>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d038      	beq.n	8007ca0 <_svfiprintf_r+0x1d8>
 8007c2e:	4b23      	ldr	r3, [pc, #140]	; (8007cbc <_svfiprintf_r+0x1f4>)
 8007c30:	bb1b      	cbnz	r3, 8007c7a <_svfiprintf_r+0x1b2>
 8007c32:	9b03      	ldr	r3, [sp, #12]
 8007c34:	3307      	adds	r3, #7
 8007c36:	f023 0307 	bic.w	r3, r3, #7
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	9303      	str	r3, [sp, #12]
 8007c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c40:	4433      	add	r3, r6
 8007c42:	9309      	str	r3, [sp, #36]	; 0x24
 8007c44:	e767      	b.n	8007b16 <_svfiprintf_r+0x4e>
 8007c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	e7a5      	b.n	8007b9c <_svfiprintf_r+0xd4>
 8007c50:	2300      	movs	r3, #0
 8007c52:	3401      	adds	r4, #1
 8007c54:	9305      	str	r3, [sp, #20]
 8007c56:	4619      	mov	r1, r3
 8007c58:	f04f 0c0a 	mov.w	ip, #10
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c62:	3a30      	subs	r2, #48	; 0x30
 8007c64:	2a09      	cmp	r2, #9
 8007c66:	d903      	bls.n	8007c70 <_svfiprintf_r+0x1a8>
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0c5      	beq.n	8007bf8 <_svfiprintf_r+0x130>
 8007c6c:	9105      	str	r1, [sp, #20]
 8007c6e:	e7c3      	b.n	8007bf8 <_svfiprintf_r+0x130>
 8007c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c74:	4604      	mov	r4, r0
 8007c76:	2301      	movs	r3, #1
 8007c78:	e7f0      	b.n	8007c5c <_svfiprintf_r+0x194>
 8007c7a:	ab03      	add	r3, sp, #12
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	462a      	mov	r2, r5
 8007c80:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <_svfiprintf_r+0x1f8>)
 8007c82:	a904      	add	r1, sp, #16
 8007c84:	4638      	mov	r0, r7
 8007c86:	f7fc f813 	bl	8003cb0 <_printf_float>
 8007c8a:	1c42      	adds	r2, r0, #1
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	d1d6      	bne.n	8007c3e <_svfiprintf_r+0x176>
 8007c90:	89ab      	ldrh	r3, [r5, #12]
 8007c92:	065b      	lsls	r3, r3, #25
 8007c94:	f53f af2c 	bmi.w	8007af0 <_svfiprintf_r+0x28>
 8007c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c9a:	b01d      	add	sp, #116	; 0x74
 8007c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca0:	ab03      	add	r3, sp, #12
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	462a      	mov	r2, r5
 8007ca6:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <_svfiprintf_r+0x1f8>)
 8007ca8:	a904      	add	r1, sp, #16
 8007caa:	4638      	mov	r0, r7
 8007cac:	f7fc fa8c 	bl	80041c8 <_printf_i>
 8007cb0:	e7eb      	b.n	8007c8a <_svfiprintf_r+0x1c2>
 8007cb2:	bf00      	nop
 8007cb4:	08008050 	.word	0x08008050
 8007cb8:	0800805a 	.word	0x0800805a
 8007cbc:	08003cb1 	.word	0x08003cb1
 8007cc0:	08007a13 	.word	0x08007a13
 8007cc4:	08008056 	.word	0x08008056

08007cc8 <nan>:
 8007cc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007cd0 <nan+0x8>
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	00000000 	.word	0x00000000
 8007cd4:	7ff80000 	.word	0x7ff80000

08007cd8 <_sbrk_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4d06      	ldr	r5, [pc, #24]	; (8007cf4 <_sbrk_r+0x1c>)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	4604      	mov	r4, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	602b      	str	r3, [r5, #0]
 8007ce4:	f7f9 f944 	bl	8000f70 <_sbrk>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_sbrk_r+0x1a>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_sbrk_r+0x1a>
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	200002b8 	.word	0x200002b8

08007cf8 <_raise_r>:
 8007cf8:	291f      	cmp	r1, #31
 8007cfa:	b538      	push	{r3, r4, r5, lr}
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	460d      	mov	r5, r1
 8007d00:	d904      	bls.n	8007d0c <_raise_r+0x14>
 8007d02:	2316      	movs	r3, #22
 8007d04:	6003      	str	r3, [r0, #0]
 8007d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d0e:	b112      	cbz	r2, 8007d16 <_raise_r+0x1e>
 8007d10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d14:	b94b      	cbnz	r3, 8007d2a <_raise_r+0x32>
 8007d16:	4620      	mov	r0, r4
 8007d18:	f000 f830 	bl	8007d7c <_getpid_r>
 8007d1c:	462a      	mov	r2, r5
 8007d1e:	4601      	mov	r1, r0
 8007d20:	4620      	mov	r0, r4
 8007d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d26:	f000 b817 	b.w	8007d58 <_kill_r>
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d00a      	beq.n	8007d44 <_raise_r+0x4c>
 8007d2e:	1c59      	adds	r1, r3, #1
 8007d30:	d103      	bne.n	8007d3a <_raise_r+0x42>
 8007d32:	2316      	movs	r3, #22
 8007d34:	6003      	str	r3, [r0, #0]
 8007d36:	2001      	movs	r0, #1
 8007d38:	e7e7      	b.n	8007d0a <_raise_r+0x12>
 8007d3a:	2400      	movs	r4, #0
 8007d3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d40:	4628      	mov	r0, r5
 8007d42:	4798      	blx	r3
 8007d44:	2000      	movs	r0, #0
 8007d46:	e7e0      	b.n	8007d0a <_raise_r+0x12>

08007d48 <raise>:
 8007d48:	4b02      	ldr	r3, [pc, #8]	; (8007d54 <raise+0xc>)
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	6818      	ldr	r0, [r3, #0]
 8007d4e:	f7ff bfd3 	b.w	8007cf8 <_raise_r>
 8007d52:	bf00      	nop
 8007d54:	2000001c 	.word	0x2000001c

08007d58 <_kill_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d07      	ldr	r5, [pc, #28]	; (8007d78 <_kill_r+0x20>)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	4611      	mov	r1, r2
 8007d64:	602b      	str	r3, [r5, #0]
 8007d66:	f7f9 f87b 	bl	8000e60 <_kill>
 8007d6a:	1c43      	adds	r3, r0, #1
 8007d6c:	d102      	bne.n	8007d74 <_kill_r+0x1c>
 8007d6e:	682b      	ldr	r3, [r5, #0]
 8007d70:	b103      	cbz	r3, 8007d74 <_kill_r+0x1c>
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	bd38      	pop	{r3, r4, r5, pc}
 8007d76:	bf00      	nop
 8007d78:	200002b8 	.word	0x200002b8

08007d7c <_getpid_r>:
 8007d7c:	f7f9 b868 	b.w	8000e50 <_getpid>

08007d80 <__sread>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	460c      	mov	r4, r1
 8007d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d88:	f000 f8c8 	bl	8007f1c <_read_r>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	bfab      	itete	ge
 8007d90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d92:	89a3      	ldrhlt	r3, [r4, #12]
 8007d94:	181b      	addge	r3, r3, r0
 8007d96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d9a:	bfac      	ite	ge
 8007d9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d9e:	81a3      	strhlt	r3, [r4, #12]
 8007da0:	bd10      	pop	{r4, pc}

08007da2 <__swrite>:
 8007da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	461f      	mov	r7, r3
 8007da8:	898b      	ldrh	r3, [r1, #12]
 8007daa:	05db      	lsls	r3, r3, #23
 8007dac:	4605      	mov	r5, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	4616      	mov	r6, r2
 8007db2:	d505      	bpl.n	8007dc0 <__swrite+0x1e>
 8007db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db8:	2302      	movs	r3, #2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f000 f888 	bl	8007ed0 <_lseek_r>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	4632      	mov	r2, r6
 8007dce:	463b      	mov	r3, r7
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd6:	f000 b837 	b.w	8007e48 <_write_r>

08007dda <__sseek>:
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	460c      	mov	r4, r1
 8007dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de2:	f000 f875 	bl	8007ed0 <_lseek_r>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	bf15      	itete	ne
 8007dec:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007df6:	81a3      	strheq	r3, [r4, #12]
 8007df8:	bf18      	it	ne
 8007dfa:	81a3      	strhne	r3, [r4, #12]
 8007dfc:	bd10      	pop	{r4, pc}

08007dfe <__sclose>:
 8007dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e02:	f000 b833 	b.w	8007e6c <_close_r>

08007e06 <strncmp>:
 8007e06:	b510      	push	{r4, lr}
 8007e08:	b17a      	cbz	r2, 8007e2a <strncmp+0x24>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	3901      	subs	r1, #1
 8007e0e:	1884      	adds	r4, r0, r2
 8007e10:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007e18:	4290      	cmp	r0, r2
 8007e1a:	d101      	bne.n	8007e20 <strncmp+0x1a>
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	d101      	bne.n	8007e24 <strncmp+0x1e>
 8007e20:	1a80      	subs	r0, r0, r2
 8007e22:	bd10      	pop	{r4, pc}
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d1f3      	bne.n	8007e10 <strncmp+0xa>
 8007e28:	e7fa      	b.n	8007e20 <strncmp+0x1a>
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	e7f9      	b.n	8007e22 <strncmp+0x1c>

08007e2e <__ascii_wctomb>:
 8007e2e:	b149      	cbz	r1, 8007e44 <__ascii_wctomb+0x16>
 8007e30:	2aff      	cmp	r2, #255	; 0xff
 8007e32:	bf85      	ittet	hi
 8007e34:	238a      	movhi	r3, #138	; 0x8a
 8007e36:	6003      	strhi	r3, [r0, #0]
 8007e38:	700a      	strbls	r2, [r1, #0]
 8007e3a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007e3e:	bf98      	it	ls
 8007e40:	2001      	movls	r0, #1
 8007e42:	4770      	bx	lr
 8007e44:	4608      	mov	r0, r1
 8007e46:	4770      	bx	lr

08007e48 <_write_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4d07      	ldr	r5, [pc, #28]	; (8007e68 <_write_r+0x20>)
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	4608      	mov	r0, r1
 8007e50:	4611      	mov	r1, r2
 8007e52:	2200      	movs	r2, #0
 8007e54:	602a      	str	r2, [r5, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	f7f9 f839 	bl	8000ece <_write>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_write_r+0x1e>
 8007e60:	682b      	ldr	r3, [r5, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_write_r+0x1e>
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	200002b8 	.word	0x200002b8

08007e6c <_close_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d06      	ldr	r5, [pc, #24]	; (8007e88 <_close_r+0x1c>)
 8007e70:	2300      	movs	r3, #0
 8007e72:	4604      	mov	r4, r0
 8007e74:	4608      	mov	r0, r1
 8007e76:	602b      	str	r3, [r5, #0]
 8007e78:	f7f9 f845 	bl	8000f06 <_close>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d102      	bne.n	8007e86 <_close_r+0x1a>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	b103      	cbz	r3, 8007e86 <_close_r+0x1a>
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	200002b8 	.word	0x200002b8

08007e8c <_fstat_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d07      	ldr	r5, [pc, #28]	; (8007eac <_fstat_r+0x20>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	4611      	mov	r1, r2
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	f7f9 f840 	bl	8000f1e <_fstat>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d102      	bne.n	8007ea8 <_fstat_r+0x1c>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	b103      	cbz	r3, 8007ea8 <_fstat_r+0x1c>
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	bd38      	pop	{r3, r4, r5, pc}
 8007eaa:	bf00      	nop
 8007eac:	200002b8 	.word	0x200002b8

08007eb0 <_isatty_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d06      	ldr	r5, [pc, #24]	; (8007ecc <_isatty_r+0x1c>)
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	4608      	mov	r0, r1
 8007eba:	602b      	str	r3, [r5, #0]
 8007ebc:	f7f9 f83f 	bl	8000f3e <_isatty>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d102      	bne.n	8007eca <_isatty_r+0x1a>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b103      	cbz	r3, 8007eca <_isatty_r+0x1a>
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	200002b8 	.word	0x200002b8

08007ed0 <_lseek_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4d07      	ldr	r5, [pc, #28]	; (8007ef0 <_lseek_r+0x20>)
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	4608      	mov	r0, r1
 8007ed8:	4611      	mov	r1, r2
 8007eda:	2200      	movs	r2, #0
 8007edc:	602a      	str	r2, [r5, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f7f9 f838 	bl	8000f54 <_lseek>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d102      	bne.n	8007eee <_lseek_r+0x1e>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	b103      	cbz	r3, 8007eee <_lseek_r+0x1e>
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	bd38      	pop	{r3, r4, r5, pc}
 8007ef0:	200002b8 	.word	0x200002b8

08007ef4 <__malloc_lock>:
 8007ef4:	4801      	ldr	r0, [pc, #4]	; (8007efc <__malloc_lock+0x8>)
 8007ef6:	f7fe bf00 	b.w	8006cfa <__retarget_lock_acquire_recursive>
 8007efa:	bf00      	nop
 8007efc:	200002ac 	.word	0x200002ac

08007f00 <__malloc_unlock>:
 8007f00:	4801      	ldr	r0, [pc, #4]	; (8007f08 <__malloc_unlock+0x8>)
 8007f02:	f7fe befb 	b.w	8006cfc <__retarget_lock_release_recursive>
 8007f06:	bf00      	nop
 8007f08:	200002ac 	.word	0x200002ac

08007f0c <_malloc_usable_size_r>:
 8007f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f10:	1f18      	subs	r0, r3, #4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	bfbc      	itt	lt
 8007f16:	580b      	ldrlt	r3, [r1, r0]
 8007f18:	18c0      	addlt	r0, r0, r3
 8007f1a:	4770      	bx	lr

08007f1c <_read_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4d07      	ldr	r5, [pc, #28]	; (8007f3c <_read_r+0x20>)
 8007f20:	4604      	mov	r4, r0
 8007f22:	4608      	mov	r0, r1
 8007f24:	4611      	mov	r1, r2
 8007f26:	2200      	movs	r2, #0
 8007f28:	602a      	str	r2, [r5, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f7f8 ffb2 	bl	8000e94 <_read>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_read_r+0x1e>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_read_r+0x1e>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	200002b8 	.word	0x200002b8

08007f40 <_init>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	bf00      	nop
 8007f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f46:	bc08      	pop	{r3}
 8007f48:	469e      	mov	lr, r3
 8007f4a:	4770      	bx	lr

08007f4c <_fini>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	bf00      	nop
 8007f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	469e      	mov	lr, r3
 8007f56:	4770      	bx	lr
