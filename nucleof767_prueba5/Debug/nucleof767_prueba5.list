
nucleof767_prueba5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e74  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030bc  080030bc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030c4  080030c4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080030cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000001c  080030e8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080030e8  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7f3  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e18  00000000  00000000  0002c83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002e658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002ef30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029271  00000000  00000000  0002f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce21  00000000  00000000  000589a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9033  00000000  00000000  000657c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e7f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ac  00000000  00000000  0015e848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000001c 	.word	0x2000001c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003054 	.word	0x08003054

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000020 	.word	0x20000020
 8000234:	08003054 	.word	0x08003054

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b090      	sub	sp, #64	; 0x40
 8000550:	af00      	add	r7, sp, #0
	char buttonRisingEdgeOcurredMsg[] = "Flanco Ascendente Detectado\n\r";
 8000552:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <main+0x8c>)
 8000554:	f107 0420 	add.w	r4, r7, #32
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000562:	c407      	stmia	r4!, {r0, r1, r2}
 8000564:	8023      	strh	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000566:	f000 fba7 	bl	8000cb8 <HAL_Init>
	//uartInit();

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800056a:	f000 f839 	bl	80005e0 <SystemClock_Config>

	/* Initialize BSP Led for blue led (LED2) */
	BSP_LED_Init(LED1);
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fae8 	bl	8000b44 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8000574:	2001      	movs	r0, #1
 8000576:	f000 fae5 	bl	8000b44 <BSP_LED_Init>

	/* Initialize BSP for button */
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 800057a:	2100      	movs	r1, #0
 800057c:	2000      	movs	r0, #0
 800057e:	f000 fb47 	bl	8000c10 <BSP_PB_Init>
	if(!uartInit()) {
 8000582:	f000 fa9f 	bl	8000ac4 <uartInit>
 8000586:	4603      	mov	r3, r0
 8000588:	f083 0301 	eor.w	r3, r3, #1
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <main+0x4a>
				Error_Handler();
 8000592:	f000 f897 	bl	80006c4 <Error_Handler>
			}	/* Start the FSM */
	debounceFSM_init();
 8000596:	f000 fa4b 	bl	8000a30 <debounceFSM_init>

	/* Variable definitions */
	bool_t delaySelect = false;
 800059a:	2300      	movs	r3, #0
 800059c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	delay_t Delays;

	/* Initialize delay structure and run it */
	delayInit(&Delays, LEDSEC1);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2164      	movs	r1, #100	; 0x64
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fa52 	bl	8000a50 <delayInit>
	delayRead(&Delays);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fa5e 	bl	8000a72 <delayRead>
	uint8_t message[] = "Hola Mundo!\r\n";
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <main+0x90>)
 80005b8:	1d3c      	adds	r4, r7, #4
 80005ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005bc:	c407      	stmia	r4!, {r0, r1, r2}
 80005be:	8023      	strh	r3, [r4, #0]
	/* Infinite loop */
	while (1)
	{
		HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f000 fbd7 	bl	8000d74 <HAL_Delay>
		uartSendString(message);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 faa5 	bl	8000b18 <uartSendString>
		HAL_Delay(1000);
 80005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d2:	f000 fbcf 	bl	8000d74 <HAL_Delay>
		HAL_Delay(100);
 80005d6:	e7f3      	b.n	80005c0 <main+0x74>
 80005d8:	0800306c 	.word	0x0800306c
 80005dc:	0800308c 	.word	0x0800308c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fd28 	bl	8003044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000604:	f000 feb2 	bl	800136c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <SystemClock_Config+0xdc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <SystemClock_Config+0xdc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <SystemClock_Config+0xdc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemClock_Config+0xe0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000628:	4a25      	ldr	r2, [pc, #148]	; (80006c0 <SystemClock_Config+0xe0>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <SystemClock_Config+0xe0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000640:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000644:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000654:	2360      	movs	r3, #96	; 0x60
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fedf 	bl	800142c <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 f826 	bl	80006c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000678:	f000 fe88 	bl	800138c <HAL_PWREx_EnableOverDrive>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000682:	f000 f81f 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2103      	movs	r1, #3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f970 	bl	8001988 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ae:	f000 f809 	bl	80006c4 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	BSP_LED_On(LED1);
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fa87 	bl	8000bdc <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ce:	b672      	cpsid	i
}
 80006d0:	bf00      	nop
  __disable_irq();
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <Error_Handler+0xe>

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fc:	6453      	str	r3, [r2, #68]	; 0x44
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x44>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b0b2      	sub	sp, #200	; 0xc8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000738:	2290      	movs	r2, #144	; 0x90
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fc81 	bl	8003044 <memset>
  if(huart->Instance==UART4)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a7f      	ldr	r2, [pc, #508]	; (8000944 <HAL_UART_MspInit+0x228>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d15e      	bne.n	800080a <HAL_UART_MspInit+0xee>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800074c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000752:	2300      	movs	r3, #0
 8000754:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fb3a 	bl	8001dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000766:	f7ff ffad 	bl	80006c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800076a:	4b77      	ldr	r3, [pc, #476]	; (8000948 <HAL_UART_MspInit+0x22c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a76      	ldr	r2, [pc, #472]	; (8000948 <HAL_UART_MspInit+0x22c>)
 8000770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b74      	ldr	r3, [pc, #464]	; (8000948 <HAL_UART_MspInit+0x22c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800077e:	623b      	str	r3, [r7, #32]
 8000780:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b71      	ldr	r3, [pc, #452]	; (8000948 <HAL_UART_MspInit+0x22c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a70      	ldr	r2, [pc, #448]	; (8000948 <HAL_UART_MspInit+0x22c>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b6e      	ldr	r3, [pc, #440]	; (8000948 <HAL_UART_MspInit+0x22c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b6b      	ldr	r3, [pc, #428]	; (8000948 <HAL_UART_MspInit+0x22c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a6a      	ldr	r2, [pc, #424]	; (8000948 <HAL_UART_MspInit+0x22c>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b68      	ldr	r3, [pc, #416]	; (8000948 <HAL_UART_MspInit+0x22c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b2:	2301      	movs	r3, #1
 80007b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80007ca:	2308      	movs	r3, #8
 80007cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80007d4:	4619      	mov	r1, r3
 80007d6:	485d      	ldr	r0, [pc, #372]	; (800094c <HAL_UART_MspInit+0x230>)
 80007d8:	f000 fc02 	bl	8000fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80007f6:	2308      	movs	r3, #8
 80007f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000800:	4619      	mov	r1, r3
 8000802:	4853      	ldr	r0, [pc, #332]	; (8000950 <HAL_UART_MspInit+0x234>)
 8000804:	f000 fbec 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000808:	e098      	b.n	800093c <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a51      	ldr	r2, [pc, #324]	; (8000954 <HAL_UART_MspInit+0x238>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d151      	bne.n	80008b8 <HAL_UART_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000814:	2340      	movs	r3, #64	; 0x40
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000818:	2300      	movs	r3, #0
 800081a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fad7 	bl	8001dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <HAL_UART_MspInit+0x114>
      Error_Handler();
 800082c:	f7ff ff4a 	bl	80006c4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000830:	4b45      	ldr	r3, [pc, #276]	; (8000948 <HAL_UART_MspInit+0x22c>)
 8000832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000834:	4a44      	ldr	r2, [pc, #272]	; (8000948 <HAL_UART_MspInit+0x22c>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	6453      	str	r3, [r2, #68]	; 0x44
 800083c:	4b42      	ldr	r3, [pc, #264]	; (8000948 <HAL_UART_MspInit+0x22c>)
 800083e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000840:	f003 0310 	and.w	r3, r3, #16
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b3f      	ldr	r3, [pc, #252]	; (8000948 <HAL_UART_MspInit+0x22c>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084c:	4a3e      	ldr	r2, [pc, #248]	; (8000948 <HAL_UART_MspInit+0x22c>)
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	6313      	str	r3, [r2, #48]	; 0x30
 8000854:	4b3c      	ldr	r3, [pc, #240]	; (8000948 <HAL_UART_MspInit+0x22c>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800087a:	2304      	movs	r3, #4
 800087c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000884:	4619      	mov	r1, r3
 8000886:	4834      	ldr	r0, [pc, #208]	; (8000958 <HAL_UART_MspInit+0x23c>)
 8000888:	f000 fbaa 	bl	8000fe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008a4:	2307      	movs	r3, #7
 80008a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4829      	ldr	r0, [pc, #164]	; (8000958 <HAL_UART_MspInit+0x23c>)
 80008b2:	f000 fb95 	bl	8000fe0 <HAL_GPIO_Init>
}
 80008b6:	e041      	b.n	800093c <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a27      	ldr	r2, [pc, #156]	; (800095c <HAL_UART_MspInit+0x240>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d13c      	bne.n	800093c <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fa7f 	bl	8001dd4 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 80008dc:	f7ff fef2 	bl	80006c4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <HAL_UART_MspInit+0x22c>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a18      	ldr	r2, [pc, #96]	; (8000948 <HAL_UART_MspInit+0x22c>)
 80008e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <HAL_UART_MspInit+0x22c>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <HAL_UART_MspInit+0x22c>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a12      	ldr	r2, [pc, #72]	; (8000948 <HAL_UART_MspInit+0x22c>)
 80008fe:	f043 0308 	orr.w	r3, r3, #8
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_UART_MspInit+0x22c>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0308 	and.w	r3, r3, #8
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000910:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800092a:	2307      	movs	r3, #7
 800092c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000930:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000934:	4619      	mov	r1, r3
 8000936:	480a      	ldr	r0, [pc, #40]	; (8000960 <HAL_UART_MspInit+0x244>)
 8000938:	f000 fb52 	bl	8000fe0 <HAL_GPIO_Init>
}
 800093c:	bf00      	nop
 800093e:	37c8      	adds	r7, #200	; 0xc8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40004c00 	.word	0x40004c00
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000
 8000950:	40020800 	.word	0x40020800
 8000954:	40011000 	.word	0x40011000
 8000958:	40020400 	.word	0x40020400
 800095c:	40004800 	.word	0x40004800
 8000960:	40020c00 	.word	0x40020c00

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f9c0 	bl	8000d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009e2:	490e      	ldr	r1, [pc, #56]	; (8000a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e4:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009f8:	4c0b      	ldr	r4, [pc, #44]	; (8000a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a06:	f7ff ffd7 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f002 faf7 	bl	8002ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0e:	f7ff fd9d 	bl	800054c <main>
  bx  lr    
 8000a12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a14:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a20:	080030cc 	.word	0x080030cc
  ldr r2, =_sbss
 8000a24:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a28:	200000d4 	.word	0x200000d4

08000a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC_IRQHandler>
	...

08000a30 <debounceFSM_init>:
static delay_t delay;
static debounceState_t buttonDebounce;
static bool_t buttonPressed;


void debounceFSM_init(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

	/* pone el estado inicial a BUTTON UP*/
	buttonDebounce = BUTTON_UP;
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <debounceFSM_init+0x18>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
	/*configura la estructura del delay*/
	delayInit(&delay, DEBOUNCE_TIME);
 8000a3a:	2128      	movs	r1, #40	; 0x28
 8000a3c:	4803      	ldr	r0, [pc, #12]	; (8000a4c <debounceFSM_init+0x1c>)
 8000a3e:	f000 f807 	bl	8000a50 <delayInit>

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000044 	.word	0x20000044
 8000a4c:	20000038 	.word	0x20000038

08000a50 <delayInit>:
 *
 *  Created on: Mar 18, 2023
 *      Author: Alan Cornejo
 */
#include "API_delay.h"
void delayInit( delay_t * delay, tick_t duration ){
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
	  delay->duration=duration;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	683a      	ldr	r2, [r7, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
	  delay->running=false;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	721a      	strb	r2, [r3, #8]

}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <delayRead>:
bool_t delayRead( delay_t * delay ){
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	if((delay->running)==false){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7a1b      	ldrb	r3, [r3, #8]
 8000a7e:	f083 0301 	eor.w	r3, r3, #1
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d008      	beq.n	8000a9a <delayRead+0x28>
		delay->running=true;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	721a      	strb	r2, [r3, #8]
		delay->startTime=HAL_GetTick();
 8000a8e:	f000 f965 	bl	8000d5c <HAL_GetTick>
 8000a92:	4602      	mov	r2, r0
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e00e      	b.n	8000ab8 <delayRead+0x46>
	}
	else{
		if(HAL_GetTick()-delay->startTime>=delay->duration){
 8000a9a:	f000 f95f 	bl	8000d5c <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	1ad2      	subs	r2, r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d304      	bcc.n	8000ab8 <delayRead+0x46>
			delay->running=false;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	721a      	strb	r2, [r3, #8]
			return true;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e000      	b.n	8000aba <delayRead+0x48>
		}
	}
	return false;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <uartInit>:

// Prototipos de funciones privadas
static void uartErrorCallback(UART_HandleTypeDef *huart);

bool_t uartInit()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    // Configurar y habilitar el periférico UART utilizando HAL
    huart.Instance = USART3; // Utilizar USART2 para la comunicación a través del ST-Link
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <uartInit+0x4c>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <uartInit+0x50>)
 8000acc:	601a      	str	r2, [r3, #0]
    huart.Init.BaudRate = 115200;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <uartInit+0x4c>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <uartInit+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <uartInit+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <uartInit+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <uartInit+0x4c>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <uartInit+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <uartInit+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
    //HAL_UART_MspInit(&huart);
    if (HAL_UART_Init(&huart) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <uartInit+0x4c>)
 8000afc:	f001 fd92 	bl	8002624 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <uartInit+0x46>
    {
        return false;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e000      	b.n	8000b0c <uartInit+0x48>
    }

    //HAL_UART_RegisterCallback(&huart, HAL_UART_ERROR_CB_ID, uartErrorCallback);

    return true;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000048 	.word	0x20000048
 8000b14:	40004800 	.word	0x40004800

08000b18 <uartSendString>:

void uartSendString(uint8_t *pstring)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart, pstring, strlen(pstring), HAL_MAX_DELAY);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fb89 	bl	8000238 <strlen>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <uartSendString+0x28>)
 8000b32:	f001 fdc5 	bl	80026c0 <HAL_UART_Transmit>
	//uint16_t length = strlen((const char *)pstring); // CAlculo el largo del string a enviar
		//HAL_UART_Transmit(&huart, pstring, length, ((length+10)*10000)/huart.Init.BaudRate); // Envio datos
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000048 	.word	0x20000048

08000b44 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d10c      	bne.n	8000b6e <BSP_LED_Init+0x2a>
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <BSP_LED_Init+0x8c>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <BSP_LED_Init+0x8c>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <BSP_LED_Init+0x8c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	e00b      	b.n	8000b86 <BSP_LED_Init+0x42>
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <BSP_LED_Init+0x8c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <BSP_LED_Init+0x8c>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <BSP_LED_Init+0x8c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <BSP_LED_Init+0x90>)
 8000b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <BSP_LED_Init+0x94>)
 8000ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba4:	f107 0214 	add.w	r2, r7, #20
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fa18 	bl	8000fe0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <BSP_LED_Init+0x94>)
 8000bb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <BSP_LED_Init+0x90>)
 8000bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f000 fbb8 	bl	8001338 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	080030b4 	.word	0x080030b4
 8000bd8:	20000004 	.word	0x20000004

08000bdc <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <BSP_LED_On+0x2c>)
 8000bea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <BSP_LED_On+0x30>)
 8000bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f000 fb9d 	bl	8001338 <HAL_GPIO_WritePin>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000004 	.word	0x20000004
 8000c0c:	080030b4 	.word	0x080030b4

08000c10 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	460a      	mov	r2, r1
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <BSP_PB_Init+0xa0>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <BSP_PB_Init+0xa0>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <BSP_PB_Init+0xa0>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d112      	bne.n	8000c64 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <BSP_PB_Init+0xa4>)
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	f107 020c 	add.w	r2, r7, #12
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f9be 	bl	8000fe0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d11d      	bne.n	8000ca6 <BSP_PB_Init+0x96>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000c74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c78:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <BSP_PB_Init+0xa4>)
 8000c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c82:	f107 020c 	add.w	r2, r7, #12
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f9a9 	bl	8000fe0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000c8e:	2328      	movs	r3, #40	; 0x28
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	2200      	movs	r2, #0
 8000c94:	210f      	movs	r1, #15
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f96b 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000c9c:	2328      	movs	r3, #40	; 0x28
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f982 	bl	8000faa <HAL_NVIC_EnableIRQ>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	20000010 	.word	0x20000010

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f94d 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f806 	bl	8000cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fd04 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x54>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x58>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f967 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00e      	b.n	8000d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d80a      	bhi.n	8000d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d10:	f000 f92f 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_InitTick+0x5c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000018 	.word	0x20000018
 8000d30:	20000014 	.word	0x20000014

08000d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x20>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x24>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_IncTick+0x24>)
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000018 	.word	0x20000018
 8000d58:	200000d0 	.word	0x200000d0

08000d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_GetTick+0x14>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	200000d0 	.word	0x200000d0

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff ffee 	bl	8000d5c <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffde 	bl	8000d5c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000018 	.word	0x20000018

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <__NVIC_SetPriorityGrouping+0x40>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x40>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	05fa0000 	.word	0x05fa0000

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff29 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff3e 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff31 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffa2 	bl	8000f18 <SysTick_Config>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e175      	b.n	80012ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8164 	bne.w	80012e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_GPIO_Init+0x56>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	69b9      	ldr	r1, [r7, #24]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80be 	beq.w	80012e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b66      	ldr	r3, [pc, #408]	; (8001304 <HAL_GPIO_Init+0x324>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a65      	ldr	r2, [pc, #404]	; (8001304 <HAL_GPIO_Init+0x324>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b63      	ldr	r3, [pc, #396]	; (8001304 <HAL_GPIO_Init+0x324>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001182:	4a61      	ldr	r2, [pc, #388]	; (8001308 <HAL_GPIO_Init+0x328>)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a58      	ldr	r2, [pc, #352]	; (800130c <HAL_GPIO_Init+0x32c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d037      	beq.n	800121e <HAL_GPIO_Init+0x23e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a57      	ldr	r2, [pc, #348]	; (8001310 <HAL_GPIO_Init+0x330>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d031      	beq.n	800121a <HAL_GPIO_Init+0x23a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a56      	ldr	r2, [pc, #344]	; (8001314 <HAL_GPIO_Init+0x334>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d02b      	beq.n	8001216 <HAL_GPIO_Init+0x236>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a55      	ldr	r2, [pc, #340]	; (8001318 <HAL_GPIO_Init+0x338>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d025      	beq.n	8001212 <HAL_GPIO_Init+0x232>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a54      	ldr	r2, [pc, #336]	; (800131c <HAL_GPIO_Init+0x33c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d01f      	beq.n	800120e <HAL_GPIO_Init+0x22e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a53      	ldr	r2, [pc, #332]	; (8001320 <HAL_GPIO_Init+0x340>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d019      	beq.n	800120a <HAL_GPIO_Init+0x22a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a52      	ldr	r2, [pc, #328]	; (8001324 <HAL_GPIO_Init+0x344>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0x226>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a51      	ldr	r2, [pc, #324]	; (8001328 <HAL_GPIO_Init+0x348>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_GPIO_Init+0x222>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a50      	ldr	r2, [pc, #320]	; (800132c <HAL_GPIO_Init+0x34c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d007      	beq.n	80011fe <HAL_GPIO_Init+0x21e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <HAL_GPIO_Init+0x350>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d101      	bne.n	80011fa <HAL_GPIO_Init+0x21a>
 80011f6:	2309      	movs	r3, #9
 80011f8:	e012      	b.n	8001220 <HAL_GPIO_Init+0x240>
 80011fa:	230a      	movs	r3, #10
 80011fc:	e010      	b.n	8001220 <HAL_GPIO_Init+0x240>
 80011fe:	2308      	movs	r3, #8
 8001200:	e00e      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001202:	2307      	movs	r3, #7
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001206:	2306      	movs	r3, #6
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x240>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x240>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	; (8001308 <HAL_GPIO_Init+0x328>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <HAL_GPIO_Init+0x354>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001262:	4a34      	ldr	r2, [pc, #208]	; (8001334 <HAL_GPIO_Init+0x354>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_GPIO_Init+0x354>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800128c:	4a29      	ldr	r2, [pc, #164]	; (8001334 <HAL_GPIO_Init+0x354>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_GPIO_Init+0x354>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <HAL_GPIO_Init+0x354>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_GPIO_Init+0x354>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_GPIO_Init+0x354>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f ae86 	bls.w	8001000 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40021400 	.word	0x40021400
 8001324:	40021800 	.word	0x40021800
 8001328:	40021c00 	.word	0x40021c00
 800132c:	40022000 	.word	0x40022000
 8001330:	40022400 	.word	0x40022400
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40007000 	.word	0x40007000

0800138c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <HAL_PWREx_EnableOverDrive+0x98>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a22      	ldr	r2, [pc, #136]	; (8001424 <HAL_PWREx_EnableOverDrive+0x98>)
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HAL_PWREx_EnableOverDrive+0x98>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ba:	f7ff fccf 	bl	8000d5c <HAL_GetTick>
 80013be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013c0:	e009      	b.n	80013d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013c2:	f7ff fccb 	bl	8000d5c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013d0:	d901      	bls.n	80013d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e022      	b.n	800141c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e2:	d1ee      	bne.n	80013c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f0:	f7ff fcb4 	bl	8000d5c <HAL_GetTick>
 80013f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013f6:	e009      	b.n	800140c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013f8:	f7ff fcb0 	bl	8000d5c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001406:	d901      	bls.n	800140c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e007      	b.n	800141c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_PWREx_EnableOverDrive+0x9c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001418:	d1ee      	bne.n	80013f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e29b      	b.n	800197a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8087 	beq.w	800155e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001450:	4b96      	ldr	r3, [pc, #600]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	2b04      	cmp	r3, #4
 800145a:	d00c      	beq.n	8001476 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145c:	4b93      	ldr	r3, [pc, #588]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 030c 	and.w	r3, r3, #12
 8001464:	2b08      	cmp	r3, #8
 8001466:	d112      	bne.n	800148e <HAL_RCC_OscConfig+0x62>
 8001468:	4b90      	ldr	r3, [pc, #576]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001474:	d10b      	bne.n	800148e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001476:	4b8d      	ldr	r3, [pc, #564]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d06c      	beq.n	800155c <HAL_RCC_OscConfig+0x130>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d168      	bne.n	800155c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e275      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_OscConfig+0x7a>
 8001498:	4b84      	ldr	r3, [pc, #528]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a83      	ldr	r2, [pc, #524]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800149e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	e02e      	b.n	8001504 <HAL_RCC_OscConfig+0xd8>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x9c>
 80014ae:	4b7f      	ldr	r3, [pc, #508]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a7e      	ldr	r2, [pc, #504]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b7c      	ldr	r3, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7b      	ldr	r2, [pc, #492]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e01d      	b.n	8001504 <HAL_RCC_OscConfig+0xd8>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0xc0>
 80014d2:	4b76      	ldr	r3, [pc, #472]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a75      	ldr	r2, [pc, #468]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b73      	ldr	r3, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a72      	ldr	r2, [pc, #456]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0xd8>
 80014ec:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b6c      	ldr	r3, [pc, #432]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a6b      	ldr	r2, [pc, #428]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80014fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d013      	beq.n	8001534 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fc26 	bl	8000d5c <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fc22 	bl	8000d5c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e229      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	4b61      	ldr	r3, [pc, #388]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0xe8>
 8001532:	e014      	b.n	800155e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fc12 	bl	8000d5c <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fc0e 	bl	8000d5c <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e215      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	4b57      	ldr	r3, [pc, #348]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x110>
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d069      	beq.n	800163e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156a:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001576:	4b4d      	ldr	r3, [pc, #308]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b08      	cmp	r3, #8
 8001580:	d11c      	bne.n	80015bc <HAL_RCC_OscConfig+0x190>
 8001582:	4b4a      	ldr	r3, [pc, #296]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d116      	bne.n	80015bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e1e9      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	493d      	ldr	r1, [pc, #244]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	e040      	b.n	800163e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d023      	beq.n	800160c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fbc4 	bl	8000d5c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fbc0 	bl	8000d5c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e1c7      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4929      	ldr	r1, [pc, #164]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
 800160a:	e018      	b.n	800163e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a26      	ldr	r2, [pc, #152]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fba0 	bl	8000d5c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fb9c 	bl	8000d5c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1a3      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d038      	beq.n	80016bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d019      	beq.n	8001686 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165e:	f7ff fb7d 	bl	8000d5c <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001666:	f7ff fb79 	bl	8000d5c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e180      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800167a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x23a>
 8001684:	e01a      	b.n	80016bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 8001688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_RCC_OscConfig+0x280>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001692:	f7ff fb63 	bl	8000d5c <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001698:	e00a      	b.n	80016b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169a:	f7ff fb5f 	bl	8000d5c <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d903      	bls.n	80016b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e166      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
 80016ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	4b92      	ldr	r3, [pc, #584]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80016b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1ee      	bne.n	800169a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80a4 	beq.w	8001812 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b8c      	ldr	r3, [pc, #560]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b89      	ldr	r3, [pc, #548]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a88      	ldr	r2, [pc, #544]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b86      	ldr	r3, [pc, #536]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f2:	4b83      	ldr	r3, [pc, #524]	; (8001900 <HAL_RCC_OscConfig+0x4d4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016fe:	4b80      	ldr	r3, [pc, #512]	; (8001900 <HAL_RCC_OscConfig+0x4d4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a7f      	ldr	r2, [pc, #508]	; (8001900 <HAL_RCC_OscConfig+0x4d4>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff fb27 	bl	8000d5c <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff fb23 	bl	8000d5c <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b64      	cmp	r3, #100	; 0x64
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e12a      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001724:	4b76      	ldr	r3, [pc, #472]	; (8001900 <HAL_RCC_OscConfig+0x4d4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x31a>
 8001738:	4b70      	ldr	r3, [pc, #448]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a6f      	ldr	r2, [pc, #444]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
 8001744:	e02d      	b.n	80017a2 <HAL_RCC_OscConfig+0x376>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x33c>
 800174e:	4b6b      	ldr	r3, [pc, #428]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a6a      	ldr	r2, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
 800175a:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a67      	ldr	r2, [pc, #412]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001760:	f023 0304 	bic.w	r3, r3, #4
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
 8001766:	e01c      	b.n	80017a2 <HAL_RCC_OscConfig+0x376>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d10c      	bne.n	800178a <HAL_RCC_OscConfig+0x35e>
 8001770:	4b62      	ldr	r3, [pc, #392]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	4a61      	ldr	r2, [pc, #388]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6713      	str	r3, [r2, #112]	; 0x70
 800177c:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a5e      	ldr	r2, [pc, #376]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	e00b      	b.n	80017a2 <HAL_RCC_OscConfig+0x376>
 800178a:	4b5c      	ldr	r3, [pc, #368]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	4a5b      	ldr	r2, [pc, #364]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6713      	str	r3, [r2, #112]	; 0x70
 8001796:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179a:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d015      	beq.n	80017d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff fad7 	bl	8000d5c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff fad3 	bl	8000d5c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0d8      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0ee      	beq.n	80017b2 <HAL_RCC_OscConfig+0x386>
 80017d4:	e014      	b.n	8001800 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d6:	f7ff fac1 	bl	8000d5c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fabd 	bl	8000d5c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0c2      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d105      	bne.n	8001812 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a3c      	ldr	r2, [pc, #240]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 800180c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80ae 	beq.w	8001978 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181c:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d06d      	beq.n	8001904 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d14b      	bne.n	80018c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001830:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a31      	ldr	r2, [pc, #196]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800183a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fa8e 	bl	8000d5c <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fa8a 	bl	8000d5c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e091      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	019b      	lsls	r3, r3, #6
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	3b01      	subs	r3, #1
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	061b      	lsls	r3, r3, #24
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	071b      	lsls	r3, r3, #28
 800188e:	491b      	ldr	r1, [pc, #108]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a18      	ldr	r2, [pc, #96]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 800189a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fa5c 	bl	8000d5c <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff fa58 	bl	8000d5c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e05f      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x47c>
 80018c6:	e057      	b.n	8001978 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80018ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fa42 	bl	8000d5c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff fa3e 	bl	8000d5c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e045      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_RCC_OscConfig+0x4d0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x4b0>
 80018fa:	e03d      	b.n	8001978 <HAL_RCC_OscConfig+0x54c>
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <HAL_RCC_OscConfig+0x558>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d030      	beq.n	8001974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d129      	bne.n	8001974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d122      	bne.n	8001974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001934:	4013      	ands	r3, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800193a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800193c:	4293      	cmp	r3, r2
 800193e:	d119      	bne.n	8001974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	3b01      	subs	r3, #1
 800194e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d10f      	bne.n	8001974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d107      	bne.n	8001974 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0d0      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a0:	4b6a      	ldr	r3, [pc, #424]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d910      	bls.n	80019d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b67      	ldr	r3, [pc, #412]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 020f 	bic.w	r2, r3, #15
 80019b6:	4965      	ldr	r1, [pc, #404]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0b8      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d020      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	4a58      	ldr	r2, [pc, #352]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 80019ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a52      	ldr	r2, [pc, #328]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	494d      	ldr	r1, [pc, #308]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d040      	beq.n	8001aac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d115      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e07f      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4a:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e073      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5a:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e06b      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6a:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f023 0203 	bic.w	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4936      	ldr	r1, [pc, #216]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a7c:	f7ff f96e 	bl	8000d5c <HAL_GetTick>
 8001a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7ff f96a 	bl	8000d5c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e053      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 020c 	and.w	r2, r3, #12
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d1eb      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d210      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 020f 	bic.w	r2, r3, #15
 8001ac2:	4922      	ldr	r1, [pc, #136]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e032      	b.n	8001b42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4916      	ldr	r1, [pc, #88]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	490e      	ldr	r1, [pc, #56]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b1a:	f000 f821 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	490a      	ldr	r1, [pc, #40]	; (8001b54 <HAL_RCC_ClockConfig+0x1cc>)
 8001b2c:	5ccb      	ldrb	r3, [r1, r3]
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	4a09      	ldr	r2, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1d0>)
 8001b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1d4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f8ca 	bl	8000cd4 <HAL_InitTick>

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00
 8001b50:	40023800 	.word	0x40023800
 8001b54:	0800309c 	.word	0x0800309c
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000014 	.word	0x20000014

08001b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b64:	b094      	sub	sp, #80	; 0x50
 8001b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b70:	2300      	movs	r3, #0
 8001b72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b78:	4b79      	ldr	r3, [pc, #484]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d00d      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	f200 80e1 	bhi.w	8001d4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x34>
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b92:	e0db      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b94:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b98:	e0db      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b9a:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9e:	e0d8      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba0:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001baa:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d063      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb6:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	099b      	lsrs	r3, r3, #6
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bca:	2300      	movs	r3, #0
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	f04f 0000 	mov.w	r0, #0
 8001bda:	f04f 0100 	mov.w	r1, #0
 8001bde:	0159      	lsls	r1, r3, #5
 8001be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be4:	0150      	lsls	r0, r2, #5
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4621      	mov	r1, r4
 8001bec:	1a51      	subs	r1, r2, r1
 8001bee:	6139      	str	r1, [r7, #16]
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c04:	4659      	mov	r1, fp
 8001c06:	018b      	lsls	r3, r1, #6
 8001c08:	4651      	mov	r1, sl
 8001c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c0e:	4651      	mov	r1, sl
 8001c10:	018a      	lsls	r2, r1, #6
 8001c12:	4651      	mov	r1, sl
 8001c14:	ebb2 0801 	subs.w	r8, r2, r1
 8001c18:	4659      	mov	r1, fp
 8001c1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c32:	4690      	mov	r8, r2
 8001c34:	4699      	mov	r9, r3
 8001c36:	4623      	mov	r3, r4
 8001c38:	eb18 0303 	adds.w	r3, r8, r3
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	462b      	mov	r3, r5
 8001c40:	eb49 0303 	adc.w	r3, r9, r3
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c52:	4629      	mov	r1, r5
 8001c54:	024b      	lsls	r3, r1, #9
 8001c56:	4621      	mov	r1, r4
 8001c58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	024a      	lsls	r2, r1, #9
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c66:	2200      	movs	r2, #0
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c70:	f7fe faea 	bl	8000248 <__aeabi_uldivmod>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c7c:	e058      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7e:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	099b      	lsrs	r3, r3, #6
 8001c84:	2200      	movs	r2, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	4611      	mov	r1, r2
 8001c8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c8e:	623b      	str	r3, [r7, #32]
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
 8001c94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c98:	4642      	mov	r2, r8
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	f04f 0000 	mov.w	r0, #0
 8001ca0:	f04f 0100 	mov.w	r1, #0
 8001ca4:	0159      	lsls	r1, r3, #5
 8001ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001caa:	0150      	lsls	r0, r2, #5
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ccc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	00eb      	lsls	r3, r5, #3
 8001ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce6:	00e2      	lsls	r2, r4, #3
 8001ce8:	4614      	mov	r4, r2
 8001cea:	461d      	mov	r5, r3
 8001cec:	4643      	mov	r3, r8
 8001cee:	18e3      	adds	r3, r4, r3
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	eb45 0303 	adc.w	r3, r5, r3
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d06:	4629      	mov	r1, r5
 8001d08:	028b      	lsls	r3, r1, #10
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d10:	4621      	mov	r1, r4
 8001d12:	028a      	lsls	r2, r1, #10
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	61fa      	str	r2, [r7, #28]
 8001d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d24:	f7fe fa90 	bl	8000248 <__aeabi_uldivmod>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d4a:	e002      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3750      	adds	r7, #80	; 0x50
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	00f42400 	.word	0x00f42400
 8001d68:	007a1200 	.word	0x007a1200

08001d6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d88:	f7ff fff0 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0a9b      	lsrs	r3, r3, #10
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	080030ac 	.word	0x080030ac

08001dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db0:	f7ff ffdc 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0b5b      	lsrs	r3, r3, #13
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4903      	ldr	r1, [pc, #12]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	080030ac 	.word	0x080030ac

08001dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d012      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001dfc:	4b69      	ldr	r3, [pc, #420]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e06:	6093      	str	r3, [r2, #8]
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	4964      	ldr	r1, [pc, #400]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d017      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3c:	4959      	ldr	r1, [pc, #356]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d017      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e6a:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	494a      	ldr	r1, [pc, #296]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e88:	d101      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 808b 	beq.w	8001fce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	4a39      	ldr	r2, [pc, #228]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec4:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ed0:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a34      	ldr	r2, [pc, #208]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001edc:	f7fe ff3e 	bl	8000d5c <HAL_GetTick>
 8001ee0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee4:	f7fe ff3a 	bl	8000d5c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e38f      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f02:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d035      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d02e      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d114      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe ff02 	bl	8000d5c <HAL_GetTick>
 8001f58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7fe fefe 	bl	8000d5c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e351      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ee      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f8a:	d111      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f9a:	400b      	ands	r3, r1
 8001f9c:	4901      	ldr	r1, [pc, #4]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	0ffffcff 	.word	0x0ffffcff
 8001fb0:	4bac      	ldr	r3, [pc, #688]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4aab      	ldr	r2, [pc, #684]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fba:	6093      	str	r3, [r2, #8]
 8001fbc:	4ba9      	ldr	r3, [pc, #676]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc8:	49a6      	ldr	r1, [pc, #664]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d010      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fda:	4ba2      	ldr	r3, [pc, #648]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe0:	4aa0      	ldr	r2, [pc, #640]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fea:	4b9e      	ldr	r3, [pc, #632]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	499b      	ldr	r1, [pc, #620]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00a      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002008:	4b96      	ldr	r3, [pc, #600]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002016:	4993      	ldr	r1, [pc, #588]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800202a:	4b8e      	ldr	r3, [pc, #568]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002038:	498a      	ldr	r1, [pc, #552]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800204c:	4b85      	ldr	r3, [pc, #532]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205a:	4982      	ldr	r1, [pc, #520]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800206e:	4b7d      	ldr	r3, [pc, #500]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002074:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	4979      	ldr	r1, [pc, #484]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002090:	4b74      	ldr	r3, [pc, #464]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	f023 0203 	bic.w	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4971      	ldr	r1, [pc, #452]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020b2:	4b6c      	ldr	r3, [pc, #432]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f023 020c 	bic.w	r2, r3, #12
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c0:	4968      	ldr	r1, [pc, #416]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020d4:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	4960      	ldr	r1, [pc, #384]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020f6:	4b5b      	ldr	r3, [pc, #364]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002104:	4957      	ldr	r1, [pc, #348]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002118:	4b52      	ldr	r3, [pc, #328]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	494f      	ldr	r1, [pc, #316]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800213a:	4b4a      	ldr	r3, [pc, #296]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	4946      	ldr	r1, [pc, #280]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800215c:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	493e      	ldr	r1, [pc, #248]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218c:	4935      	ldr	r1, [pc, #212]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ae:	492d      	ldr	r1, [pc, #180]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d011      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021c2:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d0:	4924      	ldr	r1, [pc, #144]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021e0:	d101      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002208:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002210:	4914      	ldr	r1, [pc, #80]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002234:	490b      	ldr	r1, [pc, #44]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00f      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002258:	4902      	ldr	r1, [pc, #8]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002260:	e002      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00b      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002274:	4b8a      	ldr	r3, [pc, #552]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800227a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	4986      	ldr	r1, [pc, #536]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00b      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002298:	4b81      	ldr	r3, [pc, #516]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800229e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a8:	497d      	ldr	r1, [pc, #500]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d006      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80d6 	beq.w	8002470 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022c4:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a75      	ldr	r2, [pc, #468]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d0:	f7fe fd44 	bl	8000d5c <HAL_GetTick>
 80022d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022d8:	f7fe fd40 	bl	8000d5c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e195      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022ea:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d021      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11d      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002318:	4b61      	ldr	r3, [pc, #388]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800231a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231e:	0e1b      	lsrs	r3, r3, #24
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	019a      	lsls	r2, r3, #6
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	431a      	orrs	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	061b      	lsls	r3, r3, #24
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	071b      	lsls	r3, r3, #28
 800233e:	4958      	ldr	r1, [pc, #352]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d004      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02e      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002370:	d129      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002372:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002380:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002386:	0f1b      	lsrs	r3, r3, #28
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	019a      	lsls	r2, r3, #6
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	071b      	lsls	r3, r3, #28
 80023a6:	493e      	ldr	r1, [pc, #248]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023ae:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b4:	f023 021f 	bic.w	r2, r3, #31
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	3b01      	subs	r3, #1
 80023be:	4938      	ldr	r1, [pc, #224]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01d      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023d2:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d8:	0e1b      	lsrs	r3, r3, #24
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e6:	0f1b      	lsrs	r3, r3, #28
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	019a      	lsls	r2, r3, #6
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	061b      	lsls	r3, r3, #24
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	071b      	lsls	r3, r3, #28
 8002406:	4926      	ldr	r1, [pc, #152]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d011      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	019a      	lsls	r2, r3, #6
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	041b      	lsls	r3, r3, #16
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	071b      	lsls	r3, r3, #28
 8002436:	491a      	ldr	r1, [pc, #104]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002444:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800244a:	f7fe fc87 	bl	8000d5c <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002452:	f7fe fc83 	bl	8000d5c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d901      	bls.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0d8      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002464:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b01      	cmp	r3, #1
 8002474:	f040 80ce 	bne.w	8002614 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002484:	f7fe fc6a 	bl	8000d5c <HAL_GetTick>
 8002488:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800248a:	e00b      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800248c:	f7fe fc66 	bl	8000d5c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d904      	bls.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0bb      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024a4:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024b0:	d0ec      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d02e      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d12a      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	0f1b      	lsrs	r3, r3, #28
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	019a      	lsls	r2, r3, #6
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	061b      	lsls	r3, r3, #24
 8002508:	431a      	orrs	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	071b      	lsls	r3, r3, #28
 800250e:	4944      	ldr	r1, [pc, #272]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002516:	4b42      	ldr	r3, [pc, #264]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800251c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	3b01      	subs	r3, #1
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	493d      	ldr	r1, [pc, #244]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d022      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002544:	d11d      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	0e1b      	lsrs	r3, r3, #24
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002554:	4b32      	ldr	r3, [pc, #200]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	0f1b      	lsrs	r3, r3, #28
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	019a      	lsls	r2, r3, #6
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	431a      	orrs	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	061b      	lsls	r3, r3, #24
 8002574:	431a      	orrs	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	071b      	lsls	r3, r3, #28
 800257a:	4929      	ldr	r1, [pc, #164]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d028      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	0e1b      	lsrs	r3, r3, #24
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	019a      	lsls	r2, r3, #6
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	431a      	orrs	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	071b      	lsls	r3, r3, #28
 80025c2:	4917      	ldr	r1, [pc, #92]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	4911      	ldr	r1, [pc, #68]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ec:	f7fe fbb6 	bl	8000d5c <HAL_GetTick>
 80025f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025f4:	f7fe fbb2 	bl	8000d5c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e007      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800260e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002612:	d1ef      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3720      	adds	r7, #32
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e040      	b.n	80026b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe f868 	bl	800071c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2224      	movs	r2, #36	; 0x24
 8002650:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f8b0 	bl	80027c8 <UART_SetConfig>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e022      	b.n	80026b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fb08 	bl	8002c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800268e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800269e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fb8f 	bl	8002dd4 <UART_CheckIdleState>
 80026b6:	4603      	mov	r3, r0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d171      	bne.n	80027bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_UART_Transmit+0x24>
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e06a      	b.n	80027be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2221      	movs	r2, #33	; 0x21
 80026f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f6:	f7fe fb31 	bl	8000d5c <HAL_GetTick>
 80026fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	88fa      	ldrh	r2, [r7, #6]
 8002708:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002714:	d108      	bne.n	8002728 <HAL_UART_Transmit+0x68>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	e003      	b.n	8002730 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002730:	e02c      	b.n	800278c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fb96 	bl	8002e6e <UART_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e038      	b.n	80027be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002760:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3302      	adds	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e007      	b.n	800277a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	3301      	adds	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1cc      	bne.n	8002732 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2200      	movs	r2, #0
 80027a0:	2140      	movs	r1, #64	; 0x40
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fb63 	bl	8002e6e <UART_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e005      	b.n	80027be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4ba6      	ldr	r3, [pc, #664]	; (8002a8c <UART_SetConfig+0x2c4>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	6979      	ldr	r1, [r7, #20]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	430a      	orrs	r2, r1
 8002838:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a94      	ldr	r2, [pc, #592]	; (8002a90 <UART_SetConfig+0x2c8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d120      	bne.n	8002886 <UART_SetConfig+0xbe>
 8002844:	4b93      	ldr	r3, [pc, #588]	; (8002a94 <UART_SetConfig+0x2cc>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b03      	cmp	r3, #3
 8002850:	d816      	bhi.n	8002880 <UART_SetConfig+0xb8>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <UART_SetConfig+0x90>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	08002869 	.word	0x08002869
 800285c:	08002875 	.word	0x08002875
 8002860:	0800286f 	.word	0x0800286f
 8002864:	0800287b 	.word	0x0800287b
 8002868:	2301      	movs	r3, #1
 800286a:	77fb      	strb	r3, [r7, #31]
 800286c:	e150      	b.n	8002b10 <UART_SetConfig+0x348>
 800286e:	2302      	movs	r3, #2
 8002870:	77fb      	strb	r3, [r7, #31]
 8002872:	e14d      	b.n	8002b10 <UART_SetConfig+0x348>
 8002874:	2304      	movs	r3, #4
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e14a      	b.n	8002b10 <UART_SetConfig+0x348>
 800287a:	2308      	movs	r3, #8
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e147      	b.n	8002b10 <UART_SetConfig+0x348>
 8002880:	2310      	movs	r3, #16
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e144      	b.n	8002b10 <UART_SetConfig+0x348>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a83      	ldr	r2, [pc, #524]	; (8002a98 <UART_SetConfig+0x2d0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d132      	bne.n	80028f6 <UART_SetConfig+0x12e>
 8002890:	4b80      	ldr	r3, [pc, #512]	; (8002a94 <UART_SetConfig+0x2cc>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d828      	bhi.n	80028f0 <UART_SetConfig+0x128>
 800289e:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <UART_SetConfig+0xdc>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	080028d9 	.word	0x080028d9
 80028a8:	080028f1 	.word	0x080028f1
 80028ac:	080028f1 	.word	0x080028f1
 80028b0:	080028f1 	.word	0x080028f1
 80028b4:	080028e5 	.word	0x080028e5
 80028b8:	080028f1 	.word	0x080028f1
 80028bc:	080028f1 	.word	0x080028f1
 80028c0:	080028f1 	.word	0x080028f1
 80028c4:	080028df 	.word	0x080028df
 80028c8:	080028f1 	.word	0x080028f1
 80028cc:	080028f1 	.word	0x080028f1
 80028d0:	080028f1 	.word	0x080028f1
 80028d4:	080028eb 	.word	0x080028eb
 80028d8:	2300      	movs	r3, #0
 80028da:	77fb      	strb	r3, [r7, #31]
 80028dc:	e118      	b.n	8002b10 <UART_SetConfig+0x348>
 80028de:	2302      	movs	r3, #2
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	e115      	b.n	8002b10 <UART_SetConfig+0x348>
 80028e4:	2304      	movs	r3, #4
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e112      	b.n	8002b10 <UART_SetConfig+0x348>
 80028ea:	2308      	movs	r3, #8
 80028ec:	77fb      	strb	r3, [r7, #31]
 80028ee:	e10f      	b.n	8002b10 <UART_SetConfig+0x348>
 80028f0:	2310      	movs	r3, #16
 80028f2:	77fb      	strb	r3, [r7, #31]
 80028f4:	e10c      	b.n	8002b10 <UART_SetConfig+0x348>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a68      	ldr	r2, [pc, #416]	; (8002a9c <UART_SetConfig+0x2d4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d120      	bne.n	8002942 <UART_SetConfig+0x17a>
 8002900:	4b64      	ldr	r3, [pc, #400]	; (8002a94 <UART_SetConfig+0x2cc>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800290a:	2b30      	cmp	r3, #48	; 0x30
 800290c:	d013      	beq.n	8002936 <UART_SetConfig+0x16e>
 800290e:	2b30      	cmp	r3, #48	; 0x30
 8002910:	d814      	bhi.n	800293c <UART_SetConfig+0x174>
 8002912:	2b20      	cmp	r3, #32
 8002914:	d009      	beq.n	800292a <UART_SetConfig+0x162>
 8002916:	2b20      	cmp	r3, #32
 8002918:	d810      	bhi.n	800293c <UART_SetConfig+0x174>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <UART_SetConfig+0x15c>
 800291e:	2b10      	cmp	r3, #16
 8002920:	d006      	beq.n	8002930 <UART_SetConfig+0x168>
 8002922:	e00b      	b.n	800293c <UART_SetConfig+0x174>
 8002924:	2300      	movs	r3, #0
 8002926:	77fb      	strb	r3, [r7, #31]
 8002928:	e0f2      	b.n	8002b10 <UART_SetConfig+0x348>
 800292a:	2302      	movs	r3, #2
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	e0ef      	b.n	8002b10 <UART_SetConfig+0x348>
 8002930:	2304      	movs	r3, #4
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e0ec      	b.n	8002b10 <UART_SetConfig+0x348>
 8002936:	2308      	movs	r3, #8
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e0e9      	b.n	8002b10 <UART_SetConfig+0x348>
 800293c:	2310      	movs	r3, #16
 800293e:	77fb      	strb	r3, [r7, #31]
 8002940:	e0e6      	b.n	8002b10 <UART_SetConfig+0x348>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a56      	ldr	r2, [pc, #344]	; (8002aa0 <UART_SetConfig+0x2d8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d120      	bne.n	800298e <UART_SetConfig+0x1c6>
 800294c:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <UART_SetConfig+0x2cc>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002956:	2bc0      	cmp	r3, #192	; 0xc0
 8002958:	d013      	beq.n	8002982 <UART_SetConfig+0x1ba>
 800295a:	2bc0      	cmp	r3, #192	; 0xc0
 800295c:	d814      	bhi.n	8002988 <UART_SetConfig+0x1c0>
 800295e:	2b80      	cmp	r3, #128	; 0x80
 8002960:	d009      	beq.n	8002976 <UART_SetConfig+0x1ae>
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d810      	bhi.n	8002988 <UART_SetConfig+0x1c0>
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <UART_SetConfig+0x1a8>
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d006      	beq.n	800297c <UART_SetConfig+0x1b4>
 800296e:	e00b      	b.n	8002988 <UART_SetConfig+0x1c0>
 8002970:	2300      	movs	r3, #0
 8002972:	77fb      	strb	r3, [r7, #31]
 8002974:	e0cc      	b.n	8002b10 <UART_SetConfig+0x348>
 8002976:	2302      	movs	r3, #2
 8002978:	77fb      	strb	r3, [r7, #31]
 800297a:	e0c9      	b.n	8002b10 <UART_SetConfig+0x348>
 800297c:	2304      	movs	r3, #4
 800297e:	77fb      	strb	r3, [r7, #31]
 8002980:	e0c6      	b.n	8002b10 <UART_SetConfig+0x348>
 8002982:	2308      	movs	r3, #8
 8002984:	77fb      	strb	r3, [r7, #31]
 8002986:	e0c3      	b.n	8002b10 <UART_SetConfig+0x348>
 8002988:	2310      	movs	r3, #16
 800298a:	77fb      	strb	r3, [r7, #31]
 800298c:	e0c0      	b.n	8002b10 <UART_SetConfig+0x348>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a44      	ldr	r2, [pc, #272]	; (8002aa4 <UART_SetConfig+0x2dc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d125      	bne.n	80029e4 <UART_SetConfig+0x21c>
 8002998:	4b3e      	ldr	r3, [pc, #248]	; (8002a94 <UART_SetConfig+0x2cc>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029a6:	d017      	beq.n	80029d8 <UART_SetConfig+0x210>
 80029a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ac:	d817      	bhi.n	80029de <UART_SetConfig+0x216>
 80029ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b2:	d00b      	beq.n	80029cc <UART_SetConfig+0x204>
 80029b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b8:	d811      	bhi.n	80029de <UART_SetConfig+0x216>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <UART_SetConfig+0x1fe>
 80029be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c2:	d006      	beq.n	80029d2 <UART_SetConfig+0x20a>
 80029c4:	e00b      	b.n	80029de <UART_SetConfig+0x216>
 80029c6:	2300      	movs	r3, #0
 80029c8:	77fb      	strb	r3, [r7, #31]
 80029ca:	e0a1      	b.n	8002b10 <UART_SetConfig+0x348>
 80029cc:	2302      	movs	r3, #2
 80029ce:	77fb      	strb	r3, [r7, #31]
 80029d0:	e09e      	b.n	8002b10 <UART_SetConfig+0x348>
 80029d2:	2304      	movs	r3, #4
 80029d4:	77fb      	strb	r3, [r7, #31]
 80029d6:	e09b      	b.n	8002b10 <UART_SetConfig+0x348>
 80029d8:	2308      	movs	r3, #8
 80029da:	77fb      	strb	r3, [r7, #31]
 80029dc:	e098      	b.n	8002b10 <UART_SetConfig+0x348>
 80029de:	2310      	movs	r3, #16
 80029e0:	77fb      	strb	r3, [r7, #31]
 80029e2:	e095      	b.n	8002b10 <UART_SetConfig+0x348>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2f      	ldr	r2, [pc, #188]	; (8002aa8 <UART_SetConfig+0x2e0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d125      	bne.n	8002a3a <UART_SetConfig+0x272>
 80029ee:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <UART_SetConfig+0x2cc>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029fc:	d017      	beq.n	8002a2e <UART_SetConfig+0x266>
 80029fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a02:	d817      	bhi.n	8002a34 <UART_SetConfig+0x26c>
 8002a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a08:	d00b      	beq.n	8002a22 <UART_SetConfig+0x25a>
 8002a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0e:	d811      	bhi.n	8002a34 <UART_SetConfig+0x26c>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <UART_SetConfig+0x254>
 8002a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a18:	d006      	beq.n	8002a28 <UART_SetConfig+0x260>
 8002a1a:	e00b      	b.n	8002a34 <UART_SetConfig+0x26c>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	77fb      	strb	r3, [r7, #31]
 8002a20:	e076      	b.n	8002b10 <UART_SetConfig+0x348>
 8002a22:	2302      	movs	r3, #2
 8002a24:	77fb      	strb	r3, [r7, #31]
 8002a26:	e073      	b.n	8002b10 <UART_SetConfig+0x348>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	77fb      	strb	r3, [r7, #31]
 8002a2c:	e070      	b.n	8002b10 <UART_SetConfig+0x348>
 8002a2e:	2308      	movs	r3, #8
 8002a30:	77fb      	strb	r3, [r7, #31]
 8002a32:	e06d      	b.n	8002b10 <UART_SetConfig+0x348>
 8002a34:	2310      	movs	r3, #16
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e06a      	b.n	8002b10 <UART_SetConfig+0x348>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <UART_SetConfig+0x2e4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d138      	bne.n	8002ab6 <UART_SetConfig+0x2ee>
 8002a44:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <UART_SetConfig+0x2cc>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002a4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a52:	d017      	beq.n	8002a84 <UART_SetConfig+0x2bc>
 8002a54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a58:	d82a      	bhi.n	8002ab0 <UART_SetConfig+0x2e8>
 8002a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5e:	d00b      	beq.n	8002a78 <UART_SetConfig+0x2b0>
 8002a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a64:	d824      	bhi.n	8002ab0 <UART_SetConfig+0x2e8>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <UART_SetConfig+0x2aa>
 8002a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6e:	d006      	beq.n	8002a7e <UART_SetConfig+0x2b6>
 8002a70:	e01e      	b.n	8002ab0 <UART_SetConfig+0x2e8>
 8002a72:	2300      	movs	r3, #0
 8002a74:	77fb      	strb	r3, [r7, #31]
 8002a76:	e04b      	b.n	8002b10 <UART_SetConfig+0x348>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	e048      	b.n	8002b10 <UART_SetConfig+0x348>
 8002a7e:	2304      	movs	r3, #4
 8002a80:	77fb      	strb	r3, [r7, #31]
 8002a82:	e045      	b.n	8002b10 <UART_SetConfig+0x348>
 8002a84:	2308      	movs	r3, #8
 8002a86:	77fb      	strb	r3, [r7, #31]
 8002a88:	e042      	b.n	8002b10 <UART_SetConfig+0x348>
 8002a8a:	bf00      	nop
 8002a8c:	efff69f3 	.word	0xefff69f3
 8002a90:	40011000 	.word	0x40011000
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40004400 	.word	0x40004400
 8002a9c:	40004800 	.word	0x40004800
 8002aa0:	40004c00 	.word	0x40004c00
 8002aa4:	40005000 	.word	0x40005000
 8002aa8:	40011400 	.word	0x40011400
 8002aac:	40007800 	.word	0x40007800
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e02c      	b.n	8002b10 <UART_SetConfig+0x348>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <UART_SetConfig+0x4bc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d125      	bne.n	8002b0c <UART_SetConfig+0x344>
 8002ac0:	4b71      	ldr	r3, [pc, #452]	; (8002c88 <UART_SetConfig+0x4c0>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002aca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ace:	d017      	beq.n	8002b00 <UART_SetConfig+0x338>
 8002ad0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ad4:	d817      	bhi.n	8002b06 <UART_SetConfig+0x33e>
 8002ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ada:	d00b      	beq.n	8002af4 <UART_SetConfig+0x32c>
 8002adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae0:	d811      	bhi.n	8002b06 <UART_SetConfig+0x33e>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <UART_SetConfig+0x326>
 8002ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aea:	d006      	beq.n	8002afa <UART_SetConfig+0x332>
 8002aec:	e00b      	b.n	8002b06 <UART_SetConfig+0x33e>
 8002aee:	2300      	movs	r3, #0
 8002af0:	77fb      	strb	r3, [r7, #31]
 8002af2:	e00d      	b.n	8002b10 <UART_SetConfig+0x348>
 8002af4:	2302      	movs	r3, #2
 8002af6:	77fb      	strb	r3, [r7, #31]
 8002af8:	e00a      	b.n	8002b10 <UART_SetConfig+0x348>
 8002afa:	2304      	movs	r3, #4
 8002afc:	77fb      	strb	r3, [r7, #31]
 8002afe:	e007      	b.n	8002b10 <UART_SetConfig+0x348>
 8002b00:	2308      	movs	r3, #8
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e004      	b.n	8002b10 <UART_SetConfig+0x348>
 8002b06:	2310      	movs	r3, #16
 8002b08:	77fb      	strb	r3, [r7, #31]
 8002b0a:	e001      	b.n	8002b10 <UART_SetConfig+0x348>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b18:	d15b      	bne.n	8002bd2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d828      	bhi.n	8002b72 <UART_SetConfig+0x3aa>
 8002b20:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <UART_SetConfig+0x360>)
 8002b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b26:	bf00      	nop
 8002b28:	08002b4d 	.word	0x08002b4d
 8002b2c:	08002b55 	.word	0x08002b55
 8002b30:	08002b5d 	.word	0x08002b5d
 8002b34:	08002b73 	.word	0x08002b73
 8002b38:	08002b63 	.word	0x08002b63
 8002b3c:	08002b73 	.word	0x08002b73
 8002b40:	08002b73 	.word	0x08002b73
 8002b44:	08002b73 	.word	0x08002b73
 8002b48:	08002b6b 	.word	0x08002b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b4c:	f7ff f91a 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8002b50:	61b8      	str	r0, [r7, #24]
        break;
 8002b52:	e013      	b.n	8002b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b54:	f7ff f92a 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 8002b58:	61b8      	str	r0, [r7, #24]
        break;
 8002b5a:	e00f      	b.n	8002b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b5c:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <UART_SetConfig+0x4c4>)
 8002b5e:	61bb      	str	r3, [r7, #24]
        break;
 8002b60:	e00c      	b.n	8002b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b62:	f7fe fffd 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8002b66:	61b8      	str	r0, [r7, #24]
        break;
 8002b68:	e008      	b.n	8002b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b6e:	61bb      	str	r3, [r7, #24]
        break;
 8002b70:	e004      	b.n	8002b7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	77bb      	strb	r3, [r7, #30]
        break;
 8002b7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d074      	beq.n	8002c6c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	005a      	lsls	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	441a      	add	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b0f      	cmp	r3, #15
 8002b9c:	d916      	bls.n	8002bcc <UART_SetConfig+0x404>
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba4:	d212      	bcs.n	8002bcc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f023 030f 	bic.w	r3, r3, #15
 8002bae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	89fb      	ldrh	r3, [r7, #14]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	89fa      	ldrh	r2, [r7, #14]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	e04f      	b.n	8002c6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	77bb      	strb	r3, [r7, #30]
 8002bd0:	e04c      	b.n	8002c6c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bd2:	7ffb      	ldrb	r3, [r7, #31]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d828      	bhi.n	8002c2a <UART_SetConfig+0x462>
 8002bd8:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <UART_SetConfig+0x418>)
 8002bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bde:	bf00      	nop
 8002be0:	08002c05 	.word	0x08002c05
 8002be4:	08002c0d 	.word	0x08002c0d
 8002be8:	08002c15 	.word	0x08002c15
 8002bec:	08002c2b 	.word	0x08002c2b
 8002bf0:	08002c1b 	.word	0x08002c1b
 8002bf4:	08002c2b 	.word	0x08002c2b
 8002bf8:	08002c2b 	.word	0x08002c2b
 8002bfc:	08002c2b 	.word	0x08002c2b
 8002c00:	08002c23 	.word	0x08002c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c04:	f7ff f8be 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8002c08:	61b8      	str	r0, [r7, #24]
        break;
 8002c0a:	e013      	b.n	8002c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c0c:	f7ff f8ce 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 8002c10:	61b8      	str	r0, [r7, #24]
        break;
 8002c12:	e00f      	b.n	8002c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <UART_SetConfig+0x4c4>)
 8002c16:	61bb      	str	r3, [r7, #24]
        break;
 8002c18:	e00c      	b.n	8002c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c1a:	f7fe ffa1 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8002c1e:	61b8      	str	r0, [r7, #24]
        break;
 8002c20:	e008      	b.n	8002c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c26:	61bb      	str	r3, [r7, #24]
        break;
 8002c28:	e004      	b.n	8002c34 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	77bb      	strb	r3, [r7, #30]
        break;
 8002c32:	bf00      	nop
    }

    if (pclk != 0U)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d018      	beq.n	8002c6c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	085a      	lsrs	r2, r3, #1
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	441a      	add	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b0f      	cmp	r3, #15
 8002c52:	d909      	bls.n	8002c68 <UART_SetConfig+0x4a0>
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5a:	d205      	bcs.n	8002c68 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	e001      	b.n	8002c6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c78:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40007c00 	.word	0x40007c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	00f42400 	.word	0x00f42400

08002c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01a      	beq.n	8002da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d8e:	d10a      	bne.n	8002da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
  }
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002de4:	f7fd ffba 	bl	8000d5c <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d10e      	bne.n	8002e16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f831 	bl	8002e6e <UART_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e027      	b.n	8002e66 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d10e      	bne.n	8002e42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f81b 	bl	8002e6e <UART_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e011      	b.n	8002e66 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b09c      	sub	sp, #112	; 0x70
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7e:	e0a7      	b.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e86:	f000 80a3 	beq.w	8002fd0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fd ff67 	bl	8000d5c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d13f      	bne.n	8002f20 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea8:	e853 3f00 	ldrex	r3, [r3]
 8002eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ec0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e6      	bne.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3308      	adds	r3, #8
 8002ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ef2:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ef4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e5      	bne.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e068      	b.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d050      	beq.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3c:	d148      	bne.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f46:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
 8002f68:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e6      	bne.n	8002f48 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3308      	adds	r3, #8
 8002f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	613b      	str	r3, [r7, #16]
   return(result);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3308      	adds	r3, #8
 8002f98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f9a:	623a      	str	r2, [r7, #32]
 8002f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	69f9      	ldr	r1, [r7, #28]
 8002fa0:	6a3a      	ldr	r2, [r7, #32]
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e5      	bne.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e010      	b.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69da      	ldr	r2, [r3, #28]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	f43f af48 	beq.w	8002e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3770      	adds	r7, #112	; 0x70
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <__libc_init_array>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	4d0d      	ldr	r5, [pc, #52]	; (8003034 <__libc_init_array+0x38>)
 8003000:	4c0d      	ldr	r4, [pc, #52]	; (8003038 <__libc_init_array+0x3c>)
 8003002:	1b64      	subs	r4, r4, r5
 8003004:	10a4      	asrs	r4, r4, #2
 8003006:	2600      	movs	r6, #0
 8003008:	42a6      	cmp	r6, r4
 800300a:	d109      	bne.n	8003020 <__libc_init_array+0x24>
 800300c:	4d0b      	ldr	r5, [pc, #44]	; (800303c <__libc_init_array+0x40>)
 800300e:	4c0c      	ldr	r4, [pc, #48]	; (8003040 <__libc_init_array+0x44>)
 8003010:	f000 f820 	bl	8003054 <_init>
 8003014:	1b64      	subs	r4, r4, r5
 8003016:	10a4      	asrs	r4, r4, #2
 8003018:	2600      	movs	r6, #0
 800301a:	42a6      	cmp	r6, r4
 800301c:	d105      	bne.n	800302a <__libc_init_array+0x2e>
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	f855 3b04 	ldr.w	r3, [r5], #4
 8003024:	4798      	blx	r3
 8003026:	3601      	adds	r6, #1
 8003028:	e7ee      	b.n	8003008 <__libc_init_array+0xc>
 800302a:	f855 3b04 	ldr.w	r3, [r5], #4
 800302e:	4798      	blx	r3
 8003030:	3601      	adds	r6, #1
 8003032:	e7f2      	b.n	800301a <__libc_init_array+0x1e>
 8003034:	080030c4 	.word	0x080030c4
 8003038:	080030c4 	.word	0x080030c4
 800303c:	080030c4 	.word	0x080030c4
 8003040:	080030c8 	.word	0x080030c8

08003044 <memset>:
 8003044:	4402      	add	r2, r0
 8003046:	4603      	mov	r3, r0
 8003048:	4293      	cmp	r3, r2
 800304a:	d100      	bne.n	800304e <memset+0xa>
 800304c:	4770      	bx	lr
 800304e:	f803 1b01 	strb.w	r1, [r3], #1
 8003052:	e7f9      	b.n	8003048 <memset+0x4>

08003054 <_init>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	bf00      	nop
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr

08003060 <_fini>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	bf00      	nop
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr
