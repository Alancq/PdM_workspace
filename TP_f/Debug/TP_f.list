
TP_f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  080087b8  080087b8  000187b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d4c  08008d4c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008d4c  08008d4c  00018d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d54  08008d54  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d54  08008d54  00018d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d58  08008d58  00018d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200001ec  08008f48  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08008f48  00020318  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e1f  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e3  00000000  00000000  00031039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00033520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00034180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a50b  00000000  00000000  00034cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113ca  00000000  00000000  0005f1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb8bc  00000000  00000000  000705ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016be69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b8  00000000  00000000  0016bebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ec 	.word	0x200001ec
 800021c:	00000000 	.word	0x00000000
 8000220:	080087a0 	.word	0x080087a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f0 	.word	0x200001f0
 800023c:	080087a0 	.word	0x080087a0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000678:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <main>:

void SystemClock_Config(void);


int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

	HAL_Init();
 80009e0:	f000 fd06 	bl	80013f0 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80009e4:	f000 f810 	bl	8000a08 <SystemClock_Config>
	if(!uartInit()) {
 80009e8:	f000 fc50 	bl	800128c <uartInit>
 80009ec:	4603      	mov	r3, r0
 80009ee:	f083 0301 	eor.w	r3, r3, #1
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <main+0x20>
			Error_Handler();
 80009f8:	f000 f878 	bl	8000aec <Error_Handler>
		}
	/* Initialize BSP Led for blue led (LED2) */

	lecturaFSM_init();
 80009fc:	f000 fb2a 	bl	8001054 <lecturaFSM_init>
			//HAL_Delay(1000);

			//debounceFSM_update();

			/* revisa si el boton fue apretado */
			lecturaFSM_update();
 8000a00:	f000 fb6a 	bl	80010d8 <lecturaFSM_update>
		{
 8000a04:	e7fc      	b.n	8000a00 <main+0x24>
	...

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	2234      	movs	r2, #52	; 0x34
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 fb54 	bl	80040c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a2c:	f001 fbe4 	bl	80021f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <SystemClock_Config+0xdc>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a2b      	ldr	r2, [pc, #172]	; (8000ae4 <SystemClock_Config+0xdc>)
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <SystemClock_Config+0xdc>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a48:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <SystemClock_Config+0xe0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a50:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <SystemClock_Config+0xe0>)
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <SystemClock_Config+0xe0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a7c:	2360      	movs	r3, #96	; 0x60
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a84:	2304      	movs	r3, #4
 8000a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fc11 	bl	80022b8 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a9c:	f000 f826 	bl	8000aec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000aa0:	f001 fbba 	bl	8002218 <HAL_PWREx_EnableOverDrive>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000aaa:	f000 f81f 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	2103      	movs	r1, #3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fea2 	bl	8002814 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ad6:	f000 f809 	bl	8000aec <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3750      	adds	r7, #80	; 0x50
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	BSP_LED_On(LED1);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 fc63 	bl	80013bc <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af6:	b672      	cpsid	i
}
 8000af8:	bf00      	nop
  __disable_irq();
  while (1)
 8000afa:	e7fe      	b.n	8000afa <Error_Handler+0xe>

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_MspInit+0x44>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <HAL_MspInit+0x44>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_MspInit+0x44>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x44>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x44>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x44>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b0b2      	sub	sp, #200	; 0xc8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	2290      	movs	r2, #144	; 0x90
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f003 faad 	bl	80040c4 <memset>
  if(huart->Instance==UART4)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a7f      	ldr	r2, [pc, #508]	; (8000d6c <HAL_UART_MspInit+0x228>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d15e      	bne.n	8000c32 <HAL_UART_MspInit+0xee>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 f86c 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b8e:	f7ff ffad 	bl	8000aec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b92:	4b77      	ldr	r3, [pc, #476]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a76      	ldr	r2, [pc, #472]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b74      	ldr	r3, [pc, #464]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b71      	ldr	r3, [pc, #452]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a70      	ldr	r2, [pc, #448]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b6e      	ldr	r3, [pc, #440]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b6b      	ldr	r3, [pc, #428]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a6a      	ldr	r2, [pc, #424]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b68      	ldr	r3, [pc, #416]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	485d      	ldr	r0, [pc, #372]	; (8000d74 <HAL_UART_MspInit+0x230>)
 8000c00:	f000 fd3a 	bl	8001678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c1e:	2308      	movs	r3, #8
 8000c20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4853      	ldr	r0, [pc, #332]	; (8000d78 <HAL_UART_MspInit+0x234>)
 8000c2c:	f000 fd24 	bl	8001678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c30:	e098      	b.n	8000d64 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a51      	ldr	r2, [pc, #324]	; (8000d7c <HAL_UART_MspInit+0x238>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d151      	bne.n	8000ce0 <HAL_UART_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c3c:	2340      	movs	r3, #64	; 0x40
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c40:	2300      	movs	r3, #0
 8000c42:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 f809 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8000c54:	f7ff ff4a 	bl	8000aec <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c58:	4b45      	ldr	r3, [pc, #276]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5c:	4a44      	ldr	r2, [pc, #272]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	6453      	str	r3, [r2, #68]	; 0x44
 8000c64:	4b42      	ldr	r3, [pc, #264]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b3f      	ldr	r3, [pc, #252]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	4a3e      	ldr	r2, [pc, #248]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7c:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4834      	ldr	r0, [pc, #208]	; (8000d80 <HAL_UART_MspInit+0x23c>)
 8000cb0:	f000 fce2 	bl	8001678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4829      	ldr	r0, [pc, #164]	; (8000d80 <HAL_UART_MspInit+0x23c>)
 8000cda:	f000 fccd 	bl	8001678 <HAL_GPIO_Init>
}
 8000cde:	e041      	b.n	8000d64 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <HAL_UART_MspInit+0x240>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d13c      	bne.n	8000d64 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f001 ffb1 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8000d04:	f7ff fef2 	bl	8000aec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_UART_MspInit+0x22c>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d52:	2307      	movs	r3, #7
 8000d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480a      	ldr	r0, [pc, #40]	; (8000d88 <HAL_UART_MspInit+0x244>)
 8000d60:	f000 fc8a 	bl	8001678 <HAL_GPIO_Init>
}
 8000d64:	bf00      	nop
 8000d66:	37c8      	adds	r7, #200	; 0xc8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40004c00 	.word	0x40004c00
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	40011000 	.word	0x40011000
 8000d80:	40020400 	.word	0x40020400
 8000d84:	40004800 	.word	0x40004800
 8000d88:	40020c00 	.word	0x40020c00

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 fb48 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return 1;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_kill>:

int _kill(int pid, int sig)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dfa:	f003 f927 	bl	800404c <__errno>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2216      	movs	r2, #22
 8000e02:	601a      	str	r2, [r3, #0]
  return -1;
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_exit>:

void _exit (int status)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ffe7 	bl	8000df0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e22:	e7fe      	b.n	8000e22 <_exit+0x12>

08000e24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e00a      	b.n	8000e4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf0      	blt.n	8000e36 <_read+0x12>
  }

  return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	e009      	b.n	8000e84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf1      	blt.n	8000e70 <_write+0x12>
  }
  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebe:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_isatty>:

int _isatty(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f003 f88c 	bl	800404c <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20080000 	.word	0x20080000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	20000208 	.word	0x20000208
 8000f68:	20000318 	.word	0x20000318

08000f6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f96:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f98:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fac:	4c0b      	ldr	r4, [pc, #44]	; (8000fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fba:	f7ff ffd7 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f003 f85d 	bl	800407c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc2:	f7ff fd0b 	bl	80009dc <main>
  bx  lr    
 8000fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000fd4:	08008d5c 	.word	0x08008d5c
  ldr r2, =_sbss
 8000fd8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000fdc:	20000318 	.word	0x20000318

08000fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe0:	e7fe      	b.n	8000fe0 <ADC_IRQHandler>

08000fe2 <delayInit>:
 *
 *  Created on: Mar 18, 2023
 *      Author: Alan Cornejo
 */
#include "API_delay.h"
void delayInit( delay_t * delay, tick_t duration ){
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
	  delay->duration=duration;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
	  delay->running=false;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	721a      	strb	r2, [r3, #8]

}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <delayRead>:
bool_t delayRead( delay_t * delay ){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	if((delay->running)==false){
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7a1b      	ldrb	r3, [r3, #8]
 8001010:	f083 0301 	eor.w	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d008      	beq.n	800102c <delayRead+0x28>
		delay->running=true;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	721a      	strb	r2, [r3, #8]
		delay->startTime=HAL_GetTick();
 8001020:	f000 fa38 	bl	8001494 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	e00e      	b.n	800104a <delayRead+0x46>
	}
	else{
		if(HAL_GetTick()-delay->startTime>=delay->duration){
 800102c:	f000 fa32 	bl	8001494 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	1ad2      	subs	r2, r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	d304      	bcc.n	800104a <delayRead+0x46>
			delay->running=false;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	721a      	strb	r2, [r3, #8]
			return true;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <delayRead+0x48>
		}
	}
	return false;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <lecturaFSM_init>:
#define PLAY 'p'
#define QUIT 'q'

static delay_t delay;
static delay_t delay2;
void lecturaFSM_init(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	i2c_init(&hi2c);
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <lecturaFSM_init+0x28>)
 800105a:	f000 f89d 	bl	8001198 <i2c_init>
	/* pone el estado inicial a BUTTON UP*/
	currentState = IDLE_STATE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <lecturaFSM_init+0x2c>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
	/*configura la estructura del delay*/
	delayInit(&delay, PTIME);
 8001064:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001068:	4806      	ldr	r0, [pc, #24]	; (8001084 <lecturaFSM_init+0x30>)
 800106a:	f7ff ffba 	bl	8000fe2 <delayInit>
	delayInit(&delay2, QTIME);
 800106e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <lecturaFSM_init+0x34>)
 8001074:	f7ff ffb5 	bl	8000fe2 <delayInit>

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000210 	.word	0x20000210
 8001080:	2000020c 	.word	0x2000020c
 8001084:	20000264 	.word	0x20000264
 8001088:	20000270 	.word	0x20000270

0800108c <max30205_read_temperature>:

uint8_t max30205_init(I2C_HandleTypeDef *hi2c) {
    return i2c_check_device(hi2c, MAX30205_ADDRESS);
}

float max30205_read_temperature(I2C_HandleTypeDef *hi2c) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af02      	add	r7, sp, #8
 8001092:	6078      	str	r0, [r7, #4]
    uint8_t data[2];
    i2c_read(hi2c, MAX30205_ADDRESS, MAX30205_TEMP_REG, data, 2);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2202      	movs	r2, #2
 800109a:	9200      	str	r2, [sp, #0]
 800109c:	2200      	movs	r2, #0
 800109e:	2148      	movs	r1, #72	; 0x48
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f8d5 	bl	8001250 <i2c_read>
    uint16_t raw_temp = (data[0] << 8) | data[1];
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	81fb      	strh	r3, [r7, #14]
    return raw_temp * 0.00390625f;
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80010d4 <max30205_read_temperature+0x48>
 80010c4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010c8:	eeb0 0a67 	vmov.f32	s0, s15
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	3b800000 	.word	0x3b800000

080010d8 <lecturaFSM_update>:
void lecturaFSM_update() {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
    switch (currentState) {
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <lecturaFSM_update+0xa0>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <lecturaFSM_update+0x14>
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d017      	beq.n	800111a <lecturaFSM_update+0x42>
 80010ea:	e03a      	b.n	8001162 <lecturaFSM_update+0x8a>
        case IDLE_STATE:
        	if (uartReceiveChar(&receivedChar)) {
 80010ec:	4823      	ldr	r0, [pc, #140]	; (800117c <lecturaFSM_update+0xa4>)
 80010ee:	f000 f93f 	bl	8001370 <uartReceiveChar>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <lecturaFSM_update+0x2e>
        		if (receivedChar ==PLAY) {
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <lecturaFSM_update+0xa4>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b70      	cmp	r3, #112	; 0x70
 80010fe:	d102      	bne.n	8001106 <lecturaFSM_update+0x2e>
        			currentState = READ_TEMPERATURE_STATE;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <lecturaFSM_update+0xa0>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
        		}
        	}
        	if (delayRead(&delay2))uartSendString((uint8_t *)PMSG);
 8001106:	481e      	ldr	r0, [pc, #120]	; (8001180 <lecturaFSM_update+0xa8>)
 8001108:	f7ff ff7c 	bl	8001004 <delayRead>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d02b      	beq.n	800116a <lecturaFSM_update+0x92>
 8001112:	481c      	ldr	r0, [pc, #112]	; (8001184 <lecturaFSM_update+0xac>)
 8001114:	f000 f8ea 	bl	80012ec <uartSendString>
        	break;
 8001118:	e027      	b.n	800116a <lecturaFSM_update+0x92>

        case READ_TEMPERATURE_STATE:
        	if (uartReceiveChar(&receivedChar)) {
 800111a:	4818      	ldr	r0, [pc, #96]	; (800117c <lecturaFSM_update+0xa4>)
 800111c:	f000 f928 	bl	8001370 <uartReceiveChar>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d007      	beq.n	8001136 <lecturaFSM_update+0x5e>
        		if (receivedChar == QUIT) {
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <lecturaFSM_update+0xa4>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b71      	cmp	r3, #113	; 0x71
 800112c:	d11f      	bne.n	800116e <lecturaFSM_update+0x96>
        			currentState = IDLE_STATE;
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <lecturaFSM_update+0xa0>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
            		//uartSendString((uint8_t *)"Temperature: ");
            		uartSendFloat(temperature);
            		uartSendString((uint8_t *)" C\r\n");
            	}
            }
            break;
 8001134:	e01b      	b.n	800116e <lecturaFSM_update+0x96>
            	if (delayRead(&delay)){
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <lecturaFSM_update+0xb0>)
 8001138:	f7ff ff64 	bl	8001004 <delayRead>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d015      	beq.n	800116e <lecturaFSM_update+0x96>
            		float temperature = max30205_read_temperature(&hi2c);
 8001142:	4812      	ldr	r0, [pc, #72]	; (800118c <lecturaFSM_update+0xb4>)
 8001144:	f7ff ffa2 	bl	800108c <max30205_read_temperature>
 8001148:	ed87 0a01 	vstr	s0, [r7, #4]
            		uartSendString((uint8_t *)QMSG);
 800114c:	4810      	ldr	r0, [pc, #64]	; (8001190 <lecturaFSM_update+0xb8>)
 800114e:	f000 f8cd 	bl	80012ec <uartSendString>
            		uartSendFloat(temperature);
 8001152:	ed97 0a01 	vldr	s0, [r7, #4]
 8001156:	f000 f8ed 	bl	8001334 <uartSendFloat>
            		uartSendString((uint8_t *)" C\r\n");
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <lecturaFSM_update+0xbc>)
 800115c:	f000 f8c6 	bl	80012ec <uartSendString>
            break;
 8001160:	e005      	b.n	800116e <lecturaFSM_update+0x96>

        default:
            currentState = IDLE_STATE;
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <lecturaFSM_update+0xa0>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
            break;
 8001168:	e002      	b.n	8001170 <lecturaFSM_update+0x98>
        	break;
 800116a:	bf00      	nop
 800116c:	e000      	b.n	8001170 <lecturaFSM_update+0x98>
            break;
 800116e:	bf00      	nop
    }
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000020c 	.word	0x2000020c
 800117c:	2000020d 	.word	0x2000020d
 8001180:	20000270 	.word	0x20000270
 8001184:	080087b8 	.word	0x080087b8
 8001188:	20000264 	.word	0x20000264
 800118c:	20000210 	.word	0x20000210
 8001190:	080087d8 	.word	0x080087d8
 8001194:	080087e8 	.word	0x080087e8

08001198 <i2c_init>:
void i2c_init(I2C_HandleTypeDef *hi2c) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <i2c_init+0xa8>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <i2c_init+0xa8>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	6313      	str	r3, [r2, #48]	; 0x30
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <i2c_init+0xa8>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_I2C1_CLK_ENABLE();
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <i2c_init+0xa8>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	4a20      	ldr	r2, [pc, #128]	; (8001240 <i2c_init+0xa8>)
 80011be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c2:	6413      	str	r3, [r2, #64]	; 0x40
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <i2c_init+0xa8>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80011e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e6:	2312      	movs	r3, #18
 80011e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f2:	2304      	movs	r3, #4
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4811      	ldr	r0, [pc, #68]	; (8001244 <i2c_init+0xac>)
 80011fe:	f000 fa3b 	bl	8001678 <HAL_GPIO_Init>

	hi2c->Instance = I2C1;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a10      	ldr	r2, [pc, #64]	; (8001248 <i2c_init+0xb0>)
 8001206:	601a      	str	r2, [r3, #0]
	hi2c->Init.Timing = 0x00503D5A; // Configuración de Timing para 400 kHz
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <i2c_init+0xb4>)
 800120c:	605a      	str	r2, [r3, #4]
	hi2c->Init.OwnAddress1 = 0;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
	HAL_I2C_Init(hi2c);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 fbe6 	bl	8001a04 <HAL_I2C_Init>
}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40020400 	.word	0x40020400
 8001248:	40005400 	.word	0x40005400
 800124c:	00503d5a 	.word	0x00503d5a

08001250 <i2c_read>:
void i2c_read(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t reg, uint8_t *data, uint16_t size) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af04      	add	r7, sp, #16
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	460b      	mov	r3, r1
 800125c:	72fb      	strb	r3, [r7, #11]
 800125e:	4613      	mov	r3, r2
 8001260:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Read(hi2c, addr << 1, reg, I2C_MEMADD_SIZE_8BIT, data, size, 100);
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	b29b      	uxth	r3, r3
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	b299      	uxth	r1, r3
 800126a:	7abb      	ldrb	r3, [r7, #10]
 800126c:	b29a      	uxth	r2, r3
 800126e:	2364      	movs	r3, #100	; 0x64
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	8b3b      	ldrh	r3, [r7, #24]
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 fc5b 	bl	8001b38 <HAL_I2C_Mem_Read>
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <uartInit>:
#include "main.h"
#define BAUD_RATE 9600
#define INIT_MSG "Uart Inicializada (115200 8N1)\n\r"

bool_t uartInit()
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
    // Configurar y habilitar el periférico UART utilizando HAL
    huart.Instance = USARTx; // Reemplazar USARTx por el USART utilizado
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <uartInit+0x54>)
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <uartInit+0x58>)
 8001294:	601a      	str	r2, [r3, #0]
    huart.Init.BaudRate = 115200;
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <uartInit+0x54>)
 8001298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800129c:	605a      	str	r2, [r3, #4]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <uartInit+0x54>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <uartInit+0x54>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <uartInit+0x54>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <uartInit+0x54>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <uartInit+0x54>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <uartInit+0x54>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart) != HAL_OK)
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <uartInit+0x54>)
 80012c4:	f002 f8f4 	bl	80034b0 <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <uartInit+0x46>
    {
        return false;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e003      	b.n	80012da <uartInit+0x4e>
    }
    uartSendString((uint8_t *)INIT_MSG);
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <uartInit+0x5c>)
 80012d4:	f000 f80a 	bl	80012ec <uartSendString>
    return true;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000027c 	.word	0x2000027c
 80012e4:	40004800 	.word	0x40004800
 80012e8:	080087f0 	.word	0x080087f0

080012ec <uartSendString>:

void uartSendString(uint8_t *pstring) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	assert(pstring != NULL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <uartSendString+0x1a>
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <uartSendString+0x38>)
 80012fc:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <uartSendString+0x3c>)
 80012fe:	2121      	movs	r1, #33	; 0x21
 8001300:	480a      	ldr	r0, [pc, #40]	; (800132c <uartSendString+0x40>)
 8001302:	f002 fe85 	bl	8004010 <__assert_func>
    HAL_UART_Transmit(&huart, pstring, strlen((const char *)pstring), HAL_MAX_DELAY);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7fe ff9a 	bl	8000240 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <uartSendString+0x44>)
 8001318:	f002 f918 	bl	800354c <HAL_UART_Transmit>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	08008814 	.word	0x08008814
 8001328:	0800887c 	.word	0x0800887c
 800132c:	08008824 	.word	0x08008824
 8001330:	2000027c 	.word	0x2000027c

08001334 <uartSendFloat>:
	assert(pstring != NULL);
	assert(size!=0);
    HAL_UART_Transmit(&huart, pstring, size, HAL_MAX_DELAY);
}

void uartSendFloat(float value) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af02      	add	r7, sp, #8
 800133a:	ed87 0a01 	vstr	s0, [r7, #4]
    char buffer[32];
    snprintf(buffer, sizeof(buffer), "%.2f", value); // Convertir el valor float a una cadena
 800133e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001342:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	ed8d 7b00 	vstr	d7, [sp]
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <uartSendFloat+0x38>)
 8001350:	2120      	movs	r1, #32
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fe66 	bl	8005024 <sniprintf>
    uartSendString((uint8_t *)buffer); // Enviar la cadena a través de UART
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffc5 	bl	80012ec <uartSendString>
}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	0800884c 	.word	0x0800884c

08001370 <uartReceiveChar>:
void uartReceiveStringSize(uint8_t * pstring, uint16_t size) {
	assert(pstring != NULL);
	assert(size!=0);
    HAL_UART_Receive(&huart, pstring, size, HAL_MAX_DELAY);
}
bool_t uartReceiveChar(uint8_t *pchar) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    assert(pchar != NULL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <uartReceiveChar+0x1a>
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <uartReceiveChar+0x3c>)
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <uartReceiveChar+0x40>)
 8001382:	2135      	movs	r1, #53	; 0x35
 8001384:	480b      	ldr	r0, [pc, #44]	; (80013b4 <uartReceiveChar+0x44>)
 8001386:	f002 fe43 	bl	8004010 <__assert_func>
    if (HAL_UART_Receive(&huart, pchar, 1, 10) == HAL_OK) {
 800138a:	230a      	movs	r3, #10
 800138c:	2201      	movs	r2, #1
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <uartReceiveChar+0x48>)
 8001392:	f002 f95e 	bl	8003652 <HAL_UART_Receive>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <uartReceiveChar+0x30>
        return true;
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <uartReceiveChar+0x32>
    }
    return false;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	08008854 	.word	0x08008854
 80013b0:	0800888c 	.word	0x0800888c
 80013b4:	08008824 	.word	0x08008824
 80013b8:	2000027c 	.word	0x2000027c

080013bc <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <BSP_LED_On+0x2c>)
 80013ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <BSP_LED_On+0x30>)
 80013d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013d6:	2201      	movs	r2, #1
 80013d8:	4619      	mov	r1, r3
 80013da:	f000 faf9 	bl	80019d0 <HAL_GPIO_WritePin>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000004 	.word	0x20000004
 80013ec:	0800889c 	.word	0x0800889c

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f90b 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f806 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff fb7c 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x54>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x58>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f917 	bl	800165e <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001448:	f000 f8ed 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <HAL_InitTick+0x5c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000000 	.word	0x20000000
 8001464:	20000014 	.word	0x20000014
 8001468:	20000010 	.word	0x20000010

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000014 	.word	0x20000014
 8001490:	20000304 	.word	0x20000304

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000304 	.word	0x20000304

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <__NVIC_SetPriorityGrouping+0x40>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x40>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	05fa0000 	.word	0x05fa0000

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff47 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff5c 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff8e 	bl	8001564 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5d 	bl	8001510 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffb0 	bl	80015cc <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e175      	b.n	8001984 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f040 8164 	bne.w	800197e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d005      	beq.n	80016ce <HAL_GPIO_Init+0x56>
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d130      	bne.n	8001730 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001704:	2201      	movs	r2, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 0201 	and.w	r2, r3, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b03      	cmp	r3, #3
 800173a:	d017      	beq.n	800176c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d123      	bne.n	80017c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	08da      	lsrs	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3208      	adds	r2, #8
 8001780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0203 	and.w	r2, r3, #3
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80be 	beq.w	800197e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	4b66      	ldr	r3, [pc, #408]	; (800199c <HAL_GPIO_Init+0x324>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a65      	ldr	r2, [pc, #404]	; (800199c <HAL_GPIO_Init+0x324>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b63      	ldr	r3, [pc, #396]	; (800199c <HAL_GPIO_Init+0x324>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800181a:	4a61      	ldr	r2, [pc, #388]	; (80019a0 <HAL_GPIO_Init+0x328>)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_GPIO_Init+0x32c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d037      	beq.n	80018b6 <HAL_GPIO_Init+0x23e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <HAL_GPIO_Init+0x330>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d031      	beq.n	80018b2 <HAL_GPIO_Init+0x23a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a56      	ldr	r2, [pc, #344]	; (80019ac <HAL_GPIO_Init+0x334>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d02b      	beq.n	80018ae <HAL_GPIO_Init+0x236>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a55      	ldr	r2, [pc, #340]	; (80019b0 <HAL_GPIO_Init+0x338>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d025      	beq.n	80018aa <HAL_GPIO_Init+0x232>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a54      	ldr	r2, [pc, #336]	; (80019b4 <HAL_GPIO_Init+0x33c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d01f      	beq.n	80018a6 <HAL_GPIO_Init+0x22e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a53      	ldr	r2, [pc, #332]	; (80019b8 <HAL_GPIO_Init+0x340>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d019      	beq.n	80018a2 <HAL_GPIO_Init+0x22a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a52      	ldr	r2, [pc, #328]	; (80019bc <HAL_GPIO_Init+0x344>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_GPIO_Init+0x226>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <HAL_GPIO_Init+0x348>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00d      	beq.n	800189a <HAL_GPIO_Init+0x222>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a50      	ldr	r2, [pc, #320]	; (80019c4 <HAL_GPIO_Init+0x34c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d007      	beq.n	8001896 <HAL_GPIO_Init+0x21e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4f      	ldr	r2, [pc, #316]	; (80019c8 <HAL_GPIO_Init+0x350>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d101      	bne.n	8001892 <HAL_GPIO_Init+0x21a>
 800188e:	2309      	movs	r3, #9
 8001890:	e012      	b.n	80018b8 <HAL_GPIO_Init+0x240>
 8001892:	230a      	movs	r3, #10
 8001894:	e010      	b.n	80018b8 <HAL_GPIO_Init+0x240>
 8001896:	2308      	movs	r3, #8
 8001898:	e00e      	b.n	80018b8 <HAL_GPIO_Init+0x240>
 800189a:	2307      	movs	r3, #7
 800189c:	e00c      	b.n	80018b8 <HAL_GPIO_Init+0x240>
 800189e:	2306      	movs	r3, #6
 80018a0:	e00a      	b.n	80018b8 <HAL_GPIO_Init+0x240>
 80018a2:	2305      	movs	r3, #5
 80018a4:	e008      	b.n	80018b8 <HAL_GPIO_Init+0x240>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x240>
 80018aa:	2303      	movs	r3, #3
 80018ac:	e004      	b.n	80018b8 <HAL_GPIO_Init+0x240>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_Init+0x240>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x240>
 80018b6:	2300      	movs	r3, #0
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f002 0203 	and.w	r2, r2, #3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4093      	lsls	r3, r2
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018c8:	4935      	ldr	r1, [pc, #212]	; (80019a0 <HAL_GPIO_Init+0x328>)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_GPIO_Init+0x354>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fa:	4a34      	ldr	r2, [pc, #208]	; (80019cc <HAL_GPIO_Init+0x354>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001900:	4b32      	ldr	r3, [pc, #200]	; (80019cc <HAL_GPIO_Init+0x354>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001924:	4a29      	ldr	r2, [pc, #164]	; (80019cc <HAL_GPIO_Init+0x354>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <HAL_GPIO_Init+0x354>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <HAL_GPIO_Init+0x354>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_GPIO_Init+0x354>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <HAL_GPIO_Init+0x354>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3301      	adds	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	f67f ae86 	bls.w	8001698 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40013800 	.word	0x40013800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40021400 	.word	0x40021400
 80019bc:	40021800 	.word	0x40021800
 80019c0:	40021c00 	.word	0x40021c00
 80019c4:	40022000 	.word	0x40022000
 80019c8:	40022400 	.word	0x40022400
 80019cc:	40013c00 	.word	0x40013c00

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
 80019dc:	4613      	mov	r3, r2
 80019de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019ec:	e003      	b.n	80019f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019ee:	887b      	ldrh	r3, [r7, #2]
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	619a      	str	r2, [r3, #24]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07f      	b.n	8001b16 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f87a 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2224      	movs	r2, #36	; 0x24
 8001a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	e006      	b.n	8001a8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d104      	bne.n	8001a9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_I2C_Init+0x11c>)
 8001aaa:	430b      	orrs	r3, r1
 8001aac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001abc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69d9      	ldr	r1, [r3, #28]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1a      	ldr	r2, [r3, #32]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	02008000 	.word	0x02008000

08001b24 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	4608      	mov	r0, r1
 8001b42:	4611      	mov	r1, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	817b      	strh	r3, [r7, #10]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	813b      	strh	r3, [r7, #8]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	f040 80fd 	bne.w	8001d5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_I2C_Mem_Read+0x34>
 8001b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0f1      	b.n	8001d5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_I2C_Mem_Read+0x4e>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e0ea      	b.n	8001d5c <HAL_I2C_Mem_Read+0x224>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b8e:	f7ff fc81 	bl	8001494 <HAL_GetTick>
 8001b92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2319      	movs	r3, #25
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 f95b 	bl	8001e5c <I2C_WaitOnFlagUntilTimeout>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0d5      	b.n	8001d5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2222      	movs	r2, #34	; 0x22
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a3a      	ldr	r2, [r7, #32]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bd8:	88f8      	ldrh	r0, [r7, #6]
 8001bda:	893a      	ldrh	r2, [r7, #8]
 8001bdc:	8979      	ldrh	r1, [r7, #10]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	4603      	mov	r3, r0
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 f8bf 	bl	8001d6c <I2C_RequestMemoryRead>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0ad      	b.n	8001d5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2bff      	cmp	r3, #255	; 0xff
 8001c08:	d90e      	bls.n	8001c28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	22ff      	movs	r2, #255	; 0xff
 8001c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	8979      	ldrh	r1, [r7, #10]
 8001c18:	4b52      	ldr	r3, [pc, #328]	; (8001d64 <HAL_I2C_Mem_Read+0x22c>)
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 fab7 	bl	8002194 <I2C_TransferConfig>
 8001c26:	e00f      	b.n	8001c48 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	8979      	ldrh	r1, [r7, #10]
 8001c3a:	4b4a      	ldr	r3, [pc, #296]	; (8001d64 <HAL_I2C_Mem_Read+0x22c>)
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 faa6 	bl	8002194 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2104      	movs	r1, #4
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f902 	bl	8001e5c <I2C_WaitOnFlagUntilTimeout>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e07c      	b.n	8001d5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d034      	beq.n	8001d08 <HAL_I2C_Mem_Read+0x1d0>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d130      	bne.n	8001d08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	2200      	movs	r2, #0
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f8d3 	bl	8001e5c <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e04d      	b.n	8001d5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2bff      	cmp	r3, #255	; 0xff
 8001cc8:	d90e      	bls.n	8001ce8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	22ff      	movs	r2, #255	; 0xff
 8001cce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	8979      	ldrh	r1, [r7, #10]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 fa57 	bl	8002194 <I2C_TransferConfig>
 8001ce6:	e00f      	b.n	8001d08 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	8979      	ldrh	r1, [r7, #10]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 fa46 	bl	8002194 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d19a      	bne.n	8001c48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f920 	bl	8001f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e01a      	b.n	8001d5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_I2C_Mem_Read+0x230>)
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
  }
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	80002400 	.word	0x80002400
 8001d68:	fe00e800 	.word	0xfe00e800

08001d6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	817b      	strh	r3, [r7, #10]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	813b      	strh	r3, [r7, #8]
 8001d82:	4613      	mov	r3, r2
 8001d84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	8979      	ldrh	r1, [r7, #10]
 8001d8c:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <I2C_RequestMemoryRead+0xa4>)
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2300      	movs	r3, #0
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 f9fe 	bl	8002194 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	69b9      	ldr	r1, [r7, #24]
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f89d 	bl	8001edc <I2C_WaitOnTXISFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e02c      	b.n	8001e06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001db2:	893b      	ldrh	r3, [r7, #8]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
 8001dbc:	e015      	b.n	8001dea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dbe:	893b      	ldrh	r3, [r7, #8]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	69b9      	ldr	r1, [r7, #24]
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 f883 	bl	8001edc <I2C_WaitOnTXISFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e012      	b.n	8001e06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001de0:	893b      	ldrh	r3, [r7, #8]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2200      	movs	r2, #0
 8001df2:	2140      	movs	r1, #64	; 0x40
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f831 	bl	8001e5c <I2C_WaitOnFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	80002000 	.word	0x80002000

08001e14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d103      	bne.n	8001e32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d007      	beq.n	8001e50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	619a      	str	r2, [r3, #24]
  }
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e6c:	e022      	b.n	8001eb4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e74:	d01e      	beq.n	8001eb4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e76:	f7ff fb0d 	bl	8001494 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d302      	bcc.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d113      	bne.n	8001eb4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f043 0220 	orr.w	r2, r3, #32
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e00f      	b.n	8001ed4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d0cd      	beq.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ee8:	e02c      	b.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f870 	bl	8001fd4 <I2C_IsErrorOccurred>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e02a      	b.n	8001f54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f04:	d01e      	beq.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f06:	f7ff fac5 	bl	8001494 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d302      	bcc.n	8001f1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d113      	bne.n	8001f44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	f043 0220 	orr.w	r2, r3, #32
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e007      	b.n	8001f54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d1cb      	bne.n	8001eea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f68:	e028      	b.n	8001fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f830 	bl	8001fd4 <I2C_IsErrorOccurred>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e026      	b.n	8001fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7e:	f7ff fa89 	bl	8001494 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d302      	bcc.n	8001f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d113      	bne.n	8001fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e007      	b.n	8001fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d1cf      	bne.n	8001f6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d068      	beq.n	80020d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2210      	movs	r2, #16
 8002006:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002008:	e049      	b.n	800209e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002010:	d045      	beq.n	800209e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002012:	f7ff fa3f 	bl	8001494 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	429a      	cmp	r2, r3
 8002020:	d302      	bcc.n	8002028 <I2C_IsErrorOccurred+0x54>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d13a      	bne.n	800209e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800203a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800204a:	d121      	bne.n	8002090 <I2C_IsErrorOccurred+0xbc>
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002052:	d01d      	beq.n	8002090 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	2b20      	cmp	r3, #32
 8002058:	d01a      	beq.n	8002090 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002068:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800206a:	f7ff fa13 	bl	8001494 <HAL_GetTick>
 800206e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002070:	e00e      	b.n	8002090 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002072:	f7ff fa0f 	bl	8001494 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b19      	cmp	r3, #25
 800207e:	d907      	bls.n	8002090 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f043 0320 	orr.w	r3, r3, #32
 8002086:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800208e:	e006      	b.n	800209e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b20      	cmp	r3, #32
 800209c:	d1e9      	bne.n	8002072 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d003      	beq.n	80020b4 <I2C_IsErrorOccurred+0xe0>
 80020ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0aa      	beq.n	800200a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80020b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2220      	movs	r2, #32
 80020c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002116:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00b      	beq.n	8002140 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002138:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01c      	beq.n	8002182 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff fe63 	bl	8001e14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <I2C_IsErrorOccurred+0x1bc>)
 800215a:	400b      	ands	r3, r1
 800215c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	431a      	orrs	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002186:	4618      	mov	r0, r3
 8002188:	3728      	adds	r7, #40	; 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	fe00e800 	.word	0xfe00e800

08002194 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	817b      	strh	r3, [r7, #10]
 80021a2:	4613      	mov	r3, r2
 80021a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021a6:	897b      	ldrh	r3, [r7, #10]
 80021a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021ac:	7a7b      	ldrb	r3, [r7, #9]
 80021ae:	041b      	lsls	r3, r3, #16
 80021b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	4313      	orrs	r3, r2
 80021be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	0d5b      	lsrs	r3, r3, #21
 80021ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <I2C_TransferConfig+0x60>)
 80021d4:	430b      	orrs	r3, r1
 80021d6:	43db      	mvns	r3, r3
 80021d8:	ea02 0103 	and.w	r1, r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	03ff63ff 	.word	0x03ff63ff

080021f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40007000 	.word	0x40007000

08002218 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002246:	f7ff f925 	bl	8001494 <HAL_GetTick>
 800224a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800224c:	e009      	b.n	8002262 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800224e:	f7ff f921 	bl	8001494 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800225c:	d901      	bls.n	8002262 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e022      	b.n	80022a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226e:	d1ee      	bne.n	800224e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800227c:	f7ff f90a 	bl	8001494 <HAL_GetTick>
 8002280:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002282:	e009      	b.n	8002298 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002284:	f7ff f906 	bl	8001494 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002292:	d901      	bls.n	8002298 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e007      	b.n	80022a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022a4:	d1ee      	bne.n	8002284 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000

080022b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022c0:	2300      	movs	r3, #0
 80022c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e29b      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8087 	beq.w	80023ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022dc:	4b96      	ldr	r3, [pc, #600]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d00c      	beq.n	8002302 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e8:	4b93      	ldr	r3, [pc, #588]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d112      	bne.n	800231a <HAL_RCC_OscConfig+0x62>
 80022f4:	4b90      	ldr	r3, [pc, #576]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002300:	d10b      	bne.n	800231a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002302:	4b8d      	ldr	r3, [pc, #564]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d06c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x130>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d168      	bne.n	80023e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e275      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x7a>
 8002324:	4b84      	ldr	r3, [pc, #528]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a83      	ldr	r2, [pc, #524]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	e02e      	b.n	8002390 <HAL_RCC_OscConfig+0xd8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x9c>
 800233a:	4b7f      	ldr	r3, [pc, #508]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7e      	ldr	r2, [pc, #504]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b7c      	ldr	r3, [pc, #496]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7b      	ldr	r2, [pc, #492]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 800234c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xd8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0xc0>
 800235e:	4b76      	ldr	r3, [pc, #472]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a75      	ldr	r2, [pc, #468]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b73      	ldr	r3, [pc, #460]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a72      	ldr	r2, [pc, #456]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xd8>
 8002378:	4b6f      	ldr	r3, [pc, #444]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6e      	ldr	r2, [pc, #440]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b6c      	ldr	r3, [pc, #432]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a6b      	ldr	r2, [pc, #428]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7ff f87c 	bl	8001494 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff f878 	bl	8001494 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e229      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b61      	ldr	r3, [pc, #388]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xe8>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff f868 	bl	8001494 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff f864 	bl	8001494 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e215      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	4b57      	ldr	r3, [pc, #348]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x110>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d069      	beq.n	80024ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023f6:	4b50      	ldr	r3, [pc, #320]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b4d      	ldr	r3, [pc, #308]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11c      	bne.n	8002448 <HAL_RCC_OscConfig+0x190>
 800240e:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x17a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e1e9      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b41      	ldr	r3, [pc, #260]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	493d      	ldr	r1, [pc, #244]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	e040      	b.n	80024ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d023      	beq.n	8002498 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b39      	ldr	r3, [pc, #228]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a38      	ldr	r2, [pc, #224]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff f81a 	bl	8001494 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7ff f816 	bl	8001494 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e1c7      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b30      	ldr	r3, [pc, #192]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4929      	ldr	r1, [pc, #164]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
 8002496:	e018      	b.n	80024ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a26      	ldr	r2, [pc, #152]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fff6 	bl	8001494 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7fe fff2 	bl	8001494 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1a3      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d038      	beq.n	8002548 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d019      	beq.n	8002512 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 80024e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e2:	4a15      	ldr	r2, [pc, #84]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7fe ffd3 	bl	8001494 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f2:	f7fe ffcf 	bl	8001494 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e180      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x23a>
 8002510:	e01a      	b.n	8002548 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_RCC_OscConfig+0x280>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7fe ffb9 	bl	8001494 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002526:	f7fe ffb5 	bl	8001494 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d903      	bls.n	800253c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e166      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
 8002538:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	4b92      	ldr	r3, [pc, #584]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800253e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1ee      	bne.n	8002526 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a4 	beq.w	800269e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b89      	ldr	r3, [pc, #548]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a88      	ldr	r2, [pc, #544]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b86      	ldr	r3, [pc, #536]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257e:	4b83      	ldr	r3, [pc, #524]	; (800278c <HAL_RCC_OscConfig+0x4d4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800258a:	4b80      	ldr	r3, [pc, #512]	; (800278c <HAL_RCC_OscConfig+0x4d4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7f      	ldr	r2, [pc, #508]	; (800278c <HAL_RCC_OscConfig+0x4d4>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7fe ff7d 	bl	8001494 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe ff79 	bl	8001494 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b64      	cmp	r3, #100	; 0x64
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e12a      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b0:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x4d4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x31a>
 80025c4:	4b70      	ldr	r3, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	4a6f      	ldr	r2, [pc, #444]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70
 80025d0:	e02d      	b.n	800262e <HAL_RCC_OscConfig+0x376>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x33c>
 80025da:	4b6b      	ldr	r3, [pc, #428]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a6a      	ldr	r2, [pc, #424]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
 80025e6:	4b68      	ldr	r3, [pc, #416]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a67      	ldr	r2, [pc, #412]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70
 80025f2:	e01c      	b.n	800262e <HAL_RCC_OscConfig+0x376>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d10c      	bne.n	8002616 <HAL_RCC_OscConfig+0x35e>
 80025fc:	4b62      	ldr	r3, [pc, #392]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4a61      	ldr	r2, [pc, #388]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	6713      	str	r3, [r2, #112]	; 0x70
 8002608:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	4a5e      	ldr	r2, [pc, #376]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6713      	str	r3, [r2, #112]	; 0x70
 8002614:	e00b      	b.n	800262e <HAL_RCC_OscConfig+0x376>
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261a:	4a5b      	ldr	r2, [pc, #364]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6713      	str	r3, [r2, #112]	; 0x70
 8002622:	4b59      	ldr	r3, [pc, #356]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002628:	f023 0304 	bic.w	r3, r3, #4
 800262c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d015      	beq.n	8002662 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002636:	f7fe ff2d 	bl	8001494 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7fe ff29 	bl	8001494 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	; 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e0d8      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	4b4c      	ldr	r3, [pc, #304]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ee      	beq.n	800263e <HAL_RCC_OscConfig+0x386>
 8002660:	e014      	b.n	800268c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002662:	f7fe ff17 	bl	8001494 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	e00a      	b.n	8002680 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fe ff13 	bl	8001494 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	; 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0c2      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ee      	bne.n	800266a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a3c      	ldr	r2, [pc, #240]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80ae 	beq.w	8002804 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d06d      	beq.n	8002790 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d14b      	bne.n	8002754 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026bc:	4b32      	ldr	r3, [pc, #200]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a31      	ldr	r2, [pc, #196]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80026c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fee4 	bl	8001494 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fe fee0 	bl	8001494 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e091      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e2:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	019b      	lsls	r3, r3, #6
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	085b      	lsrs	r3, r3, #1
 8002706:	3b01      	subs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	071b      	lsls	r3, r3, #28
 800271a:	491b      	ldr	r1, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a18      	ldr	r2, [pc, #96]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800272a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe feb2 	bl	8001494 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe feae 	bl	8001494 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e05f      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x47c>
 8002752:	e057      	b.n	8002804 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800275a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800275e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe fe98 	bl	8001494 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe fe94 	bl	8001494 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e045      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_OscConfig+0x4d0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x4b0>
 8002786:	e03d      	b.n	8002804 <HAL_RCC_OscConfig+0x54c>
 8002788:	40023800 	.word	0x40023800
 800278c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002790:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <HAL_RCC_OscConfig+0x558>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d030      	beq.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d129      	bne.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d122      	bne.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027c0:	4013      	ands	r3, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d119      	bne.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	3b01      	subs	r3, #1
 80027da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d10f      	bne.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0d0      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800282c:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d910      	bls.n	800285c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 020f 	bic.w	r2, r3, #15
 8002842:	4965      	ldr	r1, [pc, #404]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0b8      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002874:	4b59      	ldr	r3, [pc, #356]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4a58      	ldr	r2, [pc, #352]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800287e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800288c:	4b53      	ldr	r3, [pc, #332]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a52      	ldr	r2, [pc, #328]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002892:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002896:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002898:	4b50      	ldr	r3, [pc, #320]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	494d      	ldr	r1, [pc, #308]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d040      	beq.n	8002938 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d107      	bne.n	80028ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b47      	ldr	r3, [pc, #284]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d115      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07f      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b41      	ldr	r3, [pc, #260]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e073      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e6:	4b3d      	ldr	r3, [pc, #244]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06b      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f6:	4b39      	ldr	r3, [pc, #228]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4936      	ldr	r1, [pc, #216]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe fdc4 	bl	8001494 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	e00a      	b.n	8002926 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe fdc0 	bl	8001494 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	; 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e053      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 020c 	and.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	429a      	cmp	r2, r3
 8002936:	d1eb      	bne.n	8002910 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002938:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d210      	bcs.n	8002968 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 020f 	bic.w	r2, r3, #15
 800294e:	4922      	ldr	r1, [pc, #136]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e032      	b.n	80029ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4916      	ldr	r1, [pc, #88]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	490e      	ldr	r1, [pc, #56]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029a6:	f000 f821 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	490a      	ldr	r1, [pc, #40]	; (80029e0 <HAL_RCC_ClockConfig+0x1cc>)
 80029b8:	5ccb      	ldrb	r3, [r1, r3]
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <HAL_RCC_ClockConfig+0x1d0>)
 80029c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_ClockConfig+0x1d4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fd20 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00
 80029dc:	40023800 	.word	0x40023800
 80029e0:	08008864 	.word	0x08008864
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000010 	.word	0x20000010

080029ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f0:	b094      	sub	sp, #80	; 0x50
 80029f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	647b      	str	r3, [r7, #68]	; 0x44
 80029f8:	2300      	movs	r3, #0
 80029fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029fc:	2300      	movs	r3, #0
 80029fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a04:	4b79      	ldr	r3, [pc, #484]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d00d      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x40>
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	f200 80e1 	bhi.w	8002bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x34>
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d003      	beq.n	8002a26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a1e:	e0db      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4b73      	ldr	r3, [pc, #460]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a24:	e0db      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a26:	4b73      	ldr	r3, [pc, #460]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a2a:	e0d8      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a2c:	4b6f      	ldr	r3, [pc, #444]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a34:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a36:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d063      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a42:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	2200      	movs	r2, #0
 8002a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a54:	633b      	str	r3, [r7, #48]	; 0x30
 8002a56:	2300      	movs	r3, #0
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
 8002a5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a5e:	4622      	mov	r2, r4
 8002a60:	462b      	mov	r3, r5
 8002a62:	f04f 0000 	mov.w	r0, #0
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	0159      	lsls	r1, r3, #5
 8002a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a70:	0150      	lsls	r0, r2, #5
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4621      	mov	r1, r4
 8002a78:	1a51      	subs	r1, r2, r1
 8002a7a:	6139      	str	r1, [r7, #16]
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a90:	4659      	mov	r1, fp
 8002a92:	018b      	lsls	r3, r1, #6
 8002a94:	4651      	mov	r1, sl
 8002a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a9a:	4651      	mov	r1, sl
 8002a9c:	018a      	lsls	r2, r1, #6
 8002a9e:	4651      	mov	r1, sl
 8002aa0:	ebb2 0801 	subs.w	r8, r2, r1
 8002aa4:	4659      	mov	r1, fp
 8002aa6:	eb63 0901 	sbc.w	r9, r3, r1
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002abe:	4690      	mov	r8, r2
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	eb18 0303 	adds.w	r3, r8, r3
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	462b      	mov	r3, r5
 8002acc:	eb49 0303 	adc.w	r3, r9, r3
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ade:	4629      	mov	r1, r5
 8002ae0:	024b      	lsls	r3, r1, #9
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ae8:	4621      	mov	r1, r4
 8002aea:	024a      	lsls	r2, r1, #9
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af2:	2200      	movs	r2, #0
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002af8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002afc:	f7fd fdb4 	bl	8000668 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4613      	mov	r3, r2
 8002b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b08:	e058      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0a:	4b38      	ldr	r3, [pc, #224]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	2200      	movs	r2, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	4611      	mov	r1, r2
 8002b16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b24:	4642      	mov	r2, r8
 8002b26:	464b      	mov	r3, r9
 8002b28:	f04f 0000 	mov.w	r0, #0
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	0159      	lsls	r1, r3, #5
 8002b32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b36:	0150      	lsls	r0, r2, #5
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4641      	mov	r1, r8
 8002b3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b42:	4649      	mov	r1, r9
 8002b44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b60:	eb63 050b 	sbc.w	r5, r3, fp
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	00eb      	lsls	r3, r5, #3
 8002b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b72:	00e2      	lsls	r2, r4, #3
 8002b74:	4614      	mov	r4, r2
 8002b76:	461d      	mov	r5, r3
 8002b78:	4643      	mov	r3, r8
 8002b7a:	18e3      	adds	r3, r4, r3
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	464b      	mov	r3, r9
 8002b80:	eb45 0303 	adc.w	r3, r5, r3
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b92:	4629      	mov	r1, r5
 8002b94:	028b      	lsls	r3, r1, #10
 8002b96:	4621      	mov	r1, r4
 8002b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	028a      	lsls	r2, r1, #10
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	61fa      	str	r2, [r7, #28]
 8002bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb0:	f7fd fd5a 	bl	8000668 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_GetSysClockFreq+0x200>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bd6:	e002      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3750      	adds	r7, #80	; 0x50
 8002be4:	46bd      	mov	sp, r7
 8002be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	007a1200 	.word	0x007a1200

08002bf8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c14:	f7ff fff0 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0a9b      	lsrs	r3, r3, #10
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08008874 	.word	0x08008874

08002c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c3c:	f7ff ffdc 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0b5b      	lsrs	r3, r3, #13
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08008874 	.word	0x08008874

08002c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d012      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c88:	4b69      	ldr	r3, [pc, #420]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a68      	ldr	r2, [pc, #416]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c92:	6093      	str	r3, [r2, #8]
 8002c94:	4b66      	ldr	r3, [pc, #408]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	4964      	ldr	r1, [pc, #400]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d017      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cba:	4b5d      	ldr	r3, [pc, #372]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	4959      	ldr	r1, [pc, #356]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd8:	d101      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d017      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cf6:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	494a      	ldr	r1, [pc, #296]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d14:	d101      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d32:	2301      	movs	r3, #1
 8002d34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 808b 	beq.w	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d44:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a39      	ldr	r2, [pc, #228]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d50:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d5c:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a34      	ldr	r2, [pc, #208]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d68:	f7fe fb94 	bl	8001494 <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7fe fb90 	bl	8001494 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e38f      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d82:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d035      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d02e      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002dce:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dd4:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d114      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe fb58 	bl	8001494 <HAL_GetTick>
 8002de4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de6:	e00a      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de8:	f7fe fb54 	bl	8001494 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e351      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0ee      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e16:	d111      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e26:	400b      	ands	r3, r1
 8002e28:	4901      	ldr	r1, [pc, #4]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40007000 	.word	0x40007000
 8002e38:	0ffffcff 	.word	0x0ffffcff
 8002e3c:	4bac      	ldr	r3, [pc, #688]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4aab      	ldr	r2, [pc, #684]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e46:	6093      	str	r3, [r2, #8]
 8002e48:	4ba9      	ldr	r3, [pc, #676]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e54:	49a6      	ldr	r1, [pc, #664]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d010      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e66:	4ba2      	ldr	r3, [pc, #648]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e6c:	4aa0      	ldr	r2, [pc, #640]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e76:	4b9e      	ldr	r3, [pc, #632]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	499b      	ldr	r1, [pc, #620]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e94:	4b96      	ldr	r3, [pc, #600]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea2:	4993      	ldr	r1, [pc, #588]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eb6:	4b8e      	ldr	r3, [pc, #568]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec4:	498a      	ldr	r1, [pc, #552]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ed8:	4b85      	ldr	r3, [pc, #532]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee6:	4982      	ldr	r1, [pc, #520]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4979      	ldr	r1, [pc, #484]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f1c:	4b74      	ldr	r3, [pc, #464]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	4971      	ldr	r1, [pc, #452]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f3e:	4b6c      	ldr	r3, [pc, #432]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f023 020c 	bic.w	r2, r3, #12
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4c:	4968      	ldr	r1, [pc, #416]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f60:	4b63      	ldr	r3, [pc, #396]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6e:	4960      	ldr	r1, [pc, #384]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f82:	4b5b      	ldr	r3, [pc, #364]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f90:	4957      	ldr	r1, [pc, #348]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fa4:	4b52      	ldr	r3, [pc, #328]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	494f      	ldr	r1, [pc, #316]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fc6:	4b4a      	ldr	r3, [pc, #296]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	4946      	ldr	r1, [pc, #280]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fe8:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff6:	493e      	ldr	r1, [pc, #248]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003018:	4935      	ldr	r1, [pc, #212]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800302c:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303a:	492d      	ldr	r1, [pc, #180]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d011      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800304e:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800305c:	4924      	ldr	r1, [pc, #144]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800306c:	d101      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800306e:	2301      	movs	r3, #1
 8003070:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800307e:	2301      	movs	r3, #1
 8003080:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309c:	4914      	ldr	r1, [pc, #80]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00b      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c0:	490b      	ldr	r1, [pc, #44]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00f      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e4:	4902      	ldr	r1, [pc, #8]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030ec:	e002      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003100:	4b8a      	ldr	r3, [pc, #552]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003106:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	4986      	ldr	r1, [pc, #536]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00b      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003124:	4b81      	ldr	r3, [pc, #516]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800312a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003134:	497d      	ldr	r1, [pc, #500]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d006      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80d6 	beq.w	80032fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003150:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a75      	ldr	r2, [pc, #468]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800315a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315c:	f7fe f99a 	bl	8001494 <HAL_GetTick>
 8003160:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003164:	f7fe f996 	bl	8001494 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e195      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003176:	4b6d      	ldr	r3, [pc, #436]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d021      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11d      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003196:	4b65      	ldr	r3, [pc, #404]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031a4:	4b61      	ldr	r3, [pc, #388]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031aa:	0e1b      	lsrs	r3, r3, #24
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	019a      	lsls	r2, r3, #6
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	041b      	lsls	r3, r3, #16
 80031bc:	431a      	orrs	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	061b      	lsls	r3, r3, #24
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	071b      	lsls	r3, r3, #28
 80031ca:	4958      	ldr	r1, [pc, #352]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d02e      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d129      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031fe:	4b4b      	ldr	r3, [pc, #300]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800320c:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800320e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003212:	0f1b      	lsrs	r3, r3, #28
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	019a      	lsls	r2, r3, #6
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	041b      	lsls	r3, r3, #16
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	061b      	lsls	r3, r3, #24
 800322c:	431a      	orrs	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	071b      	lsls	r3, r3, #28
 8003232:	493e      	ldr	r1, [pc, #248]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800323a:	4b3c      	ldr	r3, [pc, #240]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003240:	f023 021f 	bic.w	r2, r3, #31
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	3b01      	subs	r3, #1
 800324a:	4938      	ldr	r1, [pc, #224]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01d      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800325e:	4b33      	ldr	r3, [pc, #204]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003264:	0e1b      	lsrs	r3, r3, #24
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800326c:	4b2f      	ldr	r3, [pc, #188]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003272:	0f1b      	lsrs	r3, r3, #28
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	019a      	lsls	r2, r3, #6
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	431a      	orrs	r2, r3
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	061b      	lsls	r3, r3, #24
 800328c:	431a      	orrs	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	071b      	lsls	r3, r3, #28
 8003292:	4926      	ldr	r1, [pc, #152]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d011      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	019a      	lsls	r2, r3, #6
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	071b      	lsls	r3, r3, #28
 80032c2:	491a      	ldr	r1, [pc, #104]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a17      	ldr	r2, [pc, #92]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d6:	f7fe f8dd 	bl	8001494 <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032de:	f7fe f8d9 	bl	8001494 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	; 0x64
 80032ea:	d901      	bls.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0d8      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	f040 80ce 	bne.w	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003310:	f7fe f8c0 	bl	8001494 <HAL_GetTick>
 8003314:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003316:	e00b      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003318:	f7fe f8bc 	bl	8001494 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d904      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e0bb      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800332a:	bf00      	nop
 800332c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003330:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333c:	d0ec      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800335a:	2b00      	cmp	r3, #0
 800335c:	d02e      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d12a      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003366:	4b51      	ldr	r3, [pc, #324]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003374:	4b4d      	ldr	r3, [pc, #308]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	0f1b      	lsrs	r3, r3, #28
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	019a      	lsls	r2, r3, #6
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	071b      	lsls	r3, r3, #28
 800339a:	4944      	ldr	r1, [pc, #272]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033a2:	4b42      	ldr	r3, [pc, #264]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	3b01      	subs	r3, #1
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	493d      	ldr	r1, [pc, #244]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d022      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d0:	d11d      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033d2:	4b36      	ldr	r3, [pc, #216]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	0e1b      	lsrs	r3, r3, #24
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	0f1b      	lsrs	r3, r3, #28
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	019a      	lsls	r2, r3, #6
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	041b      	lsls	r3, r3, #16
 80033fa:	431a      	orrs	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	061b      	lsls	r3, r3, #24
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	071b      	lsls	r3, r3, #28
 8003406:	4929      	ldr	r1, [pc, #164]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d028      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	0e1b      	lsrs	r3, r3, #24
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003428:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	0c1b      	lsrs	r3, r3, #16
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	019a      	lsls	r2, r3, #6
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	041b      	lsls	r3, r3, #16
 8003440:	431a      	orrs	r2, r3
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	071b      	lsls	r3, r3, #28
 800344e:	4917      	ldr	r1, [pc, #92]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800345c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	4911      	ldr	r1, [pc, #68]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003478:	f7fe f80c 	bl	8001494 <HAL_GetTick>
 800347c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003480:	f7fe f808 	bl	8001494 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e007      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800349a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800349e:	d1ef      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800

080034b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e040      	b.n	8003544 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd fb36 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	; 0x24
 80034dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f974 	bl	80037dc <UART_SetConfig>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e022      	b.n	8003544 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fbcc 	bl	8003ca4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800351a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800352a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fc53 	bl	8003de8 <UART_CheckIdleState>
 8003542:	4603      	mov	r3, r0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003560:	2b20      	cmp	r3, #32
 8003562:	d171      	bne.n	8003648 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_UART_Transmit+0x24>
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e06a      	b.n	800364a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2221      	movs	r2, #33	; 0x21
 8003580:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003582:	f7fd ff87 	bl	8001494 <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	88fa      	ldrh	r2, [r7, #6]
 800358c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	d108      	bne.n	80035b4 <HAL_UART_Transmit+0x68>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e003      	b.n	80035bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035bc:	e02c      	b.n	8003618 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2180      	movs	r1, #128	; 0x80
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fc5a 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e038      	b.n	800364a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	3302      	adds	r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	e007      	b.n	8003606 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	3301      	adds	r3, #1
 8003604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1cc      	bne.n	80035be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2200      	movs	r2, #0
 800362c:	2140      	movs	r1, #64	; 0x40
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fc27 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e005      	b.n	800364a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	e000      	b.n	800364a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b08a      	sub	sp, #40	; 0x28
 8003656:	af02      	add	r7, sp, #8
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003668:	2b20      	cmp	r3, #32
 800366a:	f040 80b1 	bne.w	80037d0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_UART_Receive+0x28>
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0a9      	b.n	80037d2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2222      	movs	r2, #34	; 0x22
 800368a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003694:	f7fd fefe 	bl	8001494 <HAL_GetTick>
 8003698:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	88fa      	ldrh	r2, [r7, #6]
 800369e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	88fa      	ldrh	r2, [r7, #6]
 80036a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b2:	d10e      	bne.n	80036d2 <HAL_UART_Receive+0x80>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <HAL_UART_Receive+0x76>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036c6:	e02d      	b.n	8003724 <HAL_UART_Receive+0xd2>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	22ff      	movs	r2, #255	; 0xff
 80036cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036d0:	e028      	b.n	8003724 <HAL_UART_Receive+0xd2>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10d      	bne.n	80036f6 <HAL_UART_Receive+0xa4>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <HAL_UART_Receive+0x9a>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	22ff      	movs	r2, #255	; 0xff
 80036e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036ea:	e01b      	b.n	8003724 <HAL_UART_Receive+0xd2>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	227f      	movs	r2, #127	; 0x7f
 80036f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036f4:	e016      	b.n	8003724 <HAL_UART_Receive+0xd2>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036fe:	d10d      	bne.n	800371c <HAL_UART_Receive+0xca>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <HAL_UART_Receive+0xc0>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	227f      	movs	r2, #127	; 0x7f
 800370c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003710:	e008      	b.n	8003724 <HAL_UART_Receive+0xd2>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	223f      	movs	r2, #63	; 0x3f
 8003716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800371a:	e003      	b.n	8003724 <HAL_UART_Receive+0xd2>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800372a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003734:	d108      	bne.n	8003748 <HAL_UART_Receive+0xf6>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e003      	b.n	8003750 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003750:	e032      	b.n	80037b8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2200      	movs	r2, #0
 800375a:	2120      	movs	r1, #32
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fb90 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e032      	b.n	80037d2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	b29a      	uxth	r2, r3
 800377a:	8a7b      	ldrh	r3, [r7, #18]
 800377c:	4013      	ands	r3, r2
 800377e:	b29a      	uxth	r2, r3
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	3302      	adds	r3, #2
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	e00c      	b.n	80037a6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	b2da      	uxtb	r2, r3
 8003794:	8a7b      	ldrh	r3, [r7, #18]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	4013      	ands	r3, r2
 800379a:	b2da      	uxtb	r2, r3
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3301      	adds	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1c6      	bne.n	8003752 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
  }
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4ba6      	ldr	r3, [pc, #664]	; (8003aa0 <UART_SetConfig+0x2c4>)
 8003808:	4013      	ands	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	6979      	ldr	r1, [r7, #20]
 8003810:	430b      	orrs	r3, r1
 8003812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	430a      	orrs	r2, r1
 800384c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a94      	ldr	r2, [pc, #592]	; (8003aa4 <UART_SetConfig+0x2c8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d120      	bne.n	800389a <UART_SetConfig+0xbe>
 8003858:	4b93      	ldr	r3, [pc, #588]	; (8003aa8 <UART_SetConfig+0x2cc>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b03      	cmp	r3, #3
 8003864:	d816      	bhi.n	8003894 <UART_SetConfig+0xb8>
 8003866:	a201      	add	r2, pc, #4	; (adr r2, 800386c <UART_SetConfig+0x90>)
 8003868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386c:	0800387d 	.word	0x0800387d
 8003870:	08003889 	.word	0x08003889
 8003874:	08003883 	.word	0x08003883
 8003878:	0800388f 	.word	0x0800388f
 800387c:	2301      	movs	r3, #1
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e150      	b.n	8003b24 <UART_SetConfig+0x348>
 8003882:	2302      	movs	r3, #2
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e14d      	b.n	8003b24 <UART_SetConfig+0x348>
 8003888:	2304      	movs	r3, #4
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e14a      	b.n	8003b24 <UART_SetConfig+0x348>
 800388e:	2308      	movs	r3, #8
 8003890:	77fb      	strb	r3, [r7, #31]
 8003892:	e147      	b.n	8003b24 <UART_SetConfig+0x348>
 8003894:	2310      	movs	r3, #16
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e144      	b.n	8003b24 <UART_SetConfig+0x348>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a83      	ldr	r2, [pc, #524]	; (8003aac <UART_SetConfig+0x2d0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d132      	bne.n	800390a <UART_SetConfig+0x12e>
 80038a4:	4b80      	ldr	r3, [pc, #512]	; (8003aa8 <UART_SetConfig+0x2cc>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b0c      	cmp	r3, #12
 80038b0:	d828      	bhi.n	8003904 <UART_SetConfig+0x128>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <UART_SetConfig+0xdc>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038ed 	.word	0x080038ed
 80038bc:	08003905 	.word	0x08003905
 80038c0:	08003905 	.word	0x08003905
 80038c4:	08003905 	.word	0x08003905
 80038c8:	080038f9 	.word	0x080038f9
 80038cc:	08003905 	.word	0x08003905
 80038d0:	08003905 	.word	0x08003905
 80038d4:	08003905 	.word	0x08003905
 80038d8:	080038f3 	.word	0x080038f3
 80038dc:	08003905 	.word	0x08003905
 80038e0:	08003905 	.word	0x08003905
 80038e4:	08003905 	.word	0x08003905
 80038e8:	080038ff 	.word	0x080038ff
 80038ec:	2300      	movs	r3, #0
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e118      	b.n	8003b24 <UART_SetConfig+0x348>
 80038f2:	2302      	movs	r3, #2
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e115      	b.n	8003b24 <UART_SetConfig+0x348>
 80038f8:	2304      	movs	r3, #4
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e112      	b.n	8003b24 <UART_SetConfig+0x348>
 80038fe:	2308      	movs	r3, #8
 8003900:	77fb      	strb	r3, [r7, #31]
 8003902:	e10f      	b.n	8003b24 <UART_SetConfig+0x348>
 8003904:	2310      	movs	r3, #16
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	e10c      	b.n	8003b24 <UART_SetConfig+0x348>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a68      	ldr	r2, [pc, #416]	; (8003ab0 <UART_SetConfig+0x2d4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d120      	bne.n	8003956 <UART_SetConfig+0x17a>
 8003914:	4b64      	ldr	r3, [pc, #400]	; (8003aa8 <UART_SetConfig+0x2cc>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800391e:	2b30      	cmp	r3, #48	; 0x30
 8003920:	d013      	beq.n	800394a <UART_SetConfig+0x16e>
 8003922:	2b30      	cmp	r3, #48	; 0x30
 8003924:	d814      	bhi.n	8003950 <UART_SetConfig+0x174>
 8003926:	2b20      	cmp	r3, #32
 8003928:	d009      	beq.n	800393e <UART_SetConfig+0x162>
 800392a:	2b20      	cmp	r3, #32
 800392c:	d810      	bhi.n	8003950 <UART_SetConfig+0x174>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <UART_SetConfig+0x15c>
 8003932:	2b10      	cmp	r3, #16
 8003934:	d006      	beq.n	8003944 <UART_SetConfig+0x168>
 8003936:	e00b      	b.n	8003950 <UART_SetConfig+0x174>
 8003938:	2300      	movs	r3, #0
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e0f2      	b.n	8003b24 <UART_SetConfig+0x348>
 800393e:	2302      	movs	r3, #2
 8003940:	77fb      	strb	r3, [r7, #31]
 8003942:	e0ef      	b.n	8003b24 <UART_SetConfig+0x348>
 8003944:	2304      	movs	r3, #4
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e0ec      	b.n	8003b24 <UART_SetConfig+0x348>
 800394a:	2308      	movs	r3, #8
 800394c:	77fb      	strb	r3, [r7, #31]
 800394e:	e0e9      	b.n	8003b24 <UART_SetConfig+0x348>
 8003950:	2310      	movs	r3, #16
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e0e6      	b.n	8003b24 <UART_SetConfig+0x348>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a56      	ldr	r2, [pc, #344]	; (8003ab4 <UART_SetConfig+0x2d8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d120      	bne.n	80039a2 <UART_SetConfig+0x1c6>
 8003960:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <UART_SetConfig+0x2cc>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800396a:	2bc0      	cmp	r3, #192	; 0xc0
 800396c:	d013      	beq.n	8003996 <UART_SetConfig+0x1ba>
 800396e:	2bc0      	cmp	r3, #192	; 0xc0
 8003970:	d814      	bhi.n	800399c <UART_SetConfig+0x1c0>
 8003972:	2b80      	cmp	r3, #128	; 0x80
 8003974:	d009      	beq.n	800398a <UART_SetConfig+0x1ae>
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d810      	bhi.n	800399c <UART_SetConfig+0x1c0>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <UART_SetConfig+0x1a8>
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d006      	beq.n	8003990 <UART_SetConfig+0x1b4>
 8003982:	e00b      	b.n	800399c <UART_SetConfig+0x1c0>
 8003984:	2300      	movs	r3, #0
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e0cc      	b.n	8003b24 <UART_SetConfig+0x348>
 800398a:	2302      	movs	r3, #2
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e0c9      	b.n	8003b24 <UART_SetConfig+0x348>
 8003990:	2304      	movs	r3, #4
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e0c6      	b.n	8003b24 <UART_SetConfig+0x348>
 8003996:	2308      	movs	r3, #8
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e0c3      	b.n	8003b24 <UART_SetConfig+0x348>
 800399c:	2310      	movs	r3, #16
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e0c0      	b.n	8003b24 <UART_SetConfig+0x348>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a44      	ldr	r2, [pc, #272]	; (8003ab8 <UART_SetConfig+0x2dc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d125      	bne.n	80039f8 <UART_SetConfig+0x21c>
 80039ac:	4b3e      	ldr	r3, [pc, #248]	; (8003aa8 <UART_SetConfig+0x2cc>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ba:	d017      	beq.n	80039ec <UART_SetConfig+0x210>
 80039bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c0:	d817      	bhi.n	80039f2 <UART_SetConfig+0x216>
 80039c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c6:	d00b      	beq.n	80039e0 <UART_SetConfig+0x204>
 80039c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039cc:	d811      	bhi.n	80039f2 <UART_SetConfig+0x216>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <UART_SetConfig+0x1fe>
 80039d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d6:	d006      	beq.n	80039e6 <UART_SetConfig+0x20a>
 80039d8:	e00b      	b.n	80039f2 <UART_SetConfig+0x216>
 80039da:	2300      	movs	r3, #0
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e0a1      	b.n	8003b24 <UART_SetConfig+0x348>
 80039e0:	2302      	movs	r3, #2
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e09e      	b.n	8003b24 <UART_SetConfig+0x348>
 80039e6:	2304      	movs	r3, #4
 80039e8:	77fb      	strb	r3, [r7, #31]
 80039ea:	e09b      	b.n	8003b24 <UART_SetConfig+0x348>
 80039ec:	2308      	movs	r3, #8
 80039ee:	77fb      	strb	r3, [r7, #31]
 80039f0:	e098      	b.n	8003b24 <UART_SetConfig+0x348>
 80039f2:	2310      	movs	r3, #16
 80039f4:	77fb      	strb	r3, [r7, #31]
 80039f6:	e095      	b.n	8003b24 <UART_SetConfig+0x348>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2f      	ldr	r2, [pc, #188]	; (8003abc <UART_SetConfig+0x2e0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d125      	bne.n	8003a4e <UART_SetConfig+0x272>
 8003a02:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <UART_SetConfig+0x2cc>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a10:	d017      	beq.n	8003a42 <UART_SetConfig+0x266>
 8003a12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a16:	d817      	bhi.n	8003a48 <UART_SetConfig+0x26c>
 8003a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1c:	d00b      	beq.n	8003a36 <UART_SetConfig+0x25a>
 8003a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a22:	d811      	bhi.n	8003a48 <UART_SetConfig+0x26c>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <UART_SetConfig+0x254>
 8003a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2c:	d006      	beq.n	8003a3c <UART_SetConfig+0x260>
 8003a2e:	e00b      	b.n	8003a48 <UART_SetConfig+0x26c>
 8003a30:	2301      	movs	r3, #1
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e076      	b.n	8003b24 <UART_SetConfig+0x348>
 8003a36:	2302      	movs	r3, #2
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e073      	b.n	8003b24 <UART_SetConfig+0x348>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e070      	b.n	8003b24 <UART_SetConfig+0x348>
 8003a42:	2308      	movs	r3, #8
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e06d      	b.n	8003b24 <UART_SetConfig+0x348>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e06a      	b.n	8003b24 <UART_SetConfig+0x348>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1b      	ldr	r2, [pc, #108]	; (8003ac0 <UART_SetConfig+0x2e4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d138      	bne.n	8003aca <UART_SetConfig+0x2ee>
 8003a58:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <UART_SetConfig+0x2cc>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a66:	d017      	beq.n	8003a98 <UART_SetConfig+0x2bc>
 8003a68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a6c:	d82a      	bhi.n	8003ac4 <UART_SetConfig+0x2e8>
 8003a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a72:	d00b      	beq.n	8003a8c <UART_SetConfig+0x2b0>
 8003a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a78:	d824      	bhi.n	8003ac4 <UART_SetConfig+0x2e8>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <UART_SetConfig+0x2aa>
 8003a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a82:	d006      	beq.n	8003a92 <UART_SetConfig+0x2b6>
 8003a84:	e01e      	b.n	8003ac4 <UART_SetConfig+0x2e8>
 8003a86:	2300      	movs	r3, #0
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e04b      	b.n	8003b24 <UART_SetConfig+0x348>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e048      	b.n	8003b24 <UART_SetConfig+0x348>
 8003a92:	2304      	movs	r3, #4
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e045      	b.n	8003b24 <UART_SetConfig+0x348>
 8003a98:	2308      	movs	r3, #8
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e042      	b.n	8003b24 <UART_SetConfig+0x348>
 8003a9e:	bf00      	nop
 8003aa0:	efff69f3 	.word	0xefff69f3
 8003aa4:	40011000 	.word	0x40011000
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40004400 	.word	0x40004400
 8003ab0:	40004800 	.word	0x40004800
 8003ab4:	40004c00 	.word	0x40004c00
 8003ab8:	40005000 	.word	0x40005000
 8003abc:	40011400 	.word	0x40011400
 8003ac0:	40007800 	.word	0x40007800
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e02c      	b.n	8003b24 <UART_SetConfig+0x348>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a72      	ldr	r2, [pc, #456]	; (8003c98 <UART_SetConfig+0x4bc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d125      	bne.n	8003b20 <UART_SetConfig+0x344>
 8003ad4:	4b71      	ldr	r3, [pc, #452]	; (8003c9c <UART_SetConfig+0x4c0>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ade:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ae2:	d017      	beq.n	8003b14 <UART_SetConfig+0x338>
 8003ae4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ae8:	d817      	bhi.n	8003b1a <UART_SetConfig+0x33e>
 8003aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aee:	d00b      	beq.n	8003b08 <UART_SetConfig+0x32c>
 8003af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af4:	d811      	bhi.n	8003b1a <UART_SetConfig+0x33e>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <UART_SetConfig+0x326>
 8003afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003afe:	d006      	beq.n	8003b0e <UART_SetConfig+0x332>
 8003b00:	e00b      	b.n	8003b1a <UART_SetConfig+0x33e>
 8003b02:	2300      	movs	r3, #0
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e00d      	b.n	8003b24 <UART_SetConfig+0x348>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e00a      	b.n	8003b24 <UART_SetConfig+0x348>
 8003b0e:	2304      	movs	r3, #4
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e007      	b.n	8003b24 <UART_SetConfig+0x348>
 8003b14:	2308      	movs	r3, #8
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e004      	b.n	8003b24 <UART_SetConfig+0x348>
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	e001      	b.n	8003b24 <UART_SetConfig+0x348>
 8003b20:	2310      	movs	r3, #16
 8003b22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2c:	d15b      	bne.n	8003be6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b2e:	7ffb      	ldrb	r3, [r7, #31]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d828      	bhi.n	8003b86 <UART_SetConfig+0x3aa>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <UART_SetConfig+0x360>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b61 	.word	0x08003b61
 8003b40:	08003b69 	.word	0x08003b69
 8003b44:	08003b71 	.word	0x08003b71
 8003b48:	08003b87 	.word	0x08003b87
 8003b4c:	08003b77 	.word	0x08003b77
 8003b50:	08003b87 	.word	0x08003b87
 8003b54:	08003b87 	.word	0x08003b87
 8003b58:	08003b87 	.word	0x08003b87
 8003b5c:	08003b7f 	.word	0x08003b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b60:	f7ff f856 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8003b64:	61b8      	str	r0, [r7, #24]
        break;
 8003b66:	e013      	b.n	8003b90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b68:	f7ff f866 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 8003b6c:	61b8      	str	r0, [r7, #24]
        break;
 8003b6e:	e00f      	b.n	8003b90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b70:	4b4b      	ldr	r3, [pc, #300]	; (8003ca0 <UART_SetConfig+0x4c4>)
 8003b72:	61bb      	str	r3, [r7, #24]
        break;
 8003b74:	e00c      	b.n	8003b90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b76:	f7fe ff39 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 8003b7a:	61b8      	str	r0, [r7, #24]
        break;
 8003b7c:	e008      	b.n	8003b90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b82:	61bb      	str	r3, [r7, #24]
        break;
 8003b84:	e004      	b.n	8003b90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d074      	beq.n	8003c80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	005a      	lsls	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	441a      	add	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003baa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b0f      	cmp	r3, #15
 8003bb0:	d916      	bls.n	8003be0 <UART_SetConfig+0x404>
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d212      	bcs.n	8003be0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f023 030f 	bic.w	r3, r3, #15
 8003bc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	89fa      	ldrh	r2, [r7, #14]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	e04f      	b.n	8003c80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	77bb      	strb	r3, [r7, #30]
 8003be4:	e04c      	b.n	8003c80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003be6:	7ffb      	ldrb	r3, [r7, #31]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d828      	bhi.n	8003c3e <UART_SetConfig+0x462>
 8003bec:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <UART_SetConfig+0x418>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c21 	.word	0x08003c21
 8003bfc:	08003c29 	.word	0x08003c29
 8003c00:	08003c3f 	.word	0x08003c3f
 8003c04:	08003c2f 	.word	0x08003c2f
 8003c08:	08003c3f 	.word	0x08003c3f
 8003c0c:	08003c3f 	.word	0x08003c3f
 8003c10:	08003c3f 	.word	0x08003c3f
 8003c14:	08003c37 	.word	0x08003c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c18:	f7fe fffa 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8003c1c:	61b8      	str	r0, [r7, #24]
        break;
 8003c1e:	e013      	b.n	8003c48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c20:	f7ff f80a 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 8003c24:	61b8      	str	r0, [r7, #24]
        break;
 8003c26:	e00f      	b.n	8003c48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <UART_SetConfig+0x4c4>)
 8003c2a:	61bb      	str	r3, [r7, #24]
        break;
 8003c2c:	e00c      	b.n	8003c48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2e:	f7fe fedd 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 8003c32:	61b8      	str	r0, [r7, #24]
        break;
 8003c34:	e008      	b.n	8003c48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c3a:	61bb      	str	r3, [r7, #24]
        break;
 8003c3c:	e004      	b.n	8003c48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	77bb      	strb	r3, [r7, #30]
        break;
 8003c46:	bf00      	nop
    }

    if (pclk != 0U)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d018      	beq.n	8003c80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	085a      	lsrs	r2, r3, #1
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	441a      	add	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b0f      	cmp	r3, #15
 8003c66:	d909      	bls.n	8003c7c <UART_SetConfig+0x4a0>
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6e:	d205      	bcs.n	8003c7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	e001      	b.n	8003c80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40007c00 	.word	0x40007c00
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	00f42400 	.word	0x00f42400

08003ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01a      	beq.n	8003dba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da2:	d10a      	bne.n	8003dba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003df8:	f7fd fb4c 	bl	8001494 <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d10e      	bne.n	8003e2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f831 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e027      	b.n	8003e7a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d10e      	bne.n	8003e56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f81b 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e011      	b.n	8003e7a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b09c      	sub	sp, #112	; 0x70
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e92:	e0a7      	b.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e9a:	f000 80a3 	beq.w	8003fe4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9e:	f7fd faf9 	bl	8001494 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d302      	bcc.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d13f      	bne.n	8003f34 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ec8:	667b      	str	r3, [r7, #100]	; 0x64
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ed4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ed8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e6      	bne.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3308      	adds	r3, #8
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	663b      	str	r3, [r7, #96]	; 0x60
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3308      	adds	r3, #8
 8003f04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f06:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e068      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d050      	beq.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f50:	d148      	bne.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f5a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f82:	e841 2300 	strex	r3, r2, [r1]
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1e6      	bne.n	8003f5c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3308      	adds	r3, #8
 8003f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3308      	adds	r3, #8
 8003fac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fae:	623a      	str	r2, [r7, #32]
 8003fb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	69f9      	ldr	r1, [r7, #28]
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e5      	bne.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e010      	b.n	8004006 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69da      	ldr	r2, [r3, #28]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4013      	ands	r3, r2
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	f43f af48 	beq.w	8003e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3770      	adds	r7, #112	; 0x70
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <__assert_func>:
 8004010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004012:	4614      	mov	r4, r2
 8004014:	461a      	mov	r2, r3
 8004016:	4b09      	ldr	r3, [pc, #36]	; (800403c <__assert_func+0x2c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4605      	mov	r5, r0
 800401c:	68d8      	ldr	r0, [r3, #12]
 800401e:	b14c      	cbz	r4, 8004034 <__assert_func+0x24>
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <__assert_func+0x30>)
 8004022:	9100      	str	r1, [sp, #0]
 8004024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004028:	4906      	ldr	r1, [pc, #24]	; (8004044 <__assert_func+0x34>)
 800402a:	462b      	mov	r3, r5
 800402c:	f000 f814 	bl	8004058 <fiprintf>
 8004030:	f001 ff66 	bl	8005f00 <abort>
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <__assert_func+0x38>)
 8004036:	461c      	mov	r4, r3
 8004038:	e7f3      	b.n	8004022 <__assert_func+0x12>
 800403a:	bf00      	nop
 800403c:	20000018 	.word	0x20000018
 8004040:	080088a2 	.word	0x080088a2
 8004044:	080088af 	.word	0x080088af
 8004048:	080088dd 	.word	0x080088dd

0800404c <__errno>:
 800404c:	4b01      	ldr	r3, [pc, #4]	; (8004054 <__errno+0x8>)
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20000018 	.word	0x20000018

08004058 <fiprintf>:
 8004058:	b40e      	push	{r1, r2, r3}
 800405a:	b503      	push	{r0, r1, lr}
 800405c:	4601      	mov	r1, r0
 800405e:	ab03      	add	r3, sp, #12
 8004060:	4805      	ldr	r0, [pc, #20]	; (8004078 <fiprintf+0x20>)
 8004062:	f853 2b04 	ldr.w	r2, [r3], #4
 8004066:	6800      	ldr	r0, [r0, #0]
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	f000 f85d 	bl	8004128 <_vfiprintf_r>
 800406e:	b002      	add	sp, #8
 8004070:	f85d eb04 	ldr.w	lr, [sp], #4
 8004074:	b003      	add	sp, #12
 8004076:	4770      	bx	lr
 8004078:	20000018 	.word	0x20000018

0800407c <__libc_init_array>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	4d0d      	ldr	r5, [pc, #52]	; (80040b4 <__libc_init_array+0x38>)
 8004080:	4c0d      	ldr	r4, [pc, #52]	; (80040b8 <__libc_init_array+0x3c>)
 8004082:	1b64      	subs	r4, r4, r5
 8004084:	10a4      	asrs	r4, r4, #2
 8004086:	2600      	movs	r6, #0
 8004088:	42a6      	cmp	r6, r4
 800408a:	d109      	bne.n	80040a0 <__libc_init_array+0x24>
 800408c:	4d0b      	ldr	r5, [pc, #44]	; (80040bc <__libc_init_array+0x40>)
 800408e:	4c0c      	ldr	r4, [pc, #48]	; (80040c0 <__libc_init_array+0x44>)
 8004090:	f004 fb86 	bl	80087a0 <_init>
 8004094:	1b64      	subs	r4, r4, r5
 8004096:	10a4      	asrs	r4, r4, #2
 8004098:	2600      	movs	r6, #0
 800409a:	42a6      	cmp	r6, r4
 800409c:	d105      	bne.n	80040aa <__libc_init_array+0x2e>
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a4:	4798      	blx	r3
 80040a6:	3601      	adds	r6, #1
 80040a8:	e7ee      	b.n	8004088 <__libc_init_array+0xc>
 80040aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ae:	4798      	blx	r3
 80040b0:	3601      	adds	r6, #1
 80040b2:	e7f2      	b.n	800409a <__libc_init_array+0x1e>
 80040b4:	08008d54 	.word	0x08008d54
 80040b8:	08008d54 	.word	0x08008d54
 80040bc:	08008d54 	.word	0x08008d54
 80040c0:	08008d58 	.word	0x08008d58

080040c4 <memset>:
 80040c4:	4402      	add	r2, r0
 80040c6:	4603      	mov	r3, r0
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d100      	bne.n	80040ce <memset+0xa>
 80040cc:	4770      	bx	lr
 80040ce:	f803 1b01 	strb.w	r1, [r3], #1
 80040d2:	e7f9      	b.n	80040c8 <memset+0x4>

080040d4 <__sfputc_r>:
 80040d4:	6893      	ldr	r3, [r2, #8]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	b410      	push	{r4}
 80040dc:	6093      	str	r3, [r2, #8]
 80040de:	da08      	bge.n	80040f2 <__sfputc_r+0x1e>
 80040e0:	6994      	ldr	r4, [r2, #24]
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	db01      	blt.n	80040ea <__sfputc_r+0x16>
 80040e6:	290a      	cmp	r1, #10
 80040e8:	d103      	bne.n	80040f2 <__sfputc_r+0x1e>
 80040ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040ee:	f001 be47 	b.w	8005d80 <__swbuf_r>
 80040f2:	6813      	ldr	r3, [r2, #0]
 80040f4:	1c58      	adds	r0, r3, #1
 80040f6:	6010      	str	r0, [r2, #0]
 80040f8:	7019      	strb	r1, [r3, #0]
 80040fa:	4608      	mov	r0, r1
 80040fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004100:	4770      	bx	lr

08004102 <__sfputs_r>:
 8004102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004104:	4606      	mov	r6, r0
 8004106:	460f      	mov	r7, r1
 8004108:	4614      	mov	r4, r2
 800410a:	18d5      	adds	r5, r2, r3
 800410c:	42ac      	cmp	r4, r5
 800410e:	d101      	bne.n	8004114 <__sfputs_r+0x12>
 8004110:	2000      	movs	r0, #0
 8004112:	e007      	b.n	8004124 <__sfputs_r+0x22>
 8004114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004118:	463a      	mov	r2, r7
 800411a:	4630      	mov	r0, r6
 800411c:	f7ff ffda 	bl	80040d4 <__sfputc_r>
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	d1f3      	bne.n	800410c <__sfputs_r+0xa>
 8004124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004128 <_vfiprintf_r>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	460d      	mov	r5, r1
 800412e:	b09d      	sub	sp, #116	; 0x74
 8004130:	4614      	mov	r4, r2
 8004132:	4698      	mov	r8, r3
 8004134:	4606      	mov	r6, r0
 8004136:	b118      	cbz	r0, 8004140 <_vfiprintf_r+0x18>
 8004138:	6983      	ldr	r3, [r0, #24]
 800413a:	b90b      	cbnz	r3, 8004140 <_vfiprintf_r+0x18>
 800413c:	f002 fdfc 	bl	8006d38 <__sinit>
 8004140:	4b89      	ldr	r3, [pc, #548]	; (8004368 <_vfiprintf_r+0x240>)
 8004142:	429d      	cmp	r5, r3
 8004144:	d11b      	bne.n	800417e <_vfiprintf_r+0x56>
 8004146:	6875      	ldr	r5, [r6, #4]
 8004148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800414a:	07d9      	lsls	r1, r3, #31
 800414c:	d405      	bmi.n	800415a <_vfiprintf_r+0x32>
 800414e:	89ab      	ldrh	r3, [r5, #12]
 8004150:	059a      	lsls	r2, r3, #22
 8004152:	d402      	bmi.n	800415a <_vfiprintf_r+0x32>
 8004154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004156:	f003 fa00 	bl	800755a <__retarget_lock_acquire_recursive>
 800415a:	89ab      	ldrh	r3, [r5, #12]
 800415c:	071b      	lsls	r3, r3, #28
 800415e:	d501      	bpl.n	8004164 <_vfiprintf_r+0x3c>
 8004160:	692b      	ldr	r3, [r5, #16]
 8004162:	b9eb      	cbnz	r3, 80041a0 <_vfiprintf_r+0x78>
 8004164:	4629      	mov	r1, r5
 8004166:	4630      	mov	r0, r6
 8004168:	f001 fe5c 	bl	8005e24 <__swsetup_r>
 800416c:	b1c0      	cbz	r0, 80041a0 <_vfiprintf_r+0x78>
 800416e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004170:	07dc      	lsls	r4, r3, #31
 8004172:	d50e      	bpl.n	8004192 <_vfiprintf_r+0x6a>
 8004174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004178:	b01d      	add	sp, #116	; 0x74
 800417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417e:	4b7b      	ldr	r3, [pc, #492]	; (800436c <_vfiprintf_r+0x244>)
 8004180:	429d      	cmp	r5, r3
 8004182:	d101      	bne.n	8004188 <_vfiprintf_r+0x60>
 8004184:	68b5      	ldr	r5, [r6, #8]
 8004186:	e7df      	b.n	8004148 <_vfiprintf_r+0x20>
 8004188:	4b79      	ldr	r3, [pc, #484]	; (8004370 <_vfiprintf_r+0x248>)
 800418a:	429d      	cmp	r5, r3
 800418c:	bf08      	it	eq
 800418e:	68f5      	ldreq	r5, [r6, #12]
 8004190:	e7da      	b.n	8004148 <_vfiprintf_r+0x20>
 8004192:	89ab      	ldrh	r3, [r5, #12]
 8004194:	0598      	lsls	r0, r3, #22
 8004196:	d4ed      	bmi.n	8004174 <_vfiprintf_r+0x4c>
 8004198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800419a:	f003 f9df 	bl	800755c <__retarget_lock_release_recursive>
 800419e:	e7e9      	b.n	8004174 <_vfiprintf_r+0x4c>
 80041a0:	2300      	movs	r3, #0
 80041a2:	9309      	str	r3, [sp, #36]	; 0x24
 80041a4:	2320      	movs	r3, #32
 80041a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80041ae:	2330      	movs	r3, #48	; 0x30
 80041b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004374 <_vfiprintf_r+0x24c>
 80041b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041b8:	f04f 0901 	mov.w	r9, #1
 80041bc:	4623      	mov	r3, r4
 80041be:	469a      	mov	sl, r3
 80041c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041c4:	b10a      	cbz	r2, 80041ca <_vfiprintf_r+0xa2>
 80041c6:	2a25      	cmp	r2, #37	; 0x25
 80041c8:	d1f9      	bne.n	80041be <_vfiprintf_r+0x96>
 80041ca:	ebba 0b04 	subs.w	fp, sl, r4
 80041ce:	d00b      	beq.n	80041e8 <_vfiprintf_r+0xc0>
 80041d0:	465b      	mov	r3, fp
 80041d2:	4622      	mov	r2, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	4630      	mov	r0, r6
 80041d8:	f7ff ff93 	bl	8004102 <__sfputs_r>
 80041dc:	3001      	adds	r0, #1
 80041de:	f000 80aa 	beq.w	8004336 <_vfiprintf_r+0x20e>
 80041e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041e4:	445a      	add	r2, fp
 80041e6:	9209      	str	r2, [sp, #36]	; 0x24
 80041e8:	f89a 3000 	ldrb.w	r3, [sl]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80a2 	beq.w	8004336 <_vfiprintf_r+0x20e>
 80041f2:	2300      	movs	r3, #0
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041fc:	f10a 0a01 	add.w	sl, sl, #1
 8004200:	9304      	str	r3, [sp, #16]
 8004202:	9307      	str	r3, [sp, #28]
 8004204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004208:	931a      	str	r3, [sp, #104]	; 0x68
 800420a:	4654      	mov	r4, sl
 800420c:	2205      	movs	r2, #5
 800420e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004212:	4858      	ldr	r0, [pc, #352]	; (8004374 <_vfiprintf_r+0x24c>)
 8004214:	f7fc f81c 	bl	8000250 <memchr>
 8004218:	9a04      	ldr	r2, [sp, #16]
 800421a:	b9d8      	cbnz	r0, 8004254 <_vfiprintf_r+0x12c>
 800421c:	06d1      	lsls	r1, r2, #27
 800421e:	bf44      	itt	mi
 8004220:	2320      	movmi	r3, #32
 8004222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004226:	0713      	lsls	r3, r2, #28
 8004228:	bf44      	itt	mi
 800422a:	232b      	movmi	r3, #43	; 0x2b
 800422c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004230:	f89a 3000 	ldrb.w	r3, [sl]
 8004234:	2b2a      	cmp	r3, #42	; 0x2a
 8004236:	d015      	beq.n	8004264 <_vfiprintf_r+0x13c>
 8004238:	9a07      	ldr	r2, [sp, #28]
 800423a:	4654      	mov	r4, sl
 800423c:	2000      	movs	r0, #0
 800423e:	f04f 0c0a 	mov.w	ip, #10
 8004242:	4621      	mov	r1, r4
 8004244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004248:	3b30      	subs	r3, #48	; 0x30
 800424a:	2b09      	cmp	r3, #9
 800424c:	d94e      	bls.n	80042ec <_vfiprintf_r+0x1c4>
 800424e:	b1b0      	cbz	r0, 800427e <_vfiprintf_r+0x156>
 8004250:	9207      	str	r2, [sp, #28]
 8004252:	e014      	b.n	800427e <_vfiprintf_r+0x156>
 8004254:	eba0 0308 	sub.w	r3, r0, r8
 8004258:	fa09 f303 	lsl.w	r3, r9, r3
 800425c:	4313      	orrs	r3, r2
 800425e:	9304      	str	r3, [sp, #16]
 8004260:	46a2      	mov	sl, r4
 8004262:	e7d2      	b.n	800420a <_vfiprintf_r+0xe2>
 8004264:	9b03      	ldr	r3, [sp, #12]
 8004266:	1d19      	adds	r1, r3, #4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	9103      	str	r1, [sp, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	bfbb      	ittet	lt
 8004270:	425b      	neglt	r3, r3
 8004272:	f042 0202 	orrlt.w	r2, r2, #2
 8004276:	9307      	strge	r3, [sp, #28]
 8004278:	9307      	strlt	r3, [sp, #28]
 800427a:	bfb8      	it	lt
 800427c:	9204      	strlt	r2, [sp, #16]
 800427e:	7823      	ldrb	r3, [r4, #0]
 8004280:	2b2e      	cmp	r3, #46	; 0x2e
 8004282:	d10c      	bne.n	800429e <_vfiprintf_r+0x176>
 8004284:	7863      	ldrb	r3, [r4, #1]
 8004286:	2b2a      	cmp	r3, #42	; 0x2a
 8004288:	d135      	bne.n	80042f6 <_vfiprintf_r+0x1ce>
 800428a:	9b03      	ldr	r3, [sp, #12]
 800428c:	1d1a      	adds	r2, r3, #4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	9203      	str	r2, [sp, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	bfb8      	it	lt
 8004296:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800429a:	3402      	adds	r4, #2
 800429c:	9305      	str	r3, [sp, #20]
 800429e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004384 <_vfiprintf_r+0x25c>
 80042a2:	7821      	ldrb	r1, [r4, #0]
 80042a4:	2203      	movs	r2, #3
 80042a6:	4650      	mov	r0, sl
 80042a8:	f7fb ffd2 	bl	8000250 <memchr>
 80042ac:	b140      	cbz	r0, 80042c0 <_vfiprintf_r+0x198>
 80042ae:	2340      	movs	r3, #64	; 0x40
 80042b0:	eba0 000a 	sub.w	r0, r0, sl
 80042b4:	fa03 f000 	lsl.w	r0, r3, r0
 80042b8:	9b04      	ldr	r3, [sp, #16]
 80042ba:	4303      	orrs	r3, r0
 80042bc:	3401      	adds	r4, #1
 80042be:	9304      	str	r3, [sp, #16]
 80042c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c4:	482c      	ldr	r0, [pc, #176]	; (8004378 <_vfiprintf_r+0x250>)
 80042c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042ca:	2206      	movs	r2, #6
 80042cc:	f7fb ffc0 	bl	8000250 <memchr>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d03f      	beq.n	8004354 <_vfiprintf_r+0x22c>
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <_vfiprintf_r+0x254>)
 80042d6:	bb1b      	cbnz	r3, 8004320 <_vfiprintf_r+0x1f8>
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	3307      	adds	r3, #7
 80042dc:	f023 0307 	bic.w	r3, r3, #7
 80042e0:	3308      	adds	r3, #8
 80042e2:	9303      	str	r3, [sp, #12]
 80042e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e6:	443b      	add	r3, r7
 80042e8:	9309      	str	r3, [sp, #36]	; 0x24
 80042ea:	e767      	b.n	80041bc <_vfiprintf_r+0x94>
 80042ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80042f0:	460c      	mov	r4, r1
 80042f2:	2001      	movs	r0, #1
 80042f4:	e7a5      	b.n	8004242 <_vfiprintf_r+0x11a>
 80042f6:	2300      	movs	r3, #0
 80042f8:	3401      	adds	r4, #1
 80042fa:	9305      	str	r3, [sp, #20]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f04f 0c0a 	mov.w	ip, #10
 8004302:	4620      	mov	r0, r4
 8004304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004308:	3a30      	subs	r2, #48	; 0x30
 800430a:	2a09      	cmp	r2, #9
 800430c:	d903      	bls.n	8004316 <_vfiprintf_r+0x1ee>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0c5      	beq.n	800429e <_vfiprintf_r+0x176>
 8004312:	9105      	str	r1, [sp, #20]
 8004314:	e7c3      	b.n	800429e <_vfiprintf_r+0x176>
 8004316:	fb0c 2101 	mla	r1, ip, r1, r2
 800431a:	4604      	mov	r4, r0
 800431c:	2301      	movs	r3, #1
 800431e:	e7f0      	b.n	8004302 <_vfiprintf_r+0x1da>
 8004320:	ab03      	add	r3, sp, #12
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	462a      	mov	r2, r5
 8004326:	4b16      	ldr	r3, [pc, #88]	; (8004380 <_vfiprintf_r+0x258>)
 8004328:	a904      	add	r1, sp, #16
 800432a:	4630      	mov	r0, r6
 800432c:	f000 f8bc 	bl	80044a8 <_printf_float>
 8004330:	4607      	mov	r7, r0
 8004332:	1c78      	adds	r0, r7, #1
 8004334:	d1d6      	bne.n	80042e4 <_vfiprintf_r+0x1bc>
 8004336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004338:	07d9      	lsls	r1, r3, #31
 800433a:	d405      	bmi.n	8004348 <_vfiprintf_r+0x220>
 800433c:	89ab      	ldrh	r3, [r5, #12]
 800433e:	059a      	lsls	r2, r3, #22
 8004340:	d402      	bmi.n	8004348 <_vfiprintf_r+0x220>
 8004342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004344:	f003 f90a 	bl	800755c <__retarget_lock_release_recursive>
 8004348:	89ab      	ldrh	r3, [r5, #12]
 800434a:	065b      	lsls	r3, r3, #25
 800434c:	f53f af12 	bmi.w	8004174 <_vfiprintf_r+0x4c>
 8004350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004352:	e711      	b.n	8004178 <_vfiprintf_r+0x50>
 8004354:	ab03      	add	r3, sp, #12
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	462a      	mov	r2, r5
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <_vfiprintf_r+0x258>)
 800435c:	a904      	add	r1, sp, #16
 800435e:	4630      	mov	r0, r6
 8004360:	f000 fb2e 	bl	80049c0 <_printf_i>
 8004364:	e7e4      	b.n	8004330 <_vfiprintf_r+0x208>
 8004366:	bf00      	nop
 8004368:	08008b34 	.word	0x08008b34
 800436c:	08008b54 	.word	0x08008b54
 8004370:	08008b14 	.word	0x08008b14
 8004374:	080088e4 	.word	0x080088e4
 8004378:	080088ee 	.word	0x080088ee
 800437c:	080044a9 	.word	0x080044a9
 8004380:	08004103 	.word	0x08004103
 8004384:	080088ea 	.word	0x080088ea

08004388 <__cvt>:
 8004388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438a:	ed2d 8b02 	vpush	{d8}
 800438e:	eeb0 8b40 	vmov.f64	d8, d0
 8004392:	b085      	sub	sp, #20
 8004394:	4617      	mov	r7, r2
 8004396:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004398:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800439a:	ee18 2a90 	vmov	r2, s17
 800439e:	f025 0520 	bic.w	r5, r5, #32
 80043a2:	2a00      	cmp	r2, #0
 80043a4:	bfb6      	itet	lt
 80043a6:	222d      	movlt	r2, #45	; 0x2d
 80043a8:	2200      	movge	r2, #0
 80043aa:	eeb1 8b40 	vneglt.f64	d8, d0
 80043ae:	2d46      	cmp	r5, #70	; 0x46
 80043b0:	460c      	mov	r4, r1
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	d004      	beq.n	80043c0 <__cvt+0x38>
 80043b6:	2d45      	cmp	r5, #69	; 0x45
 80043b8:	d100      	bne.n	80043bc <__cvt+0x34>
 80043ba:	3401      	adds	r4, #1
 80043bc:	2102      	movs	r1, #2
 80043be:	e000      	b.n	80043c2 <__cvt+0x3a>
 80043c0:	2103      	movs	r1, #3
 80043c2:	ab03      	add	r3, sp, #12
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	ab02      	add	r3, sp, #8
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4622      	mov	r2, r4
 80043cc:	4633      	mov	r3, r6
 80043ce:	eeb0 0b48 	vmov.f64	d0, d8
 80043d2:	f001 fe29 	bl	8006028 <_dtoa_r>
 80043d6:	2d47      	cmp	r5, #71	; 0x47
 80043d8:	d101      	bne.n	80043de <__cvt+0x56>
 80043da:	07fb      	lsls	r3, r7, #31
 80043dc:	d51a      	bpl.n	8004414 <__cvt+0x8c>
 80043de:	2d46      	cmp	r5, #70	; 0x46
 80043e0:	eb00 0204 	add.w	r2, r0, r4
 80043e4:	d10c      	bne.n	8004400 <__cvt+0x78>
 80043e6:	7803      	ldrb	r3, [r0, #0]
 80043e8:	2b30      	cmp	r3, #48	; 0x30
 80043ea:	d107      	bne.n	80043fc <__cvt+0x74>
 80043ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80043f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f4:	bf1c      	itt	ne
 80043f6:	f1c4 0401 	rsbne	r4, r4, #1
 80043fa:	6034      	strne	r4, [r6, #0]
 80043fc:	6833      	ldr	r3, [r6, #0]
 80043fe:	441a      	add	r2, r3
 8004400:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004408:	bf08      	it	eq
 800440a:	9203      	streq	r2, [sp, #12]
 800440c:	2130      	movs	r1, #48	; 0x30
 800440e:	9b03      	ldr	r3, [sp, #12]
 8004410:	4293      	cmp	r3, r2
 8004412:	d307      	bcc.n	8004424 <__cvt+0x9c>
 8004414:	9b03      	ldr	r3, [sp, #12]
 8004416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004418:	1a1b      	subs	r3, r3, r0
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	b005      	add	sp, #20
 800441e:	ecbd 8b02 	vpop	{d8}
 8004422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004424:	1c5c      	adds	r4, r3, #1
 8004426:	9403      	str	r4, [sp, #12]
 8004428:	7019      	strb	r1, [r3, #0]
 800442a:	e7f0      	b.n	800440e <__cvt+0x86>

0800442c <__exponent>:
 800442c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800442e:	4603      	mov	r3, r0
 8004430:	2900      	cmp	r1, #0
 8004432:	bfb8      	it	lt
 8004434:	4249      	neglt	r1, r1
 8004436:	f803 2b02 	strb.w	r2, [r3], #2
 800443a:	bfb4      	ite	lt
 800443c:	222d      	movlt	r2, #45	; 0x2d
 800443e:	222b      	movge	r2, #43	; 0x2b
 8004440:	2909      	cmp	r1, #9
 8004442:	7042      	strb	r2, [r0, #1]
 8004444:	dd2a      	ble.n	800449c <__exponent+0x70>
 8004446:	f10d 0407 	add.w	r4, sp, #7
 800444a:	46a4      	mov	ip, r4
 800444c:	270a      	movs	r7, #10
 800444e:	46a6      	mov	lr, r4
 8004450:	460a      	mov	r2, r1
 8004452:	fb91 f6f7 	sdiv	r6, r1, r7
 8004456:	fb07 1516 	mls	r5, r7, r6, r1
 800445a:	3530      	adds	r5, #48	; 0x30
 800445c:	2a63      	cmp	r2, #99	; 0x63
 800445e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004462:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004466:	4631      	mov	r1, r6
 8004468:	dcf1      	bgt.n	800444e <__exponent+0x22>
 800446a:	3130      	adds	r1, #48	; 0x30
 800446c:	f1ae 0502 	sub.w	r5, lr, #2
 8004470:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004474:	1c44      	adds	r4, r0, #1
 8004476:	4629      	mov	r1, r5
 8004478:	4561      	cmp	r1, ip
 800447a:	d30a      	bcc.n	8004492 <__exponent+0x66>
 800447c:	f10d 0209 	add.w	r2, sp, #9
 8004480:	eba2 020e 	sub.w	r2, r2, lr
 8004484:	4565      	cmp	r5, ip
 8004486:	bf88      	it	hi
 8004488:	2200      	movhi	r2, #0
 800448a:	4413      	add	r3, r2
 800448c:	1a18      	subs	r0, r3, r0
 800448e:	b003      	add	sp, #12
 8004490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004496:	f804 2f01 	strb.w	r2, [r4, #1]!
 800449a:	e7ed      	b.n	8004478 <__exponent+0x4c>
 800449c:	2330      	movs	r3, #48	; 0x30
 800449e:	3130      	adds	r1, #48	; 0x30
 80044a0:	7083      	strb	r3, [r0, #2]
 80044a2:	70c1      	strb	r1, [r0, #3]
 80044a4:	1d03      	adds	r3, r0, #4
 80044a6:	e7f1      	b.n	800448c <__exponent+0x60>

080044a8 <_printf_float>:
 80044a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ac:	b08b      	sub	sp, #44	; 0x2c
 80044ae:	460c      	mov	r4, r1
 80044b0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80044b4:	4616      	mov	r6, r2
 80044b6:	461f      	mov	r7, r3
 80044b8:	4605      	mov	r5, r0
 80044ba:	f003 f849 	bl	8007550 <_localeconv_r>
 80044be:	f8d0 b000 	ldr.w	fp, [r0]
 80044c2:	4658      	mov	r0, fp
 80044c4:	f7fb febc 	bl	8000240 <strlen>
 80044c8:	2300      	movs	r3, #0
 80044ca:	9308      	str	r3, [sp, #32]
 80044cc:	f8d8 3000 	ldr.w	r3, [r8]
 80044d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	3307      	adds	r3, #7
 80044d8:	f023 0307 	bic.w	r3, r3, #7
 80044dc:	f103 0108 	add.w	r1, r3, #8
 80044e0:	f8c8 1000 	str.w	r1, [r8]
 80044e4:	4682      	mov	sl, r0
 80044e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044ea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80044ee:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8004750 <_printf_float+0x2a8>
 80044f2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80044f6:	eeb0 6bc0 	vabs.f64	d6, d0
 80044fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80044fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004502:	dd24      	ble.n	800454e <_printf_float+0xa6>
 8004504:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450c:	d502      	bpl.n	8004514 <_printf_float+0x6c>
 800450e:	232d      	movs	r3, #45	; 0x2d
 8004510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004514:	4b90      	ldr	r3, [pc, #576]	; (8004758 <_printf_float+0x2b0>)
 8004516:	4891      	ldr	r0, [pc, #580]	; (800475c <_printf_float+0x2b4>)
 8004518:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800451c:	bf94      	ite	ls
 800451e:	4698      	movls	r8, r3
 8004520:	4680      	movhi	r8, r0
 8004522:	2303      	movs	r3, #3
 8004524:	6123      	str	r3, [r4, #16]
 8004526:	f022 0204 	bic.w	r2, r2, #4
 800452a:	2300      	movs	r3, #0
 800452c:	6022      	str	r2, [r4, #0]
 800452e:	9304      	str	r3, [sp, #16]
 8004530:	9700      	str	r7, [sp, #0]
 8004532:	4633      	mov	r3, r6
 8004534:	aa09      	add	r2, sp, #36	; 0x24
 8004536:	4621      	mov	r1, r4
 8004538:	4628      	mov	r0, r5
 800453a:	f000 f9d3 	bl	80048e4 <_printf_common>
 800453e:	3001      	adds	r0, #1
 8004540:	f040 808a 	bne.w	8004658 <_printf_float+0x1b0>
 8004544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004548:	b00b      	add	sp, #44	; 0x2c
 800454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454e:	eeb4 0b40 	vcmp.f64	d0, d0
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	d709      	bvc.n	800456c <_printf_float+0xc4>
 8004558:	ee10 3a90 	vmov	r3, s1
 800455c:	2b00      	cmp	r3, #0
 800455e:	bfbc      	itt	lt
 8004560:	232d      	movlt	r3, #45	; 0x2d
 8004562:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004566:	487e      	ldr	r0, [pc, #504]	; (8004760 <_printf_float+0x2b8>)
 8004568:	4b7e      	ldr	r3, [pc, #504]	; (8004764 <_printf_float+0x2bc>)
 800456a:	e7d5      	b.n	8004518 <_printf_float+0x70>
 800456c:	6863      	ldr	r3, [r4, #4]
 800456e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004572:	9104      	str	r1, [sp, #16]
 8004574:	1c59      	adds	r1, r3, #1
 8004576:	d13c      	bne.n	80045f2 <_printf_float+0x14a>
 8004578:	2306      	movs	r3, #6
 800457a:	6063      	str	r3, [r4, #4]
 800457c:	2300      	movs	r3, #0
 800457e:	9303      	str	r3, [sp, #12]
 8004580:	ab08      	add	r3, sp, #32
 8004582:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004586:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800458a:	ab07      	add	r3, sp, #28
 800458c:	6861      	ldr	r1, [r4, #4]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	6022      	str	r2, [r4, #0]
 8004592:	f10d 031b 	add.w	r3, sp, #27
 8004596:	4628      	mov	r0, r5
 8004598:	f7ff fef6 	bl	8004388 <__cvt>
 800459c:	9b04      	ldr	r3, [sp, #16]
 800459e:	9907      	ldr	r1, [sp, #28]
 80045a0:	2b47      	cmp	r3, #71	; 0x47
 80045a2:	4680      	mov	r8, r0
 80045a4:	d108      	bne.n	80045b8 <_printf_float+0x110>
 80045a6:	1cc8      	adds	r0, r1, #3
 80045a8:	db02      	blt.n	80045b0 <_printf_float+0x108>
 80045aa:	6863      	ldr	r3, [r4, #4]
 80045ac:	4299      	cmp	r1, r3
 80045ae:	dd41      	ble.n	8004634 <_printf_float+0x18c>
 80045b0:	f1a9 0902 	sub.w	r9, r9, #2
 80045b4:	fa5f f989 	uxtb.w	r9, r9
 80045b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045bc:	d820      	bhi.n	8004600 <_printf_float+0x158>
 80045be:	3901      	subs	r1, #1
 80045c0:	464a      	mov	r2, r9
 80045c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045c6:	9107      	str	r1, [sp, #28]
 80045c8:	f7ff ff30 	bl	800442c <__exponent>
 80045cc:	9a08      	ldr	r2, [sp, #32]
 80045ce:	9004      	str	r0, [sp, #16]
 80045d0:	1813      	adds	r3, r2, r0
 80045d2:	2a01      	cmp	r2, #1
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	dc02      	bgt.n	80045de <_printf_float+0x136>
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	07d2      	lsls	r2, r2, #31
 80045dc:	d501      	bpl.n	80045e2 <_printf_float+0x13a>
 80045de:	3301      	adds	r3, #1
 80045e0:	6123      	str	r3, [r4, #16]
 80045e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0a2      	beq.n	8004530 <_printf_float+0x88>
 80045ea:	232d      	movs	r3, #45	; 0x2d
 80045ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f0:	e79e      	b.n	8004530 <_printf_float+0x88>
 80045f2:	9904      	ldr	r1, [sp, #16]
 80045f4:	2947      	cmp	r1, #71	; 0x47
 80045f6:	d1c1      	bne.n	800457c <_printf_float+0xd4>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1bf      	bne.n	800457c <_printf_float+0xd4>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e7bc      	b.n	800457a <_printf_float+0xd2>
 8004600:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004604:	d118      	bne.n	8004638 <_printf_float+0x190>
 8004606:	2900      	cmp	r1, #0
 8004608:	6863      	ldr	r3, [r4, #4]
 800460a:	dd0b      	ble.n	8004624 <_printf_float+0x17c>
 800460c:	6121      	str	r1, [r4, #16]
 800460e:	b913      	cbnz	r3, 8004616 <_printf_float+0x16e>
 8004610:	6822      	ldr	r2, [r4, #0]
 8004612:	07d0      	lsls	r0, r2, #31
 8004614:	d502      	bpl.n	800461c <_printf_float+0x174>
 8004616:	3301      	adds	r3, #1
 8004618:	440b      	add	r3, r1
 800461a:	6123      	str	r3, [r4, #16]
 800461c:	2300      	movs	r3, #0
 800461e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004620:	9304      	str	r3, [sp, #16]
 8004622:	e7de      	b.n	80045e2 <_printf_float+0x13a>
 8004624:	b913      	cbnz	r3, 800462c <_printf_float+0x184>
 8004626:	6822      	ldr	r2, [r4, #0]
 8004628:	07d2      	lsls	r2, r2, #31
 800462a:	d501      	bpl.n	8004630 <_printf_float+0x188>
 800462c:	3302      	adds	r3, #2
 800462e:	e7f4      	b.n	800461a <_printf_float+0x172>
 8004630:	2301      	movs	r3, #1
 8004632:	e7f2      	b.n	800461a <_printf_float+0x172>
 8004634:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004638:	9b08      	ldr	r3, [sp, #32]
 800463a:	4299      	cmp	r1, r3
 800463c:	db05      	blt.n	800464a <_printf_float+0x1a2>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	6121      	str	r1, [r4, #16]
 8004642:	07d8      	lsls	r0, r3, #31
 8004644:	d5ea      	bpl.n	800461c <_printf_float+0x174>
 8004646:	1c4b      	adds	r3, r1, #1
 8004648:	e7e7      	b.n	800461a <_printf_float+0x172>
 800464a:	2900      	cmp	r1, #0
 800464c:	bfd4      	ite	le
 800464e:	f1c1 0202 	rsble	r2, r1, #2
 8004652:	2201      	movgt	r2, #1
 8004654:	4413      	add	r3, r2
 8004656:	e7e0      	b.n	800461a <_printf_float+0x172>
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	055a      	lsls	r2, r3, #21
 800465c:	d407      	bmi.n	800466e <_printf_float+0x1c6>
 800465e:	6923      	ldr	r3, [r4, #16]
 8004660:	4642      	mov	r2, r8
 8004662:	4631      	mov	r1, r6
 8004664:	4628      	mov	r0, r5
 8004666:	47b8      	blx	r7
 8004668:	3001      	adds	r0, #1
 800466a:	d12a      	bne.n	80046c2 <_printf_float+0x21a>
 800466c:	e76a      	b.n	8004544 <_printf_float+0x9c>
 800466e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004672:	f240 80e2 	bls.w	800483a <_printf_float+0x392>
 8004676:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800467a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004682:	d133      	bne.n	80046ec <_printf_float+0x244>
 8004684:	4a38      	ldr	r2, [pc, #224]	; (8004768 <_printf_float+0x2c0>)
 8004686:	2301      	movs	r3, #1
 8004688:	4631      	mov	r1, r6
 800468a:	4628      	mov	r0, r5
 800468c:	47b8      	blx	r7
 800468e:	3001      	adds	r0, #1
 8004690:	f43f af58 	beq.w	8004544 <_printf_float+0x9c>
 8004694:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004698:	429a      	cmp	r2, r3
 800469a:	db02      	blt.n	80046a2 <_printf_float+0x1fa>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	07d8      	lsls	r0, r3, #31
 80046a0:	d50f      	bpl.n	80046c2 <_printf_float+0x21a>
 80046a2:	4653      	mov	r3, sl
 80046a4:	465a      	mov	r2, fp
 80046a6:	4631      	mov	r1, r6
 80046a8:	4628      	mov	r0, r5
 80046aa:	47b8      	blx	r7
 80046ac:	3001      	adds	r0, #1
 80046ae:	f43f af49 	beq.w	8004544 <_printf_float+0x9c>
 80046b2:	f04f 0800 	mov.w	r8, #0
 80046b6:	f104 091a 	add.w	r9, r4, #26
 80046ba:	9b08      	ldr	r3, [sp, #32]
 80046bc:	3b01      	subs	r3, #1
 80046be:	4543      	cmp	r3, r8
 80046c0:	dc09      	bgt.n	80046d6 <_printf_float+0x22e>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	079b      	lsls	r3, r3, #30
 80046c6:	f100 8108 	bmi.w	80048da <_printf_float+0x432>
 80046ca:	68e0      	ldr	r0, [r4, #12]
 80046cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ce:	4298      	cmp	r0, r3
 80046d0:	bfb8      	it	lt
 80046d2:	4618      	movlt	r0, r3
 80046d4:	e738      	b.n	8004548 <_printf_float+0xa0>
 80046d6:	2301      	movs	r3, #1
 80046d8:	464a      	mov	r2, r9
 80046da:	4631      	mov	r1, r6
 80046dc:	4628      	mov	r0, r5
 80046de:	47b8      	blx	r7
 80046e0:	3001      	adds	r0, #1
 80046e2:	f43f af2f 	beq.w	8004544 <_printf_float+0x9c>
 80046e6:	f108 0801 	add.w	r8, r8, #1
 80046ea:	e7e6      	b.n	80046ba <_printf_float+0x212>
 80046ec:	9b07      	ldr	r3, [sp, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	dc3c      	bgt.n	800476c <_printf_float+0x2c4>
 80046f2:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <_printf_float+0x2c0>)
 80046f4:	2301      	movs	r3, #1
 80046f6:	4631      	mov	r1, r6
 80046f8:	4628      	mov	r0, r5
 80046fa:	47b8      	blx	r7
 80046fc:	3001      	adds	r0, #1
 80046fe:	f43f af21 	beq.w	8004544 <_printf_float+0x9c>
 8004702:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004706:	4313      	orrs	r3, r2
 8004708:	d102      	bne.n	8004710 <_printf_float+0x268>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	d5d8      	bpl.n	80046c2 <_printf_float+0x21a>
 8004710:	4653      	mov	r3, sl
 8004712:	465a      	mov	r2, fp
 8004714:	4631      	mov	r1, r6
 8004716:	4628      	mov	r0, r5
 8004718:	47b8      	blx	r7
 800471a:	3001      	adds	r0, #1
 800471c:	f43f af12 	beq.w	8004544 <_printf_float+0x9c>
 8004720:	f04f 0900 	mov.w	r9, #0
 8004724:	f104 0a1a 	add.w	sl, r4, #26
 8004728:	9b07      	ldr	r3, [sp, #28]
 800472a:	425b      	negs	r3, r3
 800472c:	454b      	cmp	r3, r9
 800472e:	dc01      	bgt.n	8004734 <_printf_float+0x28c>
 8004730:	9b08      	ldr	r3, [sp, #32]
 8004732:	e795      	b.n	8004660 <_printf_float+0x1b8>
 8004734:	2301      	movs	r3, #1
 8004736:	4652      	mov	r2, sl
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	f43f af00 	beq.w	8004544 <_printf_float+0x9c>
 8004744:	f109 0901 	add.w	r9, r9, #1
 8004748:	e7ee      	b.n	8004728 <_printf_float+0x280>
 800474a:	bf00      	nop
 800474c:	f3af 8000 	nop.w
 8004750:	ffffffff 	.word	0xffffffff
 8004754:	7fefffff 	.word	0x7fefffff
 8004758:	080088f5 	.word	0x080088f5
 800475c:	080088f9 	.word	0x080088f9
 8004760:	08008901 	.word	0x08008901
 8004764:	080088fd 	.word	0x080088fd
 8004768:	08008905 	.word	0x08008905
 800476c:	9a08      	ldr	r2, [sp, #32]
 800476e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004770:	429a      	cmp	r2, r3
 8004772:	bfa8      	it	ge
 8004774:	461a      	movge	r2, r3
 8004776:	2a00      	cmp	r2, #0
 8004778:	4691      	mov	r9, r2
 800477a:	dc38      	bgt.n	80047ee <_printf_float+0x346>
 800477c:	2300      	movs	r3, #0
 800477e:	9305      	str	r3, [sp, #20]
 8004780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004784:	f104 021a 	add.w	r2, r4, #26
 8004788:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800478a:	9905      	ldr	r1, [sp, #20]
 800478c:	9304      	str	r3, [sp, #16]
 800478e:	eba3 0309 	sub.w	r3, r3, r9
 8004792:	428b      	cmp	r3, r1
 8004794:	dc33      	bgt.n	80047fe <_printf_float+0x356>
 8004796:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800479a:	429a      	cmp	r2, r3
 800479c:	db3c      	blt.n	8004818 <_printf_float+0x370>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	07da      	lsls	r2, r3, #31
 80047a2:	d439      	bmi.n	8004818 <_printf_float+0x370>
 80047a4:	9b08      	ldr	r3, [sp, #32]
 80047a6:	9a04      	ldr	r2, [sp, #16]
 80047a8:	9907      	ldr	r1, [sp, #28]
 80047aa:	1a9a      	subs	r2, r3, r2
 80047ac:	eba3 0901 	sub.w	r9, r3, r1
 80047b0:	4591      	cmp	r9, r2
 80047b2:	bfa8      	it	ge
 80047b4:	4691      	movge	r9, r2
 80047b6:	f1b9 0f00 	cmp.w	r9, #0
 80047ba:	dc35      	bgt.n	8004828 <_printf_float+0x380>
 80047bc:	f04f 0800 	mov.w	r8, #0
 80047c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047c4:	f104 0a1a 	add.w	sl, r4, #26
 80047c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	eba3 0309 	sub.w	r3, r3, r9
 80047d2:	4543      	cmp	r3, r8
 80047d4:	f77f af75 	ble.w	80046c2 <_printf_float+0x21a>
 80047d8:	2301      	movs	r3, #1
 80047da:	4652      	mov	r2, sl
 80047dc:	4631      	mov	r1, r6
 80047de:	4628      	mov	r0, r5
 80047e0:	47b8      	blx	r7
 80047e2:	3001      	adds	r0, #1
 80047e4:	f43f aeae 	beq.w	8004544 <_printf_float+0x9c>
 80047e8:	f108 0801 	add.w	r8, r8, #1
 80047ec:	e7ec      	b.n	80047c8 <_printf_float+0x320>
 80047ee:	4613      	mov	r3, r2
 80047f0:	4631      	mov	r1, r6
 80047f2:	4642      	mov	r2, r8
 80047f4:	4628      	mov	r0, r5
 80047f6:	47b8      	blx	r7
 80047f8:	3001      	adds	r0, #1
 80047fa:	d1bf      	bne.n	800477c <_printf_float+0x2d4>
 80047fc:	e6a2      	b.n	8004544 <_printf_float+0x9c>
 80047fe:	2301      	movs	r3, #1
 8004800:	4631      	mov	r1, r6
 8004802:	4628      	mov	r0, r5
 8004804:	9204      	str	r2, [sp, #16]
 8004806:	47b8      	blx	r7
 8004808:	3001      	adds	r0, #1
 800480a:	f43f ae9b 	beq.w	8004544 <_printf_float+0x9c>
 800480e:	9b05      	ldr	r3, [sp, #20]
 8004810:	9a04      	ldr	r2, [sp, #16]
 8004812:	3301      	adds	r3, #1
 8004814:	9305      	str	r3, [sp, #20]
 8004816:	e7b7      	b.n	8004788 <_printf_float+0x2e0>
 8004818:	4653      	mov	r3, sl
 800481a:	465a      	mov	r2, fp
 800481c:	4631      	mov	r1, r6
 800481e:	4628      	mov	r0, r5
 8004820:	47b8      	blx	r7
 8004822:	3001      	adds	r0, #1
 8004824:	d1be      	bne.n	80047a4 <_printf_float+0x2fc>
 8004826:	e68d      	b.n	8004544 <_printf_float+0x9c>
 8004828:	9a04      	ldr	r2, [sp, #16]
 800482a:	464b      	mov	r3, r9
 800482c:	4442      	add	r2, r8
 800482e:	4631      	mov	r1, r6
 8004830:	4628      	mov	r0, r5
 8004832:	47b8      	blx	r7
 8004834:	3001      	adds	r0, #1
 8004836:	d1c1      	bne.n	80047bc <_printf_float+0x314>
 8004838:	e684      	b.n	8004544 <_printf_float+0x9c>
 800483a:	9a08      	ldr	r2, [sp, #32]
 800483c:	2a01      	cmp	r2, #1
 800483e:	dc01      	bgt.n	8004844 <_printf_float+0x39c>
 8004840:	07db      	lsls	r3, r3, #31
 8004842:	d537      	bpl.n	80048b4 <_printf_float+0x40c>
 8004844:	2301      	movs	r3, #1
 8004846:	4642      	mov	r2, r8
 8004848:	4631      	mov	r1, r6
 800484a:	4628      	mov	r0, r5
 800484c:	47b8      	blx	r7
 800484e:	3001      	adds	r0, #1
 8004850:	f43f ae78 	beq.w	8004544 <_printf_float+0x9c>
 8004854:	4653      	mov	r3, sl
 8004856:	465a      	mov	r2, fp
 8004858:	4631      	mov	r1, r6
 800485a:	4628      	mov	r0, r5
 800485c:	47b8      	blx	r7
 800485e:	3001      	adds	r0, #1
 8004860:	f43f ae70 	beq.w	8004544 <_printf_float+0x9c>
 8004864:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004868:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004870:	d01b      	beq.n	80048aa <_printf_float+0x402>
 8004872:	9b08      	ldr	r3, [sp, #32]
 8004874:	f108 0201 	add.w	r2, r8, #1
 8004878:	3b01      	subs	r3, #1
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	d10e      	bne.n	80048a2 <_printf_float+0x3fa>
 8004884:	e65e      	b.n	8004544 <_printf_float+0x9c>
 8004886:	2301      	movs	r3, #1
 8004888:	464a      	mov	r2, r9
 800488a:	4631      	mov	r1, r6
 800488c:	4628      	mov	r0, r5
 800488e:	47b8      	blx	r7
 8004890:	3001      	adds	r0, #1
 8004892:	f43f ae57 	beq.w	8004544 <_printf_float+0x9c>
 8004896:	f108 0801 	add.w	r8, r8, #1
 800489a:	9b08      	ldr	r3, [sp, #32]
 800489c:	3b01      	subs	r3, #1
 800489e:	4543      	cmp	r3, r8
 80048a0:	dcf1      	bgt.n	8004886 <_printf_float+0x3de>
 80048a2:	9b04      	ldr	r3, [sp, #16]
 80048a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048a8:	e6db      	b.n	8004662 <_printf_float+0x1ba>
 80048aa:	f04f 0800 	mov.w	r8, #0
 80048ae:	f104 091a 	add.w	r9, r4, #26
 80048b2:	e7f2      	b.n	800489a <_printf_float+0x3f2>
 80048b4:	2301      	movs	r3, #1
 80048b6:	4642      	mov	r2, r8
 80048b8:	e7df      	b.n	800487a <_printf_float+0x3d2>
 80048ba:	2301      	movs	r3, #1
 80048bc:	464a      	mov	r2, r9
 80048be:	4631      	mov	r1, r6
 80048c0:	4628      	mov	r0, r5
 80048c2:	47b8      	blx	r7
 80048c4:	3001      	adds	r0, #1
 80048c6:	f43f ae3d 	beq.w	8004544 <_printf_float+0x9c>
 80048ca:	f108 0801 	add.w	r8, r8, #1
 80048ce:	68e3      	ldr	r3, [r4, #12]
 80048d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048d2:	1a5b      	subs	r3, r3, r1
 80048d4:	4543      	cmp	r3, r8
 80048d6:	dcf0      	bgt.n	80048ba <_printf_float+0x412>
 80048d8:	e6f7      	b.n	80046ca <_printf_float+0x222>
 80048da:	f04f 0800 	mov.w	r8, #0
 80048de:	f104 0919 	add.w	r9, r4, #25
 80048e2:	e7f4      	b.n	80048ce <_printf_float+0x426>

080048e4 <_printf_common>:
 80048e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e8:	4616      	mov	r6, r2
 80048ea:	4699      	mov	r9, r3
 80048ec:	688a      	ldr	r2, [r1, #8]
 80048ee:	690b      	ldr	r3, [r1, #16]
 80048f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048f4:	4293      	cmp	r3, r2
 80048f6:	bfb8      	it	lt
 80048f8:	4613      	movlt	r3, r2
 80048fa:	6033      	str	r3, [r6, #0]
 80048fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004900:	4607      	mov	r7, r0
 8004902:	460c      	mov	r4, r1
 8004904:	b10a      	cbz	r2, 800490a <_printf_common+0x26>
 8004906:	3301      	adds	r3, #1
 8004908:	6033      	str	r3, [r6, #0]
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	0699      	lsls	r1, r3, #26
 800490e:	bf42      	ittt	mi
 8004910:	6833      	ldrmi	r3, [r6, #0]
 8004912:	3302      	addmi	r3, #2
 8004914:	6033      	strmi	r3, [r6, #0]
 8004916:	6825      	ldr	r5, [r4, #0]
 8004918:	f015 0506 	ands.w	r5, r5, #6
 800491c:	d106      	bne.n	800492c <_printf_common+0x48>
 800491e:	f104 0a19 	add.w	sl, r4, #25
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	6832      	ldr	r2, [r6, #0]
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	42ab      	cmp	r3, r5
 800492a:	dc26      	bgt.n	800497a <_printf_common+0x96>
 800492c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004930:	1e13      	subs	r3, r2, #0
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	bf18      	it	ne
 8004936:	2301      	movne	r3, #1
 8004938:	0692      	lsls	r2, r2, #26
 800493a:	d42b      	bmi.n	8004994 <_printf_common+0xb0>
 800493c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004940:	4649      	mov	r1, r9
 8004942:	4638      	mov	r0, r7
 8004944:	47c0      	blx	r8
 8004946:	3001      	adds	r0, #1
 8004948:	d01e      	beq.n	8004988 <_printf_common+0xa4>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	68e5      	ldr	r5, [r4, #12]
 800494e:	6832      	ldr	r2, [r6, #0]
 8004950:	f003 0306 	and.w	r3, r3, #6
 8004954:	2b04      	cmp	r3, #4
 8004956:	bf08      	it	eq
 8004958:	1aad      	subeq	r5, r5, r2
 800495a:	68a3      	ldr	r3, [r4, #8]
 800495c:	6922      	ldr	r2, [r4, #16]
 800495e:	bf0c      	ite	eq
 8004960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004964:	2500      	movne	r5, #0
 8004966:	4293      	cmp	r3, r2
 8004968:	bfc4      	itt	gt
 800496a:	1a9b      	subgt	r3, r3, r2
 800496c:	18ed      	addgt	r5, r5, r3
 800496e:	2600      	movs	r6, #0
 8004970:	341a      	adds	r4, #26
 8004972:	42b5      	cmp	r5, r6
 8004974:	d11a      	bne.n	80049ac <_printf_common+0xc8>
 8004976:	2000      	movs	r0, #0
 8004978:	e008      	b.n	800498c <_printf_common+0xa8>
 800497a:	2301      	movs	r3, #1
 800497c:	4652      	mov	r2, sl
 800497e:	4649      	mov	r1, r9
 8004980:	4638      	mov	r0, r7
 8004982:	47c0      	blx	r8
 8004984:	3001      	adds	r0, #1
 8004986:	d103      	bne.n	8004990 <_printf_common+0xac>
 8004988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800498c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004990:	3501      	adds	r5, #1
 8004992:	e7c6      	b.n	8004922 <_printf_common+0x3e>
 8004994:	18e1      	adds	r1, r4, r3
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	2030      	movs	r0, #48	; 0x30
 800499a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800499e:	4422      	add	r2, r4
 80049a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049a8:	3302      	adds	r3, #2
 80049aa:	e7c7      	b.n	800493c <_printf_common+0x58>
 80049ac:	2301      	movs	r3, #1
 80049ae:	4622      	mov	r2, r4
 80049b0:	4649      	mov	r1, r9
 80049b2:	4638      	mov	r0, r7
 80049b4:	47c0      	blx	r8
 80049b6:	3001      	adds	r0, #1
 80049b8:	d0e6      	beq.n	8004988 <_printf_common+0xa4>
 80049ba:	3601      	adds	r6, #1
 80049bc:	e7d9      	b.n	8004972 <_printf_common+0x8e>
	...

080049c0 <_printf_i>:
 80049c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	7e0f      	ldrb	r7, [r1, #24]
 80049c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049c8:	2f78      	cmp	r7, #120	; 0x78
 80049ca:	4691      	mov	r9, r2
 80049cc:	4680      	mov	r8, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	469a      	mov	sl, r3
 80049d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049d6:	d807      	bhi.n	80049e8 <_printf_i+0x28>
 80049d8:	2f62      	cmp	r7, #98	; 0x62
 80049da:	d80a      	bhi.n	80049f2 <_printf_i+0x32>
 80049dc:	2f00      	cmp	r7, #0
 80049de:	f000 80d8 	beq.w	8004b92 <_printf_i+0x1d2>
 80049e2:	2f58      	cmp	r7, #88	; 0x58
 80049e4:	f000 80a3 	beq.w	8004b2e <_printf_i+0x16e>
 80049e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049f0:	e03a      	b.n	8004a68 <_printf_i+0xa8>
 80049f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049f6:	2b15      	cmp	r3, #21
 80049f8:	d8f6      	bhi.n	80049e8 <_printf_i+0x28>
 80049fa:	a101      	add	r1, pc, #4	; (adr r1, 8004a00 <_printf_i+0x40>)
 80049fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a00:	08004a59 	.word	0x08004a59
 8004a04:	08004a6d 	.word	0x08004a6d
 8004a08:	080049e9 	.word	0x080049e9
 8004a0c:	080049e9 	.word	0x080049e9
 8004a10:	080049e9 	.word	0x080049e9
 8004a14:	080049e9 	.word	0x080049e9
 8004a18:	08004a6d 	.word	0x08004a6d
 8004a1c:	080049e9 	.word	0x080049e9
 8004a20:	080049e9 	.word	0x080049e9
 8004a24:	080049e9 	.word	0x080049e9
 8004a28:	080049e9 	.word	0x080049e9
 8004a2c:	08004b79 	.word	0x08004b79
 8004a30:	08004a9d 	.word	0x08004a9d
 8004a34:	08004b5b 	.word	0x08004b5b
 8004a38:	080049e9 	.word	0x080049e9
 8004a3c:	080049e9 	.word	0x080049e9
 8004a40:	08004b9b 	.word	0x08004b9b
 8004a44:	080049e9 	.word	0x080049e9
 8004a48:	08004a9d 	.word	0x08004a9d
 8004a4c:	080049e9 	.word	0x080049e9
 8004a50:	080049e9 	.word	0x080049e9
 8004a54:	08004b63 	.word	0x08004b63
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	1d1a      	adds	r2, r3, #4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	602a      	str	r2, [r5, #0]
 8004a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0a3      	b.n	8004bb4 <_printf_i+0x1f4>
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	6829      	ldr	r1, [r5, #0]
 8004a70:	0606      	lsls	r6, r0, #24
 8004a72:	f101 0304 	add.w	r3, r1, #4
 8004a76:	d50a      	bpl.n	8004a8e <_printf_i+0xce>
 8004a78:	680e      	ldr	r6, [r1, #0]
 8004a7a:	602b      	str	r3, [r5, #0]
 8004a7c:	2e00      	cmp	r6, #0
 8004a7e:	da03      	bge.n	8004a88 <_printf_i+0xc8>
 8004a80:	232d      	movs	r3, #45	; 0x2d
 8004a82:	4276      	negs	r6, r6
 8004a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a88:	485e      	ldr	r0, [pc, #376]	; (8004c04 <_printf_i+0x244>)
 8004a8a:	230a      	movs	r3, #10
 8004a8c:	e019      	b.n	8004ac2 <_printf_i+0x102>
 8004a8e:	680e      	ldr	r6, [r1, #0]
 8004a90:	602b      	str	r3, [r5, #0]
 8004a92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a96:	bf18      	it	ne
 8004a98:	b236      	sxthne	r6, r6
 8004a9a:	e7ef      	b.n	8004a7c <_printf_i+0xbc>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	6820      	ldr	r0, [r4, #0]
 8004aa0:	1d19      	adds	r1, r3, #4
 8004aa2:	6029      	str	r1, [r5, #0]
 8004aa4:	0601      	lsls	r1, r0, #24
 8004aa6:	d501      	bpl.n	8004aac <_printf_i+0xec>
 8004aa8:	681e      	ldr	r6, [r3, #0]
 8004aaa:	e002      	b.n	8004ab2 <_printf_i+0xf2>
 8004aac:	0646      	lsls	r6, r0, #25
 8004aae:	d5fb      	bpl.n	8004aa8 <_printf_i+0xe8>
 8004ab0:	881e      	ldrh	r6, [r3, #0]
 8004ab2:	4854      	ldr	r0, [pc, #336]	; (8004c04 <_printf_i+0x244>)
 8004ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2308      	moveq	r3, #8
 8004aba:	230a      	movne	r3, #10
 8004abc:	2100      	movs	r1, #0
 8004abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ac2:	6865      	ldr	r5, [r4, #4]
 8004ac4:	60a5      	str	r5, [r4, #8]
 8004ac6:	2d00      	cmp	r5, #0
 8004ac8:	bfa2      	ittt	ge
 8004aca:	6821      	ldrge	r1, [r4, #0]
 8004acc:	f021 0104 	bicge.w	r1, r1, #4
 8004ad0:	6021      	strge	r1, [r4, #0]
 8004ad2:	b90e      	cbnz	r6, 8004ad8 <_printf_i+0x118>
 8004ad4:	2d00      	cmp	r5, #0
 8004ad6:	d04d      	beq.n	8004b74 <_printf_i+0x1b4>
 8004ad8:	4615      	mov	r5, r2
 8004ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ade:	fb03 6711 	mls	r7, r3, r1, r6
 8004ae2:	5dc7      	ldrb	r7, [r0, r7]
 8004ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ae8:	4637      	mov	r7, r6
 8004aea:	42bb      	cmp	r3, r7
 8004aec:	460e      	mov	r6, r1
 8004aee:	d9f4      	bls.n	8004ada <_printf_i+0x11a>
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d10b      	bne.n	8004b0c <_printf_i+0x14c>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	07de      	lsls	r6, r3, #31
 8004af8:	d508      	bpl.n	8004b0c <_printf_i+0x14c>
 8004afa:	6923      	ldr	r3, [r4, #16]
 8004afc:	6861      	ldr	r1, [r4, #4]
 8004afe:	4299      	cmp	r1, r3
 8004b00:	bfde      	ittt	le
 8004b02:	2330      	movle	r3, #48	; 0x30
 8004b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b0c:	1b52      	subs	r2, r2, r5
 8004b0e:	6122      	str	r2, [r4, #16]
 8004b10:	f8cd a000 	str.w	sl, [sp]
 8004b14:	464b      	mov	r3, r9
 8004b16:	aa03      	add	r2, sp, #12
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f7ff fee2 	bl	80048e4 <_printf_common>
 8004b20:	3001      	adds	r0, #1
 8004b22:	d14c      	bne.n	8004bbe <_printf_i+0x1fe>
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b28:	b004      	add	sp, #16
 8004b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2e:	4835      	ldr	r0, [pc, #212]	; (8004c04 <_printf_i+0x244>)
 8004b30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b34:	6829      	ldr	r1, [r5, #0]
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b3c:	6029      	str	r1, [r5, #0]
 8004b3e:	061d      	lsls	r5, r3, #24
 8004b40:	d514      	bpl.n	8004b6c <_printf_i+0x1ac>
 8004b42:	07df      	lsls	r7, r3, #31
 8004b44:	bf44      	itt	mi
 8004b46:	f043 0320 	orrmi.w	r3, r3, #32
 8004b4a:	6023      	strmi	r3, [r4, #0]
 8004b4c:	b91e      	cbnz	r6, 8004b56 <_printf_i+0x196>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	f023 0320 	bic.w	r3, r3, #32
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	2310      	movs	r3, #16
 8004b58:	e7b0      	b.n	8004abc <_printf_i+0xfc>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	f043 0320 	orr.w	r3, r3, #32
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	2378      	movs	r3, #120	; 0x78
 8004b64:	4828      	ldr	r0, [pc, #160]	; (8004c08 <_printf_i+0x248>)
 8004b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b6a:	e7e3      	b.n	8004b34 <_printf_i+0x174>
 8004b6c:	0659      	lsls	r1, r3, #25
 8004b6e:	bf48      	it	mi
 8004b70:	b2b6      	uxthmi	r6, r6
 8004b72:	e7e6      	b.n	8004b42 <_printf_i+0x182>
 8004b74:	4615      	mov	r5, r2
 8004b76:	e7bb      	b.n	8004af0 <_printf_i+0x130>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	6826      	ldr	r6, [r4, #0]
 8004b7c:	6961      	ldr	r1, [r4, #20]
 8004b7e:	1d18      	adds	r0, r3, #4
 8004b80:	6028      	str	r0, [r5, #0]
 8004b82:	0635      	lsls	r5, r6, #24
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	d501      	bpl.n	8004b8c <_printf_i+0x1cc>
 8004b88:	6019      	str	r1, [r3, #0]
 8004b8a:	e002      	b.n	8004b92 <_printf_i+0x1d2>
 8004b8c:	0670      	lsls	r0, r6, #25
 8004b8e:	d5fb      	bpl.n	8004b88 <_printf_i+0x1c8>
 8004b90:	8019      	strh	r1, [r3, #0]
 8004b92:	2300      	movs	r3, #0
 8004b94:	6123      	str	r3, [r4, #16]
 8004b96:	4615      	mov	r5, r2
 8004b98:	e7ba      	b.n	8004b10 <_printf_i+0x150>
 8004b9a:	682b      	ldr	r3, [r5, #0]
 8004b9c:	1d1a      	adds	r2, r3, #4
 8004b9e:	602a      	str	r2, [r5, #0]
 8004ba0:	681d      	ldr	r5, [r3, #0]
 8004ba2:	6862      	ldr	r2, [r4, #4]
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f7fb fb52 	bl	8000250 <memchr>
 8004bac:	b108      	cbz	r0, 8004bb2 <_printf_i+0x1f2>
 8004bae:	1b40      	subs	r0, r0, r5
 8004bb0:	6060      	str	r0, [r4, #4]
 8004bb2:	6863      	ldr	r3, [r4, #4]
 8004bb4:	6123      	str	r3, [r4, #16]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bbc:	e7a8      	b.n	8004b10 <_printf_i+0x150>
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	462a      	mov	r2, r5
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	4640      	mov	r0, r8
 8004bc6:	47d0      	blx	sl
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d0ab      	beq.n	8004b24 <_printf_i+0x164>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	079b      	lsls	r3, r3, #30
 8004bd0:	d413      	bmi.n	8004bfa <_printf_i+0x23a>
 8004bd2:	68e0      	ldr	r0, [r4, #12]
 8004bd4:	9b03      	ldr	r3, [sp, #12]
 8004bd6:	4298      	cmp	r0, r3
 8004bd8:	bfb8      	it	lt
 8004bda:	4618      	movlt	r0, r3
 8004bdc:	e7a4      	b.n	8004b28 <_printf_i+0x168>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4632      	mov	r2, r6
 8004be2:	4649      	mov	r1, r9
 8004be4:	4640      	mov	r0, r8
 8004be6:	47d0      	blx	sl
 8004be8:	3001      	adds	r0, #1
 8004bea:	d09b      	beq.n	8004b24 <_printf_i+0x164>
 8004bec:	3501      	adds	r5, #1
 8004bee:	68e3      	ldr	r3, [r4, #12]
 8004bf0:	9903      	ldr	r1, [sp, #12]
 8004bf2:	1a5b      	subs	r3, r3, r1
 8004bf4:	42ab      	cmp	r3, r5
 8004bf6:	dcf2      	bgt.n	8004bde <_printf_i+0x21e>
 8004bf8:	e7eb      	b.n	8004bd2 <_printf_i+0x212>
 8004bfa:	2500      	movs	r5, #0
 8004bfc:	f104 0619 	add.w	r6, r4, #25
 8004c00:	e7f5      	b.n	8004bee <_printf_i+0x22e>
 8004c02:	bf00      	nop
 8004c04:	08008907 	.word	0x08008907
 8004c08:	08008918 	.word	0x08008918

08004c0c <_scanf_float>:
 8004c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c10:	b087      	sub	sp, #28
 8004c12:	4617      	mov	r7, r2
 8004c14:	9303      	str	r3, [sp, #12]
 8004c16:	688b      	ldr	r3, [r1, #8]
 8004c18:	1e5a      	subs	r2, r3, #1
 8004c1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004c1e:	bf83      	ittte	hi
 8004c20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004c24:	195b      	addhi	r3, r3, r5
 8004c26:	9302      	strhi	r3, [sp, #8]
 8004c28:	2300      	movls	r3, #0
 8004c2a:	bf86      	itte	hi
 8004c2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004c30:	608b      	strhi	r3, [r1, #8]
 8004c32:	9302      	strls	r3, [sp, #8]
 8004c34:	680b      	ldr	r3, [r1, #0]
 8004c36:	468b      	mov	fp, r1
 8004c38:	2500      	movs	r5, #0
 8004c3a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004c3e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004c42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004c46:	4680      	mov	r8, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	465e      	mov	r6, fp
 8004c4c:	46aa      	mov	sl, r5
 8004c4e:	46a9      	mov	r9, r5
 8004c50:	9501      	str	r5, [sp, #4]
 8004c52:	68a2      	ldr	r2, [r4, #8]
 8004c54:	b152      	cbz	r2, 8004c6c <_scanf_float+0x60>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b4e      	cmp	r3, #78	; 0x4e
 8004c5c:	d864      	bhi.n	8004d28 <_scanf_float+0x11c>
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d83c      	bhi.n	8004cdc <_scanf_float+0xd0>
 8004c62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004c66:	b2c8      	uxtb	r0, r1
 8004c68:	280e      	cmp	r0, #14
 8004c6a:	d93a      	bls.n	8004ce2 <_scanf_float+0xd6>
 8004c6c:	f1b9 0f00 	cmp.w	r9, #0
 8004c70:	d003      	beq.n	8004c7a <_scanf_float+0x6e>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c7e:	f1ba 0f01 	cmp.w	sl, #1
 8004c82:	f200 8113 	bhi.w	8004eac <_scanf_float+0x2a0>
 8004c86:	455e      	cmp	r6, fp
 8004c88:	f200 8105 	bhi.w	8004e96 <_scanf_float+0x28a>
 8004c8c:	2501      	movs	r5, #1
 8004c8e:	4628      	mov	r0, r5
 8004c90:	b007      	add	sp, #28
 8004c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004c9a:	2a0d      	cmp	r2, #13
 8004c9c:	d8e6      	bhi.n	8004c6c <_scanf_float+0x60>
 8004c9e:	a101      	add	r1, pc, #4	; (adr r1, 8004ca4 <_scanf_float+0x98>)
 8004ca0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ca4:	08004de3 	.word	0x08004de3
 8004ca8:	08004c6d 	.word	0x08004c6d
 8004cac:	08004c6d 	.word	0x08004c6d
 8004cb0:	08004c6d 	.word	0x08004c6d
 8004cb4:	08004e43 	.word	0x08004e43
 8004cb8:	08004e1b 	.word	0x08004e1b
 8004cbc:	08004c6d 	.word	0x08004c6d
 8004cc0:	08004c6d 	.word	0x08004c6d
 8004cc4:	08004df1 	.word	0x08004df1
 8004cc8:	08004c6d 	.word	0x08004c6d
 8004ccc:	08004c6d 	.word	0x08004c6d
 8004cd0:	08004c6d 	.word	0x08004c6d
 8004cd4:	08004c6d 	.word	0x08004c6d
 8004cd8:	08004da9 	.word	0x08004da9
 8004cdc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004ce0:	e7db      	b.n	8004c9a <_scanf_float+0x8e>
 8004ce2:	290e      	cmp	r1, #14
 8004ce4:	d8c2      	bhi.n	8004c6c <_scanf_float+0x60>
 8004ce6:	a001      	add	r0, pc, #4	; (adr r0, 8004cec <_scanf_float+0xe0>)
 8004ce8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004cec:	08004d9b 	.word	0x08004d9b
 8004cf0:	08004c6d 	.word	0x08004c6d
 8004cf4:	08004d9b 	.word	0x08004d9b
 8004cf8:	08004e2f 	.word	0x08004e2f
 8004cfc:	08004c6d 	.word	0x08004c6d
 8004d00:	08004d49 	.word	0x08004d49
 8004d04:	08004d85 	.word	0x08004d85
 8004d08:	08004d85 	.word	0x08004d85
 8004d0c:	08004d85 	.word	0x08004d85
 8004d10:	08004d85 	.word	0x08004d85
 8004d14:	08004d85 	.word	0x08004d85
 8004d18:	08004d85 	.word	0x08004d85
 8004d1c:	08004d85 	.word	0x08004d85
 8004d20:	08004d85 	.word	0x08004d85
 8004d24:	08004d85 	.word	0x08004d85
 8004d28:	2b6e      	cmp	r3, #110	; 0x6e
 8004d2a:	d809      	bhi.n	8004d40 <_scanf_float+0x134>
 8004d2c:	2b60      	cmp	r3, #96	; 0x60
 8004d2e:	d8b2      	bhi.n	8004c96 <_scanf_float+0x8a>
 8004d30:	2b54      	cmp	r3, #84	; 0x54
 8004d32:	d077      	beq.n	8004e24 <_scanf_float+0x218>
 8004d34:	2b59      	cmp	r3, #89	; 0x59
 8004d36:	d199      	bne.n	8004c6c <_scanf_float+0x60>
 8004d38:	2d07      	cmp	r5, #7
 8004d3a:	d197      	bne.n	8004c6c <_scanf_float+0x60>
 8004d3c:	2508      	movs	r5, #8
 8004d3e:	e029      	b.n	8004d94 <_scanf_float+0x188>
 8004d40:	2b74      	cmp	r3, #116	; 0x74
 8004d42:	d06f      	beq.n	8004e24 <_scanf_float+0x218>
 8004d44:	2b79      	cmp	r3, #121	; 0x79
 8004d46:	e7f6      	b.n	8004d36 <_scanf_float+0x12a>
 8004d48:	6821      	ldr	r1, [r4, #0]
 8004d4a:	05c8      	lsls	r0, r1, #23
 8004d4c:	d51a      	bpl.n	8004d84 <_scanf_float+0x178>
 8004d4e:	9b02      	ldr	r3, [sp, #8]
 8004d50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004d54:	6021      	str	r1, [r4, #0]
 8004d56:	f109 0901 	add.w	r9, r9, #1
 8004d5a:	b11b      	cbz	r3, 8004d64 <_scanf_float+0x158>
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	3201      	adds	r2, #1
 8004d60:	9302      	str	r3, [sp, #8]
 8004d62:	60a2      	str	r2, [r4, #8]
 8004d64:	68a3      	ldr	r3, [r4, #8]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60a3      	str	r3, [r4, #8]
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	6123      	str	r3, [r4, #16]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	f340 8084 	ble.w	8004e84 <_scanf_float+0x278>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	e766      	b.n	8004c52 <_scanf_float+0x46>
 8004d84:	eb1a 0f05 	cmn.w	sl, r5
 8004d88:	f47f af70 	bne.w	8004c6c <_scanf_float+0x60>
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004d92:	6022      	str	r2, [r4, #0]
 8004d94:	f806 3b01 	strb.w	r3, [r6], #1
 8004d98:	e7e4      	b.n	8004d64 <_scanf_float+0x158>
 8004d9a:	6822      	ldr	r2, [r4, #0]
 8004d9c:	0610      	lsls	r0, r2, #24
 8004d9e:	f57f af65 	bpl.w	8004c6c <_scanf_float+0x60>
 8004da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004da6:	e7f4      	b.n	8004d92 <_scanf_float+0x186>
 8004da8:	f1ba 0f00 	cmp.w	sl, #0
 8004dac:	d10e      	bne.n	8004dcc <_scanf_float+0x1c0>
 8004dae:	f1b9 0f00 	cmp.w	r9, #0
 8004db2:	d10e      	bne.n	8004dd2 <_scanf_float+0x1c6>
 8004db4:	6822      	ldr	r2, [r4, #0]
 8004db6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004dba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004dbe:	d108      	bne.n	8004dd2 <_scanf_float+0x1c6>
 8004dc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004dc4:	6022      	str	r2, [r4, #0]
 8004dc6:	f04f 0a01 	mov.w	sl, #1
 8004dca:	e7e3      	b.n	8004d94 <_scanf_float+0x188>
 8004dcc:	f1ba 0f02 	cmp.w	sl, #2
 8004dd0:	d055      	beq.n	8004e7e <_scanf_float+0x272>
 8004dd2:	2d01      	cmp	r5, #1
 8004dd4:	d002      	beq.n	8004ddc <_scanf_float+0x1d0>
 8004dd6:	2d04      	cmp	r5, #4
 8004dd8:	f47f af48 	bne.w	8004c6c <_scanf_float+0x60>
 8004ddc:	3501      	adds	r5, #1
 8004dde:	b2ed      	uxtb	r5, r5
 8004de0:	e7d8      	b.n	8004d94 <_scanf_float+0x188>
 8004de2:	f1ba 0f01 	cmp.w	sl, #1
 8004de6:	f47f af41 	bne.w	8004c6c <_scanf_float+0x60>
 8004dea:	f04f 0a02 	mov.w	sl, #2
 8004dee:	e7d1      	b.n	8004d94 <_scanf_float+0x188>
 8004df0:	b97d      	cbnz	r5, 8004e12 <_scanf_float+0x206>
 8004df2:	f1b9 0f00 	cmp.w	r9, #0
 8004df6:	f47f af3c 	bne.w	8004c72 <_scanf_float+0x66>
 8004dfa:	6822      	ldr	r2, [r4, #0]
 8004dfc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e04:	f47f af39 	bne.w	8004c7a <_scanf_float+0x6e>
 8004e08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e0c:	6022      	str	r2, [r4, #0]
 8004e0e:	2501      	movs	r5, #1
 8004e10:	e7c0      	b.n	8004d94 <_scanf_float+0x188>
 8004e12:	2d03      	cmp	r5, #3
 8004e14:	d0e2      	beq.n	8004ddc <_scanf_float+0x1d0>
 8004e16:	2d05      	cmp	r5, #5
 8004e18:	e7de      	b.n	8004dd8 <_scanf_float+0x1cc>
 8004e1a:	2d02      	cmp	r5, #2
 8004e1c:	f47f af26 	bne.w	8004c6c <_scanf_float+0x60>
 8004e20:	2503      	movs	r5, #3
 8004e22:	e7b7      	b.n	8004d94 <_scanf_float+0x188>
 8004e24:	2d06      	cmp	r5, #6
 8004e26:	f47f af21 	bne.w	8004c6c <_scanf_float+0x60>
 8004e2a:	2507      	movs	r5, #7
 8004e2c:	e7b2      	b.n	8004d94 <_scanf_float+0x188>
 8004e2e:	6822      	ldr	r2, [r4, #0]
 8004e30:	0591      	lsls	r1, r2, #22
 8004e32:	f57f af1b 	bpl.w	8004c6c <_scanf_float+0x60>
 8004e36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004e3a:	6022      	str	r2, [r4, #0]
 8004e3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e40:	e7a8      	b.n	8004d94 <_scanf_float+0x188>
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004e48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004e4c:	d006      	beq.n	8004e5c <_scanf_float+0x250>
 8004e4e:	0550      	lsls	r0, r2, #21
 8004e50:	f57f af0c 	bpl.w	8004c6c <_scanf_float+0x60>
 8004e54:	f1b9 0f00 	cmp.w	r9, #0
 8004e58:	f43f af0f 	beq.w	8004c7a <_scanf_float+0x6e>
 8004e5c:	0591      	lsls	r1, r2, #22
 8004e5e:	bf58      	it	pl
 8004e60:	9901      	ldrpl	r1, [sp, #4]
 8004e62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e66:	bf58      	it	pl
 8004e68:	eba9 0101 	subpl.w	r1, r9, r1
 8004e6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004e70:	bf58      	it	pl
 8004e72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e76:	6022      	str	r2, [r4, #0]
 8004e78:	f04f 0900 	mov.w	r9, #0
 8004e7c:	e78a      	b.n	8004d94 <_scanf_float+0x188>
 8004e7e:	f04f 0a03 	mov.w	sl, #3
 8004e82:	e787      	b.n	8004d94 <_scanf_float+0x188>
 8004e84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e88:	4639      	mov	r1, r7
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4798      	blx	r3
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	f43f aedf 	beq.w	8004c52 <_scanf_float+0x46>
 8004e94:	e6ea      	b.n	8004c6c <_scanf_float+0x60>
 8004e96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e9e:	463a      	mov	r2, r7
 8004ea0:	4640      	mov	r0, r8
 8004ea2:	4798      	blx	r3
 8004ea4:	6923      	ldr	r3, [r4, #16]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	6123      	str	r3, [r4, #16]
 8004eaa:	e6ec      	b.n	8004c86 <_scanf_float+0x7a>
 8004eac:	1e6b      	subs	r3, r5, #1
 8004eae:	2b06      	cmp	r3, #6
 8004eb0:	d825      	bhi.n	8004efe <_scanf_float+0x2f2>
 8004eb2:	2d02      	cmp	r5, #2
 8004eb4:	d836      	bhi.n	8004f24 <_scanf_float+0x318>
 8004eb6:	455e      	cmp	r6, fp
 8004eb8:	f67f aee8 	bls.w	8004c8c <_scanf_float+0x80>
 8004ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ec0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ec4:	463a      	mov	r2, r7
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	4798      	blx	r3
 8004eca:	6923      	ldr	r3, [r4, #16]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	6123      	str	r3, [r4, #16]
 8004ed0:	e7f1      	b.n	8004eb6 <_scanf_float+0x2aa>
 8004ed2:	9802      	ldr	r0, [sp, #8]
 8004ed4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ed8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004edc:	9002      	str	r0, [sp, #8]
 8004ede:	463a      	mov	r2, r7
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	4798      	blx	r3
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004eee:	fa5f fa8a 	uxtb.w	sl, sl
 8004ef2:	f1ba 0f02 	cmp.w	sl, #2
 8004ef6:	d1ec      	bne.n	8004ed2 <_scanf_float+0x2c6>
 8004ef8:	3d03      	subs	r5, #3
 8004efa:	b2ed      	uxtb	r5, r5
 8004efc:	1b76      	subs	r6, r6, r5
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	05da      	lsls	r2, r3, #23
 8004f02:	d52f      	bpl.n	8004f64 <_scanf_float+0x358>
 8004f04:	055b      	lsls	r3, r3, #21
 8004f06:	d510      	bpl.n	8004f2a <_scanf_float+0x31e>
 8004f08:	455e      	cmp	r6, fp
 8004f0a:	f67f aebf 	bls.w	8004c8c <_scanf_float+0x80>
 8004f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f16:	463a      	mov	r2, r7
 8004f18:	4640      	mov	r0, r8
 8004f1a:	4798      	blx	r3
 8004f1c:	6923      	ldr	r3, [r4, #16]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	e7f1      	b.n	8004f08 <_scanf_float+0x2fc>
 8004f24:	46aa      	mov	sl, r5
 8004f26:	9602      	str	r6, [sp, #8]
 8004f28:	e7df      	b.n	8004eea <_scanf_float+0x2de>
 8004f2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004f2e:	6923      	ldr	r3, [r4, #16]
 8004f30:	2965      	cmp	r1, #101	; 0x65
 8004f32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004f36:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004f3a:	6123      	str	r3, [r4, #16]
 8004f3c:	d00c      	beq.n	8004f58 <_scanf_float+0x34c>
 8004f3e:	2945      	cmp	r1, #69	; 0x45
 8004f40:	d00a      	beq.n	8004f58 <_scanf_float+0x34c>
 8004f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f46:	463a      	mov	r2, r7
 8004f48:	4640      	mov	r0, r8
 8004f4a:	4798      	blx	r3
 8004f4c:	6923      	ldr	r3, [r4, #16]
 8004f4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	1eb5      	subs	r5, r6, #2
 8004f56:	6123      	str	r3, [r4, #16]
 8004f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f5c:	463a      	mov	r2, r7
 8004f5e:	4640      	mov	r0, r8
 8004f60:	4798      	blx	r3
 8004f62:	462e      	mov	r6, r5
 8004f64:	6825      	ldr	r5, [r4, #0]
 8004f66:	f015 0510 	ands.w	r5, r5, #16
 8004f6a:	d14e      	bne.n	800500a <_scanf_float+0x3fe>
 8004f6c:	7035      	strb	r5, [r6, #0]
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d119      	bne.n	8004fae <_scanf_float+0x3a2>
 8004f7a:	9b01      	ldr	r3, [sp, #4]
 8004f7c:	454b      	cmp	r3, r9
 8004f7e:	eba3 0209 	sub.w	r2, r3, r9
 8004f82:	d121      	bne.n	8004fc8 <_scanf_float+0x3bc>
 8004f84:	2200      	movs	r2, #0
 8004f86:	4659      	mov	r1, fp
 8004f88:	4640      	mov	r0, r8
 8004f8a:	f000 fe6f 	bl	8005c6c <_strtod_r>
 8004f8e:	6822      	ldr	r2, [r4, #0]
 8004f90:	9b03      	ldr	r3, [sp, #12]
 8004f92:	f012 0f02 	tst.w	r2, #2
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	d021      	beq.n	8004fde <_scanf_float+0x3d2>
 8004f9a:	9903      	ldr	r1, [sp, #12]
 8004f9c:	1d1a      	adds	r2, r3, #4
 8004f9e:	600a      	str	r2, [r1, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	ed83 0b00 	vstr	d0, [r3]
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60e3      	str	r3, [r4, #12]
 8004fac:	e66f      	b.n	8004c8e <_scanf_float+0x82>
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0e7      	beq.n	8004f84 <_scanf_float+0x378>
 8004fb4:	9905      	ldr	r1, [sp, #20]
 8004fb6:	230a      	movs	r3, #10
 8004fb8:	462a      	mov	r2, r5
 8004fba:	3101      	adds	r1, #1
 8004fbc:	4640      	mov	r0, r8
 8004fbe:	f000 fedd 	bl	8005d7c <_strtol_r>
 8004fc2:	9b04      	ldr	r3, [sp, #16]
 8004fc4:	9e05      	ldr	r6, [sp, #20]
 8004fc6:	1ac2      	subs	r2, r0, r3
 8004fc8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004fcc:	429e      	cmp	r6, r3
 8004fce:	bf28      	it	cs
 8004fd0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004fd4:	490e      	ldr	r1, [pc, #56]	; (8005010 <_scanf_float+0x404>)
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	f000 f858 	bl	800508c <siprintf>
 8004fdc:	e7d2      	b.n	8004f84 <_scanf_float+0x378>
 8004fde:	9903      	ldr	r1, [sp, #12]
 8004fe0:	f012 0f04 	tst.w	r2, #4
 8004fe4:	f103 0204 	add.w	r2, r3, #4
 8004fe8:	600a      	str	r2, [r1, #0]
 8004fea:	d1d9      	bne.n	8004fa0 <_scanf_float+0x394>
 8004fec:	eeb4 0b40 	vcmp.f64	d0, d0
 8004ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff4:	681e      	ldr	r6, [r3, #0]
 8004ff6:	d705      	bvc.n	8005004 <_scanf_float+0x3f8>
 8004ff8:	4806      	ldr	r0, [pc, #24]	; (8005014 <_scanf_float+0x408>)
 8004ffa:	f000 f80d 	bl	8005018 <nanf>
 8004ffe:	ed86 0a00 	vstr	s0, [r6]
 8005002:	e7d0      	b.n	8004fa6 <_scanf_float+0x39a>
 8005004:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005008:	e7f9      	b.n	8004ffe <_scanf_float+0x3f2>
 800500a:	2500      	movs	r5, #0
 800500c:	e63f      	b.n	8004c8e <_scanf_float+0x82>
 800500e:	bf00      	nop
 8005010:	08008929 	.word	0x08008929
 8005014:	080088dd 	.word	0x080088dd

08005018 <nanf>:
 8005018:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005020 <nanf+0x8>
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	7fc00000 	.word	0x7fc00000

08005024 <sniprintf>:
 8005024:	b40c      	push	{r2, r3}
 8005026:	b530      	push	{r4, r5, lr}
 8005028:	4b17      	ldr	r3, [pc, #92]	; (8005088 <sniprintf+0x64>)
 800502a:	1e0c      	subs	r4, r1, #0
 800502c:	681d      	ldr	r5, [r3, #0]
 800502e:	b09d      	sub	sp, #116	; 0x74
 8005030:	da08      	bge.n	8005044 <sniprintf+0x20>
 8005032:	238b      	movs	r3, #139	; 0x8b
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800503a:	b01d      	add	sp, #116	; 0x74
 800503c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005040:	b002      	add	sp, #8
 8005042:	4770      	bx	lr
 8005044:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005048:	f8ad 3014 	strh.w	r3, [sp, #20]
 800504c:	bf14      	ite	ne
 800504e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005052:	4623      	moveq	r3, r4
 8005054:	9304      	str	r3, [sp, #16]
 8005056:	9307      	str	r3, [sp, #28]
 8005058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800505c:	9002      	str	r0, [sp, #8]
 800505e:	9006      	str	r0, [sp, #24]
 8005060:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005064:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005066:	ab21      	add	r3, sp, #132	; 0x84
 8005068:	a902      	add	r1, sp, #8
 800506a:	4628      	mov	r0, r5
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	f003 f95b 	bl	8008328 <_svfiprintf_r>
 8005072:	1c43      	adds	r3, r0, #1
 8005074:	bfbc      	itt	lt
 8005076:	238b      	movlt	r3, #139	; 0x8b
 8005078:	602b      	strlt	r3, [r5, #0]
 800507a:	2c00      	cmp	r4, #0
 800507c:	d0dd      	beq.n	800503a <sniprintf+0x16>
 800507e:	9b02      	ldr	r3, [sp, #8]
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	e7d9      	b.n	800503a <sniprintf+0x16>
 8005086:	bf00      	nop
 8005088:	20000018 	.word	0x20000018

0800508c <siprintf>:
 800508c:	b40e      	push	{r1, r2, r3}
 800508e:	b500      	push	{lr}
 8005090:	b09c      	sub	sp, #112	; 0x70
 8005092:	ab1d      	add	r3, sp, #116	; 0x74
 8005094:	9002      	str	r0, [sp, #8]
 8005096:	9006      	str	r0, [sp, #24]
 8005098:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800509c:	4809      	ldr	r0, [pc, #36]	; (80050c4 <siprintf+0x38>)
 800509e:	9107      	str	r1, [sp, #28]
 80050a0:	9104      	str	r1, [sp, #16]
 80050a2:	4909      	ldr	r1, [pc, #36]	; (80050c8 <siprintf+0x3c>)
 80050a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80050a8:	9105      	str	r1, [sp, #20]
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	a902      	add	r1, sp, #8
 80050b0:	f003 f93a 	bl	8008328 <_svfiprintf_r>
 80050b4:	9b02      	ldr	r3, [sp, #8]
 80050b6:	2200      	movs	r2, #0
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	b01c      	add	sp, #112	; 0x70
 80050bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80050c0:	b003      	add	sp, #12
 80050c2:	4770      	bx	lr
 80050c4:	20000018 	.word	0x20000018
 80050c8:	ffff0208 	.word	0xffff0208

080050cc <sulp>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	4604      	mov	r4, r0
 80050d0:	460d      	mov	r5, r1
 80050d2:	4616      	mov	r6, r2
 80050d4:	ec45 4b10 	vmov	d0, r4, r5
 80050d8:	f002 fe5a 	bl	8007d90 <__ulp>
 80050dc:	b17e      	cbz	r6, 80050fe <sulp+0x32>
 80050de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80050e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	dd09      	ble.n	80050fe <sulp+0x32>
 80050ea:	051b      	lsls	r3, r3, #20
 80050ec:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80050f0:	2000      	movs	r0, #0
 80050f2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80050f6:	ec41 0b17 	vmov	d7, r0, r1
 80050fa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80050fe:	bd70      	pop	{r4, r5, r6, pc}

08005100 <_strtod_l>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	ed2d 8b0e 	vpush	{d8-d14}
 8005108:	b097      	sub	sp, #92	; 0x5c
 800510a:	461f      	mov	r7, r3
 800510c:	2300      	movs	r3, #0
 800510e:	9312      	str	r3, [sp, #72]	; 0x48
 8005110:	4ba1      	ldr	r3, [pc, #644]	; (8005398 <_strtod_l+0x298>)
 8005112:	920d      	str	r2, [sp, #52]	; 0x34
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	9307      	str	r3, [sp, #28]
 8005118:	4604      	mov	r4, r0
 800511a:	4618      	mov	r0, r3
 800511c:	468b      	mov	fp, r1
 800511e:	f7fb f88f 	bl	8000240 <strlen>
 8005122:	f04f 0800 	mov.w	r8, #0
 8005126:	4605      	mov	r5, r0
 8005128:	f04f 0900 	mov.w	r9, #0
 800512c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8005130:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005132:	7813      	ldrb	r3, [r2, #0]
 8005134:	2b2b      	cmp	r3, #43	; 0x2b
 8005136:	d04d      	beq.n	80051d4 <_strtod_l+0xd4>
 8005138:	d83a      	bhi.n	80051b0 <_strtod_l+0xb0>
 800513a:	2b0d      	cmp	r3, #13
 800513c:	d833      	bhi.n	80051a6 <_strtod_l+0xa6>
 800513e:	2b08      	cmp	r3, #8
 8005140:	d833      	bhi.n	80051aa <_strtod_l+0xaa>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d03d      	beq.n	80051c2 <_strtod_l+0xc2>
 8005146:	2300      	movs	r3, #0
 8005148:	9308      	str	r3, [sp, #32]
 800514a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800514c:	7833      	ldrb	r3, [r6, #0]
 800514e:	2b30      	cmp	r3, #48	; 0x30
 8005150:	f040 80b0 	bne.w	80052b4 <_strtod_l+0x1b4>
 8005154:	7873      	ldrb	r3, [r6, #1]
 8005156:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800515a:	2b58      	cmp	r3, #88	; 0x58
 800515c:	d167      	bne.n	800522e <_strtod_l+0x12e>
 800515e:	9b08      	ldr	r3, [sp, #32]
 8005160:	9301      	str	r3, [sp, #4]
 8005162:	ab12      	add	r3, sp, #72	; 0x48
 8005164:	9702      	str	r7, [sp, #8]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	4a8c      	ldr	r2, [pc, #560]	; (800539c <_strtod_l+0x29c>)
 800516a:	ab13      	add	r3, sp, #76	; 0x4c
 800516c:	a911      	add	r1, sp, #68	; 0x44
 800516e:	4620      	mov	r0, r4
 8005170:	f001 fee6 	bl	8006f40 <__gethex>
 8005174:	f010 0507 	ands.w	r5, r0, #7
 8005178:	4607      	mov	r7, r0
 800517a:	d005      	beq.n	8005188 <_strtod_l+0x88>
 800517c:	2d06      	cmp	r5, #6
 800517e:	d12b      	bne.n	80051d8 <_strtod_l+0xd8>
 8005180:	3601      	adds	r6, #1
 8005182:	2300      	movs	r3, #0
 8005184:	9611      	str	r6, [sp, #68]	; 0x44
 8005186:	9308      	str	r3, [sp, #32]
 8005188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800518a:	2b00      	cmp	r3, #0
 800518c:	f040 854e 	bne.w	8005c2c <_strtod_l+0xb2c>
 8005190:	9b08      	ldr	r3, [sp, #32]
 8005192:	b1e3      	cbz	r3, 80051ce <_strtod_l+0xce>
 8005194:	ec49 8b17 	vmov	d7, r8, r9
 8005198:	eeb1 0b47 	vneg.f64	d0, d7
 800519c:	b017      	add	sp, #92	; 0x5c
 800519e:	ecbd 8b0e 	vpop	{d8-d14}
 80051a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d1cd      	bne.n	8005146 <_strtod_l+0x46>
 80051aa:	3201      	adds	r2, #1
 80051ac:	9211      	str	r2, [sp, #68]	; 0x44
 80051ae:	e7bf      	b.n	8005130 <_strtod_l+0x30>
 80051b0:	2b2d      	cmp	r3, #45	; 0x2d
 80051b2:	d1c8      	bne.n	8005146 <_strtod_l+0x46>
 80051b4:	2301      	movs	r3, #1
 80051b6:	9308      	str	r3, [sp, #32]
 80051b8:	1c53      	adds	r3, r2, #1
 80051ba:	9311      	str	r3, [sp, #68]	; 0x44
 80051bc:	7853      	ldrb	r3, [r2, #1]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1c3      	bne.n	800514a <_strtod_l+0x4a>
 80051c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051c4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 852d 	bne.w	8005c28 <_strtod_l+0xb28>
 80051ce:	ec49 8b10 	vmov	d0, r8, r9
 80051d2:	e7e3      	b.n	800519c <_strtod_l+0x9c>
 80051d4:	2300      	movs	r3, #0
 80051d6:	e7ee      	b.n	80051b6 <_strtod_l+0xb6>
 80051d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051da:	b13a      	cbz	r2, 80051ec <_strtod_l+0xec>
 80051dc:	2135      	movs	r1, #53	; 0x35
 80051de:	a814      	add	r0, sp, #80	; 0x50
 80051e0:	f002 fede 	bl	8007fa0 <__copybits>
 80051e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80051e6:	4620      	mov	r0, r4
 80051e8:	f002 faa0 	bl	800772c <_Bfree>
 80051ec:	3d01      	subs	r5, #1
 80051ee:	2d04      	cmp	r5, #4
 80051f0:	d806      	bhi.n	8005200 <_strtod_l+0x100>
 80051f2:	e8df f005 	tbb	[pc, r5]
 80051f6:	030a      	.short	0x030a
 80051f8:	1714      	.short	0x1714
 80051fa:	0a          	.byte	0x0a
 80051fb:	00          	.byte	0x00
 80051fc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8005200:	073f      	lsls	r7, r7, #28
 8005202:	d5c1      	bpl.n	8005188 <_strtod_l+0x88>
 8005204:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005208:	e7be      	b.n	8005188 <_strtod_l+0x88>
 800520a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800520e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005210:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005214:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005218:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800521c:	e7f0      	b.n	8005200 <_strtod_l+0x100>
 800521e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80053a0 <_strtod_l+0x2a0>
 8005222:	e7ed      	b.n	8005200 <_strtod_l+0x100>
 8005224:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005228:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800522c:	e7e8      	b.n	8005200 <_strtod_l+0x100>
 800522e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	9211      	str	r2, [sp, #68]	; 0x44
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	2b30      	cmp	r3, #48	; 0x30
 8005238:	d0f9      	beq.n	800522e <_strtod_l+0x12e>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0a4      	beq.n	8005188 <_strtod_l+0x88>
 800523e:	2301      	movs	r3, #1
 8005240:	f04f 0a00 	mov.w	sl, #0
 8005244:	9304      	str	r3, [sp, #16]
 8005246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005248:	930a      	str	r3, [sp, #40]	; 0x28
 800524a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800524e:	f8cd a018 	str.w	sl, [sp, #24]
 8005252:	220a      	movs	r2, #10
 8005254:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005256:	7807      	ldrb	r7, [r0, #0]
 8005258:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800525c:	b2d9      	uxtb	r1, r3
 800525e:	2909      	cmp	r1, #9
 8005260:	d92a      	bls.n	80052b8 <_strtod_l+0x1b8>
 8005262:	9907      	ldr	r1, [sp, #28]
 8005264:	462a      	mov	r2, r5
 8005266:	f003 f9fe 	bl	8008666 <strncmp>
 800526a:	2800      	cmp	r0, #0
 800526c:	d033      	beq.n	80052d6 <_strtod_l+0x1d6>
 800526e:	2000      	movs	r0, #0
 8005270:	9b06      	ldr	r3, [sp, #24]
 8005272:	463a      	mov	r2, r7
 8005274:	4601      	mov	r1, r0
 8005276:	4607      	mov	r7, r0
 8005278:	2a65      	cmp	r2, #101	; 0x65
 800527a:	d001      	beq.n	8005280 <_strtod_l+0x180>
 800527c:	2a45      	cmp	r2, #69	; 0x45
 800527e:	d117      	bne.n	80052b0 <_strtod_l+0x1b0>
 8005280:	b91b      	cbnz	r3, 800528a <_strtod_l+0x18a>
 8005282:	9b04      	ldr	r3, [sp, #16]
 8005284:	4303      	orrs	r3, r0
 8005286:	d09c      	beq.n	80051c2 <_strtod_l+0xc2>
 8005288:	2300      	movs	r3, #0
 800528a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800528e:	f10b 0201 	add.w	r2, fp, #1
 8005292:	9211      	str	r2, [sp, #68]	; 0x44
 8005294:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8005298:	2a2b      	cmp	r2, #43	; 0x2b
 800529a:	d071      	beq.n	8005380 <_strtod_l+0x280>
 800529c:	2a2d      	cmp	r2, #45	; 0x2d
 800529e:	d077      	beq.n	8005390 <_strtod_l+0x290>
 80052a0:	f04f 0e00 	mov.w	lr, #0
 80052a4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80052a8:	2d09      	cmp	r5, #9
 80052aa:	d97f      	bls.n	80053ac <_strtod_l+0x2ac>
 80052ac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80052b0:	2500      	movs	r5, #0
 80052b2:	e09b      	b.n	80053ec <_strtod_l+0x2ec>
 80052b4:	2300      	movs	r3, #0
 80052b6:	e7c3      	b.n	8005240 <_strtod_l+0x140>
 80052b8:	9906      	ldr	r1, [sp, #24]
 80052ba:	2908      	cmp	r1, #8
 80052bc:	bfdd      	ittte	le
 80052be:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80052c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80052c4:	9309      	strle	r3, [sp, #36]	; 0x24
 80052c6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80052ca:	9b06      	ldr	r3, [sp, #24]
 80052cc:	3001      	adds	r0, #1
 80052ce:	3301      	adds	r3, #1
 80052d0:	9306      	str	r3, [sp, #24]
 80052d2:	9011      	str	r0, [sp, #68]	; 0x44
 80052d4:	e7be      	b.n	8005254 <_strtod_l+0x154>
 80052d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052d8:	195a      	adds	r2, r3, r5
 80052da:	9211      	str	r2, [sp, #68]	; 0x44
 80052dc:	5d5a      	ldrb	r2, [r3, r5]
 80052de:	9b06      	ldr	r3, [sp, #24]
 80052e0:	b3a3      	cbz	r3, 800534c <_strtod_l+0x24c>
 80052e2:	4607      	mov	r7, r0
 80052e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052e8:	2909      	cmp	r1, #9
 80052ea:	d912      	bls.n	8005312 <_strtod_l+0x212>
 80052ec:	2101      	movs	r1, #1
 80052ee:	e7c3      	b.n	8005278 <_strtod_l+0x178>
 80052f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	9211      	str	r2, [sp, #68]	; 0x44
 80052f6:	785a      	ldrb	r2, [r3, #1]
 80052f8:	3001      	adds	r0, #1
 80052fa:	2a30      	cmp	r2, #48	; 0x30
 80052fc:	d0f8      	beq.n	80052f0 <_strtod_l+0x1f0>
 80052fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005302:	2b08      	cmp	r3, #8
 8005304:	f200 8497 	bhi.w	8005c36 <_strtod_l+0xb36>
 8005308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800530a:	930a      	str	r3, [sp, #40]	; 0x28
 800530c:	4607      	mov	r7, r0
 800530e:	2000      	movs	r0, #0
 8005310:	4603      	mov	r3, r0
 8005312:	3a30      	subs	r2, #48	; 0x30
 8005314:	f100 0101 	add.w	r1, r0, #1
 8005318:	d012      	beq.n	8005340 <_strtod_l+0x240>
 800531a:	440f      	add	r7, r1
 800531c:	eb00 0c03 	add.w	ip, r0, r3
 8005320:	4619      	mov	r1, r3
 8005322:	250a      	movs	r5, #10
 8005324:	4561      	cmp	r1, ip
 8005326:	d113      	bne.n	8005350 <_strtod_l+0x250>
 8005328:	1819      	adds	r1, r3, r0
 800532a:	2908      	cmp	r1, #8
 800532c:	f103 0301 	add.w	r3, r3, #1
 8005330:	4403      	add	r3, r0
 8005332:	dc1c      	bgt.n	800536e <_strtod_l+0x26e>
 8005334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005336:	210a      	movs	r1, #10
 8005338:	fb01 2200 	mla	r2, r1, r0, r2
 800533c:	9209      	str	r2, [sp, #36]	; 0x24
 800533e:	2100      	movs	r1, #0
 8005340:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005342:	1c50      	adds	r0, r2, #1
 8005344:	9011      	str	r0, [sp, #68]	; 0x44
 8005346:	7852      	ldrb	r2, [r2, #1]
 8005348:	4608      	mov	r0, r1
 800534a:	e7cb      	b.n	80052e4 <_strtod_l+0x1e4>
 800534c:	9806      	ldr	r0, [sp, #24]
 800534e:	e7d4      	b.n	80052fa <_strtod_l+0x1fa>
 8005350:	2908      	cmp	r1, #8
 8005352:	dc04      	bgt.n	800535e <_strtod_l+0x25e>
 8005354:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005356:	436e      	muls	r6, r5
 8005358:	9609      	str	r6, [sp, #36]	; 0x24
 800535a:	3101      	adds	r1, #1
 800535c:	e7e2      	b.n	8005324 <_strtod_l+0x224>
 800535e:	f101 0e01 	add.w	lr, r1, #1
 8005362:	f1be 0f10 	cmp.w	lr, #16
 8005366:	bfd8      	it	le
 8005368:	fb05 fa0a 	mulle.w	sl, r5, sl
 800536c:	e7f5      	b.n	800535a <_strtod_l+0x25a>
 800536e:	2b10      	cmp	r3, #16
 8005370:	bfdc      	itt	le
 8005372:	210a      	movle	r1, #10
 8005374:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8005378:	e7e1      	b.n	800533e <_strtod_l+0x23e>
 800537a:	2700      	movs	r7, #0
 800537c:	2101      	movs	r1, #1
 800537e:	e780      	b.n	8005282 <_strtod_l+0x182>
 8005380:	f04f 0e00 	mov.w	lr, #0
 8005384:	f10b 0202 	add.w	r2, fp, #2
 8005388:	9211      	str	r2, [sp, #68]	; 0x44
 800538a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800538e:	e789      	b.n	80052a4 <_strtod_l+0x1a4>
 8005390:	f04f 0e01 	mov.w	lr, #1
 8005394:	e7f6      	b.n	8005384 <_strtod_l+0x284>
 8005396:	bf00      	nop
 8005398:	08008bdc 	.word	0x08008bdc
 800539c:	08008930 	.word	0x08008930
 80053a0:	7ff00000 	.word	0x7ff00000
 80053a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80053a6:	1c55      	adds	r5, r2, #1
 80053a8:	9511      	str	r5, [sp, #68]	; 0x44
 80053aa:	7852      	ldrb	r2, [r2, #1]
 80053ac:	2a30      	cmp	r2, #48	; 0x30
 80053ae:	d0f9      	beq.n	80053a4 <_strtod_l+0x2a4>
 80053b0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80053b4:	2d08      	cmp	r5, #8
 80053b6:	f63f af7b 	bhi.w	80052b0 <_strtod_l+0x1b0>
 80053ba:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80053be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80053c0:	9207      	str	r2, [sp, #28]
 80053c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80053c4:	1c55      	adds	r5, r2, #1
 80053c6:	9511      	str	r5, [sp, #68]	; 0x44
 80053c8:	7852      	ldrb	r2, [r2, #1]
 80053ca:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80053ce:	2e09      	cmp	r6, #9
 80053d0:	d937      	bls.n	8005442 <_strtod_l+0x342>
 80053d2:	9e07      	ldr	r6, [sp, #28]
 80053d4:	1bad      	subs	r5, r5, r6
 80053d6:	2d08      	cmp	r5, #8
 80053d8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80053dc:	dc02      	bgt.n	80053e4 <_strtod_l+0x2e4>
 80053de:	4565      	cmp	r5, ip
 80053e0:	bfa8      	it	ge
 80053e2:	4665      	movge	r5, ip
 80053e4:	f1be 0f00 	cmp.w	lr, #0
 80053e8:	d000      	beq.n	80053ec <_strtod_l+0x2ec>
 80053ea:	426d      	negs	r5, r5
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d14d      	bne.n	800548c <_strtod_l+0x38c>
 80053f0:	9b04      	ldr	r3, [sp, #16]
 80053f2:	4303      	orrs	r3, r0
 80053f4:	f47f aec8 	bne.w	8005188 <_strtod_l+0x88>
 80053f8:	2900      	cmp	r1, #0
 80053fa:	f47f aee2 	bne.w	80051c2 <_strtod_l+0xc2>
 80053fe:	2a69      	cmp	r2, #105	; 0x69
 8005400:	d027      	beq.n	8005452 <_strtod_l+0x352>
 8005402:	dc24      	bgt.n	800544e <_strtod_l+0x34e>
 8005404:	2a49      	cmp	r2, #73	; 0x49
 8005406:	d024      	beq.n	8005452 <_strtod_l+0x352>
 8005408:	2a4e      	cmp	r2, #78	; 0x4e
 800540a:	f47f aeda 	bne.w	80051c2 <_strtod_l+0xc2>
 800540e:	4996      	ldr	r1, [pc, #600]	; (8005668 <_strtod_l+0x568>)
 8005410:	a811      	add	r0, sp, #68	; 0x44
 8005412:	f001 ffed 	bl	80073f0 <__match>
 8005416:	2800      	cmp	r0, #0
 8005418:	f43f aed3 	beq.w	80051c2 <_strtod_l+0xc2>
 800541c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b28      	cmp	r3, #40	; 0x28
 8005422:	d12d      	bne.n	8005480 <_strtod_l+0x380>
 8005424:	4991      	ldr	r1, [pc, #580]	; (800566c <_strtod_l+0x56c>)
 8005426:	aa14      	add	r2, sp, #80	; 0x50
 8005428:	a811      	add	r0, sp, #68	; 0x44
 800542a:	f001 fff5 	bl	8007418 <__hexnan>
 800542e:	2805      	cmp	r0, #5
 8005430:	d126      	bne.n	8005480 <_strtod_l+0x380>
 8005432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005434:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005438:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800543c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005440:	e6a2      	b.n	8005188 <_strtod_l+0x88>
 8005442:	250a      	movs	r5, #10
 8005444:	fb05 250c 	mla	r5, r5, ip, r2
 8005448:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800544c:	e7b9      	b.n	80053c2 <_strtod_l+0x2c2>
 800544e:	2a6e      	cmp	r2, #110	; 0x6e
 8005450:	e7db      	b.n	800540a <_strtod_l+0x30a>
 8005452:	4987      	ldr	r1, [pc, #540]	; (8005670 <_strtod_l+0x570>)
 8005454:	a811      	add	r0, sp, #68	; 0x44
 8005456:	f001 ffcb 	bl	80073f0 <__match>
 800545a:	2800      	cmp	r0, #0
 800545c:	f43f aeb1 	beq.w	80051c2 <_strtod_l+0xc2>
 8005460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005462:	4984      	ldr	r1, [pc, #528]	; (8005674 <_strtod_l+0x574>)
 8005464:	3b01      	subs	r3, #1
 8005466:	a811      	add	r0, sp, #68	; 0x44
 8005468:	9311      	str	r3, [sp, #68]	; 0x44
 800546a:	f001 ffc1 	bl	80073f0 <__match>
 800546e:	b910      	cbnz	r0, 8005476 <_strtod_l+0x376>
 8005470:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005472:	3301      	adds	r3, #1
 8005474:	9311      	str	r3, [sp, #68]	; 0x44
 8005476:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8005688 <_strtod_l+0x588>
 800547a:	f04f 0800 	mov.w	r8, #0
 800547e:	e683      	b.n	8005188 <_strtod_l+0x88>
 8005480:	487d      	ldr	r0, [pc, #500]	; (8005678 <_strtod_l+0x578>)
 8005482:	f003 f851 	bl	8008528 <nan>
 8005486:	ec59 8b10 	vmov	r8, r9, d0
 800548a:	e67d      	b.n	8005188 <_strtod_l+0x88>
 800548c:	1bea      	subs	r2, r5, r7
 800548e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8005492:	9207      	str	r2, [sp, #28]
 8005494:	9a06      	ldr	r2, [sp, #24]
 8005496:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800549a:	2a00      	cmp	r2, #0
 800549c:	bf08      	it	eq
 800549e:	461a      	moveq	r2, r3
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	9206      	str	r2, [sp, #24]
 80054a4:	461a      	mov	r2, r3
 80054a6:	bfa8      	it	ge
 80054a8:	2210      	movge	r2, #16
 80054aa:	2b09      	cmp	r3, #9
 80054ac:	ec59 8b17 	vmov	r8, r9, d7
 80054b0:	dd0c      	ble.n	80054cc <_strtod_l+0x3cc>
 80054b2:	4972      	ldr	r1, [pc, #456]	; (800567c <_strtod_l+0x57c>)
 80054b4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80054b8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80054bc:	ee06 aa90 	vmov	s13, sl
 80054c0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80054c4:	eea7 6b05 	vfma.f64	d6, d7, d5
 80054c8:	ec59 8b16 	vmov	r8, r9, d6
 80054cc:	2b0f      	cmp	r3, #15
 80054ce:	dc36      	bgt.n	800553e <_strtod_l+0x43e>
 80054d0:	9907      	ldr	r1, [sp, #28]
 80054d2:	2900      	cmp	r1, #0
 80054d4:	f43f ae58 	beq.w	8005188 <_strtod_l+0x88>
 80054d8:	dd23      	ble.n	8005522 <_strtod_l+0x422>
 80054da:	2916      	cmp	r1, #22
 80054dc:	dc0b      	bgt.n	80054f6 <_strtod_l+0x3f6>
 80054de:	4b67      	ldr	r3, [pc, #412]	; (800567c <_strtod_l+0x57c>)
 80054e0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80054e4:	ed93 7b00 	vldr	d7, [r3]
 80054e8:	ec49 8b16 	vmov	d6, r8, r9
 80054ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80054f0:	ec59 8b17 	vmov	r8, r9, d7
 80054f4:	e648      	b.n	8005188 <_strtod_l+0x88>
 80054f6:	9807      	ldr	r0, [sp, #28]
 80054f8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80054fc:	4281      	cmp	r1, r0
 80054fe:	db1e      	blt.n	800553e <_strtod_l+0x43e>
 8005500:	4a5e      	ldr	r2, [pc, #376]	; (800567c <_strtod_l+0x57c>)
 8005502:	f1c3 030f 	rsb	r3, r3, #15
 8005506:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800550a:	ed91 7b00 	vldr	d7, [r1]
 800550e:	ec49 8b16 	vmov	d6, r8, r9
 8005512:	1ac3      	subs	r3, r0, r3
 8005514:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8005518:	ee27 7b06 	vmul.f64	d7, d7, d6
 800551c:	ed92 6b00 	vldr	d6, [r2]
 8005520:	e7e4      	b.n	80054ec <_strtod_l+0x3ec>
 8005522:	9907      	ldr	r1, [sp, #28]
 8005524:	3116      	adds	r1, #22
 8005526:	db0a      	blt.n	800553e <_strtod_l+0x43e>
 8005528:	4b54      	ldr	r3, [pc, #336]	; (800567c <_strtod_l+0x57c>)
 800552a:	1b7d      	subs	r5, r7, r5
 800552c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005530:	ed95 7b00 	vldr	d7, [r5]
 8005534:	ec49 8b16 	vmov	d6, r8, r9
 8005538:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800553c:	e7d8      	b.n	80054f0 <_strtod_l+0x3f0>
 800553e:	9907      	ldr	r1, [sp, #28]
 8005540:	1a9a      	subs	r2, r3, r2
 8005542:	440a      	add	r2, r1
 8005544:	2a00      	cmp	r2, #0
 8005546:	dd6f      	ble.n	8005628 <_strtod_l+0x528>
 8005548:	f012 000f 	ands.w	r0, r2, #15
 800554c:	d00a      	beq.n	8005564 <_strtod_l+0x464>
 800554e:	494b      	ldr	r1, [pc, #300]	; (800567c <_strtod_l+0x57c>)
 8005550:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005554:	ed91 7b00 	vldr	d7, [r1]
 8005558:	ec49 8b16 	vmov	d6, r8, r9
 800555c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005560:	ec59 8b17 	vmov	r8, r9, d7
 8005564:	f032 020f 	bics.w	r2, r2, #15
 8005568:	d04f      	beq.n	800560a <_strtod_l+0x50a>
 800556a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800556e:	dd22      	ble.n	80055b6 <_strtod_l+0x4b6>
 8005570:	2500      	movs	r5, #0
 8005572:	462e      	mov	r6, r5
 8005574:	9506      	str	r5, [sp, #24]
 8005576:	462f      	mov	r7, r5
 8005578:	2322      	movs	r3, #34	; 0x22
 800557a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8005688 <_strtod_l+0x588>
 800557e:	6023      	str	r3, [r4, #0]
 8005580:	f04f 0800 	mov.w	r8, #0
 8005584:	9b06      	ldr	r3, [sp, #24]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f43f adfe 	beq.w	8005188 <_strtod_l+0x88>
 800558c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800558e:	4620      	mov	r0, r4
 8005590:	f002 f8cc 	bl	800772c <_Bfree>
 8005594:	4639      	mov	r1, r7
 8005596:	4620      	mov	r0, r4
 8005598:	f002 f8c8 	bl	800772c <_Bfree>
 800559c:	4631      	mov	r1, r6
 800559e:	4620      	mov	r0, r4
 80055a0:	f002 f8c4 	bl	800772c <_Bfree>
 80055a4:	9906      	ldr	r1, [sp, #24]
 80055a6:	4620      	mov	r0, r4
 80055a8:	f002 f8c0 	bl	800772c <_Bfree>
 80055ac:	4629      	mov	r1, r5
 80055ae:	4620      	mov	r0, r4
 80055b0:	f002 f8bc 	bl	800772c <_Bfree>
 80055b4:	e5e8      	b.n	8005188 <_strtod_l+0x88>
 80055b6:	2000      	movs	r0, #0
 80055b8:	ec49 8b17 	vmov	d7, r8, r9
 80055bc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8005680 <_strtod_l+0x580>
 80055c0:	1112      	asrs	r2, r2, #4
 80055c2:	4601      	mov	r1, r0
 80055c4:	2a01      	cmp	r2, #1
 80055c6:	dc23      	bgt.n	8005610 <_strtod_l+0x510>
 80055c8:	b108      	cbz	r0, 80055ce <_strtod_l+0x4ce>
 80055ca:	ec59 8b17 	vmov	r8, r9, d7
 80055ce:	4a2c      	ldr	r2, [pc, #176]	; (8005680 <_strtod_l+0x580>)
 80055d0:	482c      	ldr	r0, [pc, #176]	; (8005684 <_strtod_l+0x584>)
 80055d2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80055d6:	ed92 7b00 	vldr	d7, [r2]
 80055da:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80055de:	ec49 8b16 	vmov	d6, r8, r9
 80055e2:	4a29      	ldr	r2, [pc, #164]	; (8005688 <_strtod_l+0x588>)
 80055e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80055e8:	ee17 1a90 	vmov	r1, s15
 80055ec:	400a      	ands	r2, r1
 80055ee:	4282      	cmp	r2, r0
 80055f0:	ec59 8b17 	vmov	r8, r9, d7
 80055f4:	d8bc      	bhi.n	8005570 <_strtod_l+0x470>
 80055f6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80055fa:	4282      	cmp	r2, r0
 80055fc:	bf86      	itte	hi
 80055fe:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800568c <_strtod_l+0x58c>
 8005602:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8005606:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800560a:	2200      	movs	r2, #0
 800560c:	9204      	str	r2, [sp, #16]
 800560e:	e078      	b.n	8005702 <_strtod_l+0x602>
 8005610:	07d6      	lsls	r6, r2, #31
 8005612:	d504      	bpl.n	800561e <_strtod_l+0x51e>
 8005614:	ed9c 6b00 	vldr	d6, [ip]
 8005618:	2001      	movs	r0, #1
 800561a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800561e:	3101      	adds	r1, #1
 8005620:	1052      	asrs	r2, r2, #1
 8005622:	f10c 0c08 	add.w	ip, ip, #8
 8005626:	e7cd      	b.n	80055c4 <_strtod_l+0x4c4>
 8005628:	d0ef      	beq.n	800560a <_strtod_l+0x50a>
 800562a:	4252      	negs	r2, r2
 800562c:	f012 000f 	ands.w	r0, r2, #15
 8005630:	d00a      	beq.n	8005648 <_strtod_l+0x548>
 8005632:	4912      	ldr	r1, [pc, #72]	; (800567c <_strtod_l+0x57c>)
 8005634:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005638:	ed91 7b00 	vldr	d7, [r1]
 800563c:	ec49 8b16 	vmov	d6, r8, r9
 8005640:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005644:	ec59 8b17 	vmov	r8, r9, d7
 8005648:	1112      	asrs	r2, r2, #4
 800564a:	d0de      	beq.n	800560a <_strtod_l+0x50a>
 800564c:	2a1f      	cmp	r2, #31
 800564e:	dd1f      	ble.n	8005690 <_strtod_l+0x590>
 8005650:	2500      	movs	r5, #0
 8005652:	462e      	mov	r6, r5
 8005654:	9506      	str	r5, [sp, #24]
 8005656:	462f      	mov	r7, r5
 8005658:	2322      	movs	r3, #34	; 0x22
 800565a:	f04f 0800 	mov.w	r8, #0
 800565e:	f04f 0900 	mov.w	r9, #0
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	e78e      	b.n	8005584 <_strtod_l+0x484>
 8005666:	bf00      	nop
 8005668:	08008902 	.word	0x08008902
 800566c:	08008944 	.word	0x08008944
 8005670:	080088fa 	.word	0x080088fa
 8005674:	08008a84 	.word	0x08008a84
 8005678:	080088dd 	.word	0x080088dd
 800567c:	08008c78 	.word	0x08008c78
 8005680:	08008c50 	.word	0x08008c50
 8005684:	7ca00000 	.word	0x7ca00000
 8005688:	7ff00000 	.word	0x7ff00000
 800568c:	7fefffff 	.word	0x7fefffff
 8005690:	f012 0110 	ands.w	r1, r2, #16
 8005694:	bf18      	it	ne
 8005696:	216a      	movne	r1, #106	; 0x6a
 8005698:	9104      	str	r1, [sp, #16]
 800569a:	ec49 8b17 	vmov	d7, r8, r9
 800569e:	49be      	ldr	r1, [pc, #760]	; (8005998 <_strtod_l+0x898>)
 80056a0:	2000      	movs	r0, #0
 80056a2:	07d6      	lsls	r6, r2, #31
 80056a4:	d504      	bpl.n	80056b0 <_strtod_l+0x5b0>
 80056a6:	ed91 6b00 	vldr	d6, [r1]
 80056aa:	2001      	movs	r0, #1
 80056ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80056b0:	1052      	asrs	r2, r2, #1
 80056b2:	f101 0108 	add.w	r1, r1, #8
 80056b6:	d1f4      	bne.n	80056a2 <_strtod_l+0x5a2>
 80056b8:	b108      	cbz	r0, 80056be <_strtod_l+0x5be>
 80056ba:	ec59 8b17 	vmov	r8, r9, d7
 80056be:	9a04      	ldr	r2, [sp, #16]
 80056c0:	b1c2      	cbz	r2, 80056f4 <_strtod_l+0x5f4>
 80056c2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80056c6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80056ca:	2a00      	cmp	r2, #0
 80056cc:	4648      	mov	r0, r9
 80056ce:	dd11      	ble.n	80056f4 <_strtod_l+0x5f4>
 80056d0:	2a1f      	cmp	r2, #31
 80056d2:	f340 812e 	ble.w	8005932 <_strtod_l+0x832>
 80056d6:	2a34      	cmp	r2, #52	; 0x34
 80056d8:	bfde      	ittt	le
 80056da:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80056de:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80056e2:	fa02 f101 	lslle.w	r1, r2, r1
 80056e6:	f04f 0800 	mov.w	r8, #0
 80056ea:	bfcc      	ite	gt
 80056ec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80056f0:	ea01 0900 	andle.w	r9, r1, r0
 80056f4:	ec49 8b17 	vmov	d7, r8, r9
 80056f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80056fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005700:	d0a6      	beq.n	8005650 <_strtod_l+0x550>
 8005702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005704:	9200      	str	r2, [sp, #0]
 8005706:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005708:	9a06      	ldr	r2, [sp, #24]
 800570a:	4620      	mov	r0, r4
 800570c:	f002 f876 	bl	80077fc <__s2b>
 8005710:	9006      	str	r0, [sp, #24]
 8005712:	2800      	cmp	r0, #0
 8005714:	f43f af2c 	beq.w	8005570 <_strtod_l+0x470>
 8005718:	9b07      	ldr	r3, [sp, #28]
 800571a:	1b7d      	subs	r5, r7, r5
 800571c:	2b00      	cmp	r3, #0
 800571e:	bfb4      	ite	lt
 8005720:	462b      	movlt	r3, r5
 8005722:	2300      	movge	r3, #0
 8005724:	9309      	str	r3, [sp, #36]	; 0x24
 8005726:	9b07      	ldr	r3, [sp, #28]
 8005728:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8005978 <_strtod_l+0x878>
 800572c:	ed9f ab94 	vldr	d10, [pc, #592]	; 8005980 <_strtod_l+0x880>
 8005730:	ed9f bb95 	vldr	d11, [pc, #596]	; 8005988 <_strtod_l+0x888>
 8005734:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005738:	2500      	movs	r5, #0
 800573a:	930c      	str	r3, [sp, #48]	; 0x30
 800573c:	462e      	mov	r6, r5
 800573e:	9b06      	ldr	r3, [sp, #24]
 8005740:	4620      	mov	r0, r4
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	f001 ffb2 	bl	80076ac <_Balloc>
 8005748:	4607      	mov	r7, r0
 800574a:	2800      	cmp	r0, #0
 800574c:	f43f af14 	beq.w	8005578 <_strtod_l+0x478>
 8005750:	9b06      	ldr	r3, [sp, #24]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	3202      	adds	r2, #2
 8005756:	f103 010c 	add.w	r1, r3, #12
 800575a:	0092      	lsls	r2, r2, #2
 800575c:	300c      	adds	r0, #12
 800575e:	f001 ff7d 	bl	800765c <memcpy>
 8005762:	ec49 8b10 	vmov	d0, r8, r9
 8005766:	aa14      	add	r2, sp, #80	; 0x50
 8005768:	a913      	add	r1, sp, #76	; 0x4c
 800576a:	4620      	mov	r0, r4
 800576c:	f002 fb8c 	bl	8007e88 <__d2b>
 8005770:	ec49 8b18 	vmov	d8, r8, r9
 8005774:	9012      	str	r0, [sp, #72]	; 0x48
 8005776:	2800      	cmp	r0, #0
 8005778:	f43f aefe 	beq.w	8005578 <_strtod_l+0x478>
 800577c:	2101      	movs	r1, #1
 800577e:	4620      	mov	r0, r4
 8005780:	f002 f8d6 	bl	8007930 <__i2b>
 8005784:	4606      	mov	r6, r0
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f aef6 	beq.w	8005578 <_strtod_l+0x478>
 800578c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800578e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005790:	2b00      	cmp	r3, #0
 8005792:	bfab      	itete	ge
 8005794:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8005796:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8005798:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800579c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80057a0:	bfac      	ite	ge
 80057a2:	eb03 0b02 	addge.w	fp, r3, r2
 80057a6:	eba2 0a03 	sublt.w	sl, r2, r3
 80057aa:	9a04      	ldr	r2, [sp, #16]
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	440b      	add	r3, r1
 80057b0:	4a7a      	ldr	r2, [pc, #488]	; (800599c <_strtod_l+0x89c>)
 80057b2:	3b01      	subs	r3, #1
 80057b4:	4293      	cmp	r3, r2
 80057b6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80057ba:	f280 80cd 	bge.w	8005958 <_strtod_l+0x858>
 80057be:	1ad2      	subs	r2, r2, r3
 80057c0:	2a1f      	cmp	r2, #31
 80057c2:	eba1 0102 	sub.w	r1, r1, r2
 80057c6:	f04f 0001 	mov.w	r0, #1
 80057ca:	f300 80b9 	bgt.w	8005940 <_strtod_l+0x840>
 80057ce:	fa00 f302 	lsl.w	r3, r0, r2
 80057d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80057d4:	2300      	movs	r3, #0
 80057d6:	930a      	str	r3, [sp, #40]	; 0x28
 80057d8:	eb0b 0301 	add.w	r3, fp, r1
 80057dc:	9a04      	ldr	r2, [sp, #16]
 80057de:	459b      	cmp	fp, r3
 80057e0:	448a      	add	sl, r1
 80057e2:	4492      	add	sl, r2
 80057e4:	465a      	mov	r2, fp
 80057e6:	bfa8      	it	ge
 80057e8:	461a      	movge	r2, r3
 80057ea:	4552      	cmp	r2, sl
 80057ec:	bfa8      	it	ge
 80057ee:	4652      	movge	r2, sl
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	bfc2      	ittt	gt
 80057f4:	1a9b      	subgt	r3, r3, r2
 80057f6:	ebaa 0a02 	subgt.w	sl, sl, r2
 80057fa:	ebab 0b02 	subgt.w	fp, fp, r2
 80057fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005800:	2a00      	cmp	r2, #0
 8005802:	dd18      	ble.n	8005836 <_strtod_l+0x736>
 8005804:	4631      	mov	r1, r6
 8005806:	4620      	mov	r0, r4
 8005808:	930f      	str	r3, [sp, #60]	; 0x3c
 800580a:	f002 f951 	bl	8007ab0 <__pow5mult>
 800580e:	4606      	mov	r6, r0
 8005810:	2800      	cmp	r0, #0
 8005812:	f43f aeb1 	beq.w	8005578 <_strtod_l+0x478>
 8005816:	4601      	mov	r1, r0
 8005818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800581a:	4620      	mov	r0, r4
 800581c:	f002 f89e 	bl	800795c <__multiply>
 8005820:	900e      	str	r0, [sp, #56]	; 0x38
 8005822:	2800      	cmp	r0, #0
 8005824:	f43f aea8 	beq.w	8005578 <_strtod_l+0x478>
 8005828:	9912      	ldr	r1, [sp, #72]	; 0x48
 800582a:	4620      	mov	r0, r4
 800582c:	f001 ff7e 	bl	800772c <_Bfree>
 8005830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005832:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005834:	9212      	str	r2, [sp, #72]	; 0x48
 8005836:	2b00      	cmp	r3, #0
 8005838:	f300 8093 	bgt.w	8005962 <_strtod_l+0x862>
 800583c:	9b07      	ldr	r3, [sp, #28]
 800583e:	2b00      	cmp	r3, #0
 8005840:	dd08      	ble.n	8005854 <_strtod_l+0x754>
 8005842:	4639      	mov	r1, r7
 8005844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005846:	4620      	mov	r0, r4
 8005848:	f002 f932 	bl	8007ab0 <__pow5mult>
 800584c:	4607      	mov	r7, r0
 800584e:	2800      	cmp	r0, #0
 8005850:	f43f ae92 	beq.w	8005578 <_strtod_l+0x478>
 8005854:	f1ba 0f00 	cmp.w	sl, #0
 8005858:	dd08      	ble.n	800586c <_strtod_l+0x76c>
 800585a:	4639      	mov	r1, r7
 800585c:	4652      	mov	r2, sl
 800585e:	4620      	mov	r0, r4
 8005860:	f002 f980 	bl	8007b64 <__lshift>
 8005864:	4607      	mov	r7, r0
 8005866:	2800      	cmp	r0, #0
 8005868:	f43f ae86 	beq.w	8005578 <_strtod_l+0x478>
 800586c:	f1bb 0f00 	cmp.w	fp, #0
 8005870:	dd08      	ble.n	8005884 <_strtod_l+0x784>
 8005872:	4631      	mov	r1, r6
 8005874:	465a      	mov	r2, fp
 8005876:	4620      	mov	r0, r4
 8005878:	f002 f974 	bl	8007b64 <__lshift>
 800587c:	4606      	mov	r6, r0
 800587e:	2800      	cmp	r0, #0
 8005880:	f43f ae7a 	beq.w	8005578 <_strtod_l+0x478>
 8005884:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005886:	463a      	mov	r2, r7
 8005888:	4620      	mov	r0, r4
 800588a:	f002 f9f7 	bl	8007c7c <__mdiff>
 800588e:	4605      	mov	r5, r0
 8005890:	2800      	cmp	r0, #0
 8005892:	f43f ae71 	beq.w	8005578 <_strtod_l+0x478>
 8005896:	2300      	movs	r3, #0
 8005898:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800589c:	60c3      	str	r3, [r0, #12]
 800589e:	4631      	mov	r1, r6
 80058a0:	f002 f9d0 	bl	8007c44 <__mcmp>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	da7d      	bge.n	80059a4 <_strtod_l+0x8a4>
 80058a8:	ea5a 0308 	orrs.w	r3, sl, r8
 80058ac:	f040 80a3 	bne.w	80059f6 <_strtod_l+0x8f6>
 80058b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f040 809e 	bne.w	80059f6 <_strtod_l+0x8f6>
 80058ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058be:	0d1b      	lsrs	r3, r3, #20
 80058c0:	051b      	lsls	r3, r3, #20
 80058c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058c6:	f240 8096 	bls.w	80059f6 <_strtod_l+0x8f6>
 80058ca:	696b      	ldr	r3, [r5, #20]
 80058cc:	b91b      	cbnz	r3, 80058d6 <_strtod_l+0x7d6>
 80058ce:	692b      	ldr	r3, [r5, #16]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	f340 8090 	ble.w	80059f6 <_strtod_l+0x8f6>
 80058d6:	4629      	mov	r1, r5
 80058d8:	2201      	movs	r2, #1
 80058da:	4620      	mov	r0, r4
 80058dc:	f002 f942 	bl	8007b64 <__lshift>
 80058e0:	4631      	mov	r1, r6
 80058e2:	4605      	mov	r5, r0
 80058e4:	f002 f9ae 	bl	8007c44 <__mcmp>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	f340 8084 	ble.w	80059f6 <_strtod_l+0x8f6>
 80058ee:	9904      	ldr	r1, [sp, #16]
 80058f0:	4a2b      	ldr	r2, [pc, #172]	; (80059a0 <_strtod_l+0x8a0>)
 80058f2:	464b      	mov	r3, r9
 80058f4:	2900      	cmp	r1, #0
 80058f6:	f000 809d 	beq.w	8005a34 <_strtod_l+0x934>
 80058fa:	ea02 0109 	and.w	r1, r2, r9
 80058fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005902:	f300 8097 	bgt.w	8005a34 <_strtod_l+0x934>
 8005906:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800590a:	f77f aea5 	ble.w	8005658 <_strtod_l+0x558>
 800590e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8005990 <_strtod_l+0x890>
 8005912:	ec49 8b16 	vmov	d6, r8, r9
 8005916:	ee26 7b07 	vmul.f64	d7, d6, d7
 800591a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800591e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	bf08      	it	eq
 8005926:	2322      	moveq	r3, #34	; 0x22
 8005928:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800592c:	bf08      	it	eq
 800592e:	6023      	streq	r3, [r4, #0]
 8005930:	e62c      	b.n	800558c <_strtod_l+0x48c>
 8005932:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005936:	fa01 f202 	lsl.w	r2, r1, r2
 800593a:	ea02 0808 	and.w	r8, r2, r8
 800593e:	e6d9      	b.n	80056f4 <_strtod_l+0x5f4>
 8005940:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8005944:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005948:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800594c:	33e2      	adds	r3, #226	; 0xe2
 800594e:	fa00 f303 	lsl.w	r3, r0, r3
 8005952:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8005956:	e73f      	b.n	80057d8 <_strtod_l+0x6d8>
 8005958:	2200      	movs	r2, #0
 800595a:	2301      	movs	r3, #1
 800595c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005960:	e73a      	b.n	80057d8 <_strtod_l+0x6d8>
 8005962:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005964:	461a      	mov	r2, r3
 8005966:	4620      	mov	r0, r4
 8005968:	f002 f8fc 	bl	8007b64 <__lshift>
 800596c:	9012      	str	r0, [sp, #72]	; 0x48
 800596e:	2800      	cmp	r0, #0
 8005970:	f47f af64 	bne.w	800583c <_strtod_l+0x73c>
 8005974:	e600      	b.n	8005578 <_strtod_l+0x478>
 8005976:	bf00      	nop
 8005978:	94a03595 	.word	0x94a03595
 800597c:	3fcfffff 	.word	0x3fcfffff
 8005980:	94a03595 	.word	0x94a03595
 8005984:	3fdfffff 	.word	0x3fdfffff
 8005988:	35afe535 	.word	0x35afe535
 800598c:	3fe00000 	.word	0x3fe00000
 8005990:	00000000 	.word	0x00000000
 8005994:	39500000 	.word	0x39500000
 8005998:	08008958 	.word	0x08008958
 800599c:	fffffc02 	.word	0xfffffc02
 80059a0:	7ff00000 	.word	0x7ff00000
 80059a4:	46cb      	mov	fp, r9
 80059a6:	d15f      	bne.n	8005a68 <_strtod_l+0x968>
 80059a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059ac:	f1ba 0f00 	cmp.w	sl, #0
 80059b0:	d02a      	beq.n	8005a08 <_strtod_l+0x908>
 80059b2:	4aa7      	ldr	r2, [pc, #668]	; (8005c50 <_strtod_l+0xb50>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d12b      	bne.n	8005a10 <_strtod_l+0x910>
 80059b8:	9b04      	ldr	r3, [sp, #16]
 80059ba:	4642      	mov	r2, r8
 80059bc:	b1fb      	cbz	r3, 80059fe <_strtod_l+0x8fe>
 80059be:	4ba5      	ldr	r3, [pc, #660]	; (8005c54 <_strtod_l+0xb54>)
 80059c0:	ea09 0303 	and.w	r3, r9, r3
 80059c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80059c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059cc:	d81a      	bhi.n	8005a04 <_strtod_l+0x904>
 80059ce:	0d1b      	lsrs	r3, r3, #20
 80059d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059d4:	fa01 f303 	lsl.w	r3, r1, r3
 80059d8:	429a      	cmp	r2, r3
 80059da:	d119      	bne.n	8005a10 <_strtod_l+0x910>
 80059dc:	4b9e      	ldr	r3, [pc, #632]	; (8005c58 <_strtod_l+0xb58>)
 80059de:	459b      	cmp	fp, r3
 80059e0:	d102      	bne.n	80059e8 <_strtod_l+0x8e8>
 80059e2:	3201      	adds	r2, #1
 80059e4:	f43f adc8 	beq.w	8005578 <_strtod_l+0x478>
 80059e8:	4b9a      	ldr	r3, [pc, #616]	; (8005c54 <_strtod_l+0xb54>)
 80059ea:	ea0b 0303 	and.w	r3, fp, r3
 80059ee:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80059f2:	f04f 0800 	mov.w	r8, #0
 80059f6:	9b04      	ldr	r3, [sp, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d188      	bne.n	800590e <_strtod_l+0x80e>
 80059fc:	e5c6      	b.n	800558c <_strtod_l+0x48c>
 80059fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a02:	e7e9      	b.n	80059d8 <_strtod_l+0x8d8>
 8005a04:	460b      	mov	r3, r1
 8005a06:	e7e7      	b.n	80059d8 <_strtod_l+0x8d8>
 8005a08:	ea53 0308 	orrs.w	r3, r3, r8
 8005a0c:	f43f af6f 	beq.w	80058ee <_strtod_l+0x7ee>
 8005a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a12:	b1cb      	cbz	r3, 8005a48 <_strtod_l+0x948>
 8005a14:	ea13 0f0b 	tst.w	r3, fp
 8005a18:	d0ed      	beq.n	80059f6 <_strtod_l+0x8f6>
 8005a1a:	9a04      	ldr	r2, [sp, #16]
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	4649      	mov	r1, r9
 8005a20:	f1ba 0f00 	cmp.w	sl, #0
 8005a24:	d014      	beq.n	8005a50 <_strtod_l+0x950>
 8005a26:	f7ff fb51 	bl	80050cc <sulp>
 8005a2a:	ee38 7b00 	vadd.f64	d7, d8, d0
 8005a2e:	ec59 8b17 	vmov	r8, r9, d7
 8005a32:	e7e0      	b.n	80059f6 <_strtod_l+0x8f6>
 8005a34:	4013      	ands	r3, r2
 8005a36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a3a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005a3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005a42:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005a46:	e7d6      	b.n	80059f6 <_strtod_l+0x8f6>
 8005a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a4a:	ea13 0f08 	tst.w	r3, r8
 8005a4e:	e7e3      	b.n	8005a18 <_strtod_l+0x918>
 8005a50:	f7ff fb3c 	bl	80050cc <sulp>
 8005a54:	ee38 0b40 	vsub.f64	d0, d8, d0
 8005a58:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8005a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a60:	ec59 8b10 	vmov	r8, r9, d0
 8005a64:	d1c7      	bne.n	80059f6 <_strtod_l+0x8f6>
 8005a66:	e5f7      	b.n	8005658 <_strtod_l+0x558>
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f002 fa68 	bl	8007f40 <__ratio>
 8005a70:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8005a74:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7c:	d865      	bhi.n	8005b4a <_strtod_l+0xa4a>
 8005a7e:	f1ba 0f00 	cmp.w	sl, #0
 8005a82:	d042      	beq.n	8005b0a <_strtod_l+0xa0a>
 8005a84:	4b75      	ldr	r3, [pc, #468]	; (8005c5c <_strtod_l+0xb5c>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8005a8c:	4871      	ldr	r0, [pc, #452]	; (8005c54 <_strtod_l+0xb54>)
 8005a8e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8005c68 <_strtod_l+0xb68>
 8005a92:	ea0b 0100 	and.w	r1, fp, r0
 8005a96:	4561      	cmp	r1, ip
 8005a98:	f040 808e 	bne.w	8005bb8 <_strtod_l+0xab8>
 8005a9c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8005aa0:	ec49 8b10 	vmov	d0, r8, r9
 8005aa4:	ec43 2b1c 	vmov	d12, r2, r3
 8005aa8:	910a      	str	r1, [sp, #40]	; 0x28
 8005aaa:	f002 f971 	bl	8007d90 <__ulp>
 8005aae:	ec49 8b1e 	vmov	d14, r8, r9
 8005ab2:	4868      	ldr	r0, [pc, #416]	; (8005c54 <_strtod_l+0xb54>)
 8005ab4:	eeac eb00 	vfma.f64	d14, d12, d0
 8005ab8:	ee1e 3a90 	vmov	r3, s29
 8005abc:	4a68      	ldr	r2, [pc, #416]	; (8005c60 <_strtod_l+0xb60>)
 8005abe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ac0:	4018      	ands	r0, r3
 8005ac2:	4290      	cmp	r0, r2
 8005ac4:	ec59 8b1e 	vmov	r8, r9, d14
 8005ac8:	d94e      	bls.n	8005b68 <_strtod_l+0xa68>
 8005aca:	ee18 3a90 	vmov	r3, s17
 8005ace:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d104      	bne.n	8005ae0 <_strtod_l+0x9e0>
 8005ad6:	ee18 3a10 	vmov	r3, s16
 8005ada:	3301      	adds	r3, #1
 8005adc:	f43f ad4c 	beq.w	8005578 <_strtod_l+0x478>
 8005ae0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005c58 <_strtod_l+0xb58>
 8005ae4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005ae8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005aea:	4620      	mov	r0, r4
 8005aec:	f001 fe1e 	bl	800772c <_Bfree>
 8005af0:	4639      	mov	r1, r7
 8005af2:	4620      	mov	r0, r4
 8005af4:	f001 fe1a 	bl	800772c <_Bfree>
 8005af8:	4631      	mov	r1, r6
 8005afa:	4620      	mov	r0, r4
 8005afc:	f001 fe16 	bl	800772c <_Bfree>
 8005b00:	4629      	mov	r1, r5
 8005b02:	4620      	mov	r0, r4
 8005b04:	f001 fe12 	bl	800772c <_Bfree>
 8005b08:	e619      	b.n	800573e <_strtod_l+0x63e>
 8005b0a:	f1b8 0f00 	cmp.w	r8, #0
 8005b0e:	d112      	bne.n	8005b36 <_strtod_l+0xa36>
 8005b10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b14:	b9b3      	cbnz	r3, 8005b44 <_strtod_l+0xa44>
 8005b16:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8005b1a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b22:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8005b26:	bf58      	it	pl
 8005b28:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8005b2c:	eeb1 7b4d 	vneg.f64	d7, d13
 8005b30:	ec53 2b17 	vmov	r2, r3, d7
 8005b34:	e7aa      	b.n	8005a8c <_strtod_l+0x98c>
 8005b36:	f1b8 0f01 	cmp.w	r8, #1
 8005b3a:	d103      	bne.n	8005b44 <_strtod_l+0xa44>
 8005b3c:	f1b9 0f00 	cmp.w	r9, #0
 8005b40:	f43f ad8a 	beq.w	8005658 <_strtod_l+0x558>
 8005b44:	4b47      	ldr	r3, [pc, #284]	; (8005c64 <_strtod_l+0xb64>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	e79e      	b.n	8005a88 <_strtod_l+0x988>
 8005b4a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8005b4e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8005b52:	f1ba 0f00 	cmp.w	sl, #0
 8005b56:	d104      	bne.n	8005b62 <_strtod_l+0xa62>
 8005b58:	eeb1 7b4d 	vneg.f64	d7, d13
 8005b5c:	ec53 2b17 	vmov	r2, r3, d7
 8005b60:	e794      	b.n	8005a8c <_strtod_l+0x98c>
 8005b62:	eeb0 7b4d 	vmov.f64	d7, d13
 8005b66:	e7f9      	b.n	8005b5c <_strtod_l+0xa5c>
 8005b68:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005b6c:	9b04      	ldr	r3, [sp, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1ba      	bne.n	8005ae8 <_strtod_l+0x9e8>
 8005b72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b76:	0d1b      	lsrs	r3, r3, #20
 8005b78:	051b      	lsls	r3, r3, #20
 8005b7a:	4299      	cmp	r1, r3
 8005b7c:	d1b4      	bne.n	8005ae8 <_strtod_l+0x9e8>
 8005b7e:	ec51 0b1d 	vmov	r0, r1, d13
 8005b82:	f7fa fd89 	bl	8000698 <__aeabi_d2lz>
 8005b86:	f7fa fd41 	bl	800060c <__aeabi_l2d>
 8005b8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b8e:	ec41 0b17 	vmov	d7, r0, r1
 8005b92:	ea43 0308 	orr.w	r3, r3, r8
 8005b96:	ea53 030a 	orrs.w	r3, r3, sl
 8005b9a:	ee3d db47 	vsub.f64	d13, d13, d7
 8005b9e:	d03c      	beq.n	8005c1a <_strtod_l+0xb1a>
 8005ba0:	eeb4 dbca 	vcmpe.f64	d13, d10
 8005ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba8:	f53f acf0 	bmi.w	800558c <_strtod_l+0x48c>
 8005bac:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8005bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb4:	dd98      	ble.n	8005ae8 <_strtod_l+0x9e8>
 8005bb6:	e4e9      	b.n	800558c <_strtod_l+0x48c>
 8005bb8:	9804      	ldr	r0, [sp, #16]
 8005bba:	b1f0      	cbz	r0, 8005bfa <_strtod_l+0xafa>
 8005bbc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8005bc0:	d81b      	bhi.n	8005bfa <_strtod_l+0xafa>
 8005bc2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8005c48 <_strtod_l+0xb48>
 8005bc6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8005bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bce:	d811      	bhi.n	8005bf4 <_strtod_l+0xaf4>
 8005bd0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8005bd4:	ee1d 3a10 	vmov	r3, s26
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bf38      	it	cc
 8005bdc:	2301      	movcc	r3, #1
 8005bde:	ee0d 3a10 	vmov	s26, r3
 8005be2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8005be6:	f1ba 0f00 	cmp.w	sl, #0
 8005bea:	d113      	bne.n	8005c14 <_strtod_l+0xb14>
 8005bec:	eeb1 7b4d 	vneg.f64	d7, d13
 8005bf0:	ec53 2b17 	vmov	r2, r3, d7
 8005bf4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8005bf8:	1a43      	subs	r3, r0, r1
 8005bfa:	eeb0 0b48 	vmov.f64	d0, d8
 8005bfe:	ec43 2b1c 	vmov	d12, r2, r3
 8005c02:	910a      	str	r1, [sp, #40]	; 0x28
 8005c04:	f002 f8c4 	bl	8007d90 <__ulp>
 8005c08:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c0a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8005c0e:	ec59 8b18 	vmov	r8, r9, d8
 8005c12:	e7ab      	b.n	8005b6c <_strtod_l+0xa6c>
 8005c14:	eeb0 7b4d 	vmov.f64	d7, d13
 8005c18:	e7ea      	b.n	8005bf0 <_strtod_l+0xaf0>
 8005c1a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8005c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c22:	f57f af61 	bpl.w	8005ae8 <_strtod_l+0x9e8>
 8005c26:	e4b1      	b.n	800558c <_strtod_l+0x48c>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9308      	str	r3, [sp, #32]
 8005c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	f7ff baad 	b.w	8005190 <_strtod_l+0x90>
 8005c36:	2a65      	cmp	r2, #101	; 0x65
 8005c38:	f43f ab9f 	beq.w	800537a <_strtod_l+0x27a>
 8005c3c:	2a45      	cmp	r2, #69	; 0x45
 8005c3e:	f43f ab9c 	beq.w	800537a <_strtod_l+0x27a>
 8005c42:	2101      	movs	r1, #1
 8005c44:	f7ff bbd4 	b.w	80053f0 <_strtod_l+0x2f0>
 8005c48:	ffc00000 	.word	0xffc00000
 8005c4c:	41dfffff 	.word	0x41dfffff
 8005c50:	000fffff 	.word	0x000fffff
 8005c54:	7ff00000 	.word	0x7ff00000
 8005c58:	7fefffff 	.word	0x7fefffff
 8005c5c:	3ff00000 	.word	0x3ff00000
 8005c60:	7c9fffff 	.word	0x7c9fffff
 8005c64:	bff00000 	.word	0xbff00000
 8005c68:	7fe00000 	.word	0x7fe00000

08005c6c <_strtod_r>:
 8005c6c:	4b01      	ldr	r3, [pc, #4]	; (8005c74 <_strtod_r+0x8>)
 8005c6e:	f7ff ba47 	b.w	8005100 <_strtod_l>
 8005c72:	bf00      	nop
 8005c74:	20000080 	.word	0x20000080

08005c78 <_strtol_l.constprop.0>:
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7e:	d001      	beq.n	8005c84 <_strtol_l.constprop.0+0xc>
 8005c80:	2b24      	cmp	r3, #36	; 0x24
 8005c82:	d906      	bls.n	8005c92 <_strtol_l.constprop.0+0x1a>
 8005c84:	f7fe f9e2 	bl	800404c <__errno>
 8005c88:	2316      	movs	r3, #22
 8005c8a:	6003      	str	r3, [r0, #0]
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005d78 <_strtol_l.constprop.0+0x100>
 8005c96:	460d      	mov	r5, r1
 8005c98:	462e      	mov	r6, r5
 8005c9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005ca2:	f017 0708 	ands.w	r7, r7, #8
 8005ca6:	d1f7      	bne.n	8005c98 <_strtol_l.constprop.0+0x20>
 8005ca8:	2c2d      	cmp	r4, #45	; 0x2d
 8005caa:	d132      	bne.n	8005d12 <_strtol_l.constprop.0+0x9a>
 8005cac:	782c      	ldrb	r4, [r5, #0]
 8005cae:	2701      	movs	r7, #1
 8005cb0:	1cb5      	adds	r5, r6, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d05b      	beq.n	8005d6e <_strtol_l.constprop.0+0xf6>
 8005cb6:	2b10      	cmp	r3, #16
 8005cb8:	d109      	bne.n	8005cce <_strtol_l.constprop.0+0x56>
 8005cba:	2c30      	cmp	r4, #48	; 0x30
 8005cbc:	d107      	bne.n	8005cce <_strtol_l.constprop.0+0x56>
 8005cbe:	782c      	ldrb	r4, [r5, #0]
 8005cc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005cc4:	2c58      	cmp	r4, #88	; 0x58
 8005cc6:	d14d      	bne.n	8005d64 <_strtol_l.constprop.0+0xec>
 8005cc8:	786c      	ldrb	r4, [r5, #1]
 8005cca:	2310      	movs	r3, #16
 8005ccc:	3502      	adds	r5, #2
 8005cce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005cd2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005cd6:	f04f 0c00 	mov.w	ip, #0
 8005cda:	fbb8 f9f3 	udiv	r9, r8, r3
 8005cde:	4666      	mov	r6, ip
 8005ce0:	fb03 8a19 	mls	sl, r3, r9, r8
 8005ce4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005ce8:	f1be 0f09 	cmp.w	lr, #9
 8005cec:	d816      	bhi.n	8005d1c <_strtol_l.constprop.0+0xa4>
 8005cee:	4674      	mov	r4, lr
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	dd24      	ble.n	8005d3e <_strtol_l.constprop.0+0xc6>
 8005cf4:	f1bc 0f00 	cmp.w	ip, #0
 8005cf8:	db1e      	blt.n	8005d38 <_strtol_l.constprop.0+0xc0>
 8005cfa:	45b1      	cmp	r9, r6
 8005cfc:	d31c      	bcc.n	8005d38 <_strtol_l.constprop.0+0xc0>
 8005cfe:	d101      	bne.n	8005d04 <_strtol_l.constprop.0+0x8c>
 8005d00:	45a2      	cmp	sl, r4
 8005d02:	db19      	blt.n	8005d38 <_strtol_l.constprop.0+0xc0>
 8005d04:	fb06 4603 	mla	r6, r6, r3, r4
 8005d08:	f04f 0c01 	mov.w	ip, #1
 8005d0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d10:	e7e8      	b.n	8005ce4 <_strtol_l.constprop.0+0x6c>
 8005d12:	2c2b      	cmp	r4, #43	; 0x2b
 8005d14:	bf04      	itt	eq
 8005d16:	782c      	ldrbeq	r4, [r5, #0]
 8005d18:	1cb5      	addeq	r5, r6, #2
 8005d1a:	e7ca      	b.n	8005cb2 <_strtol_l.constprop.0+0x3a>
 8005d1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005d20:	f1be 0f19 	cmp.w	lr, #25
 8005d24:	d801      	bhi.n	8005d2a <_strtol_l.constprop.0+0xb2>
 8005d26:	3c37      	subs	r4, #55	; 0x37
 8005d28:	e7e2      	b.n	8005cf0 <_strtol_l.constprop.0+0x78>
 8005d2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005d2e:	f1be 0f19 	cmp.w	lr, #25
 8005d32:	d804      	bhi.n	8005d3e <_strtol_l.constprop.0+0xc6>
 8005d34:	3c57      	subs	r4, #87	; 0x57
 8005d36:	e7db      	b.n	8005cf0 <_strtol_l.constprop.0+0x78>
 8005d38:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005d3c:	e7e6      	b.n	8005d0c <_strtol_l.constprop.0+0x94>
 8005d3e:	f1bc 0f00 	cmp.w	ip, #0
 8005d42:	da05      	bge.n	8005d50 <_strtol_l.constprop.0+0xd8>
 8005d44:	2322      	movs	r3, #34	; 0x22
 8005d46:	6003      	str	r3, [r0, #0]
 8005d48:	4646      	mov	r6, r8
 8005d4a:	b942      	cbnz	r2, 8005d5e <_strtol_l.constprop.0+0xe6>
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	e79e      	b.n	8005c8e <_strtol_l.constprop.0+0x16>
 8005d50:	b107      	cbz	r7, 8005d54 <_strtol_l.constprop.0+0xdc>
 8005d52:	4276      	negs	r6, r6
 8005d54:	2a00      	cmp	r2, #0
 8005d56:	d0f9      	beq.n	8005d4c <_strtol_l.constprop.0+0xd4>
 8005d58:	f1bc 0f00 	cmp.w	ip, #0
 8005d5c:	d000      	beq.n	8005d60 <_strtol_l.constprop.0+0xe8>
 8005d5e:	1e69      	subs	r1, r5, #1
 8005d60:	6011      	str	r1, [r2, #0]
 8005d62:	e7f3      	b.n	8005d4c <_strtol_l.constprop.0+0xd4>
 8005d64:	2430      	movs	r4, #48	; 0x30
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1b1      	bne.n	8005cce <_strtol_l.constprop.0+0x56>
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	e7af      	b.n	8005cce <_strtol_l.constprop.0+0x56>
 8005d6e:	2c30      	cmp	r4, #48	; 0x30
 8005d70:	d0a5      	beq.n	8005cbe <_strtol_l.constprop.0+0x46>
 8005d72:	230a      	movs	r3, #10
 8005d74:	e7ab      	b.n	8005cce <_strtol_l.constprop.0+0x56>
 8005d76:	bf00      	nop
 8005d78:	08008981 	.word	0x08008981

08005d7c <_strtol_r>:
 8005d7c:	f7ff bf7c 	b.w	8005c78 <_strtol_l.constprop.0>

08005d80 <__swbuf_r>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	460e      	mov	r6, r1
 8005d84:	4614      	mov	r4, r2
 8005d86:	4605      	mov	r5, r0
 8005d88:	b118      	cbz	r0, 8005d92 <__swbuf_r+0x12>
 8005d8a:	6983      	ldr	r3, [r0, #24]
 8005d8c:	b90b      	cbnz	r3, 8005d92 <__swbuf_r+0x12>
 8005d8e:	f000 ffd3 	bl	8006d38 <__sinit>
 8005d92:	4b21      	ldr	r3, [pc, #132]	; (8005e18 <__swbuf_r+0x98>)
 8005d94:	429c      	cmp	r4, r3
 8005d96:	d12b      	bne.n	8005df0 <__swbuf_r+0x70>
 8005d98:	686c      	ldr	r4, [r5, #4]
 8005d9a:	69a3      	ldr	r3, [r4, #24]
 8005d9c:	60a3      	str	r3, [r4, #8]
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	071a      	lsls	r2, r3, #28
 8005da2:	d52f      	bpl.n	8005e04 <__swbuf_r+0x84>
 8005da4:	6923      	ldr	r3, [r4, #16]
 8005da6:	b36b      	cbz	r3, 8005e04 <__swbuf_r+0x84>
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	6820      	ldr	r0, [r4, #0]
 8005dac:	1ac0      	subs	r0, r0, r3
 8005dae:	6963      	ldr	r3, [r4, #20]
 8005db0:	b2f6      	uxtb	r6, r6
 8005db2:	4283      	cmp	r3, r0
 8005db4:	4637      	mov	r7, r6
 8005db6:	dc04      	bgt.n	8005dc2 <__swbuf_r+0x42>
 8005db8:	4621      	mov	r1, r4
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 ff28 	bl	8006c10 <_fflush_r>
 8005dc0:	bb30      	cbnz	r0, 8005e10 <__swbuf_r+0x90>
 8005dc2:	68a3      	ldr	r3, [r4, #8]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	60a3      	str	r3, [r4, #8]
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	6022      	str	r2, [r4, #0]
 8005dce:	701e      	strb	r6, [r3, #0]
 8005dd0:	6963      	ldr	r3, [r4, #20]
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	4283      	cmp	r3, r0
 8005dd6:	d004      	beq.n	8005de2 <__swbuf_r+0x62>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	07db      	lsls	r3, r3, #31
 8005ddc:	d506      	bpl.n	8005dec <__swbuf_r+0x6c>
 8005dde:	2e0a      	cmp	r6, #10
 8005de0:	d104      	bne.n	8005dec <__swbuf_r+0x6c>
 8005de2:	4621      	mov	r1, r4
 8005de4:	4628      	mov	r0, r5
 8005de6:	f000 ff13 	bl	8006c10 <_fflush_r>
 8005dea:	b988      	cbnz	r0, 8005e10 <__swbuf_r+0x90>
 8005dec:	4638      	mov	r0, r7
 8005dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005df0:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <__swbuf_r+0x9c>)
 8005df2:	429c      	cmp	r4, r3
 8005df4:	d101      	bne.n	8005dfa <__swbuf_r+0x7a>
 8005df6:	68ac      	ldr	r4, [r5, #8]
 8005df8:	e7cf      	b.n	8005d9a <__swbuf_r+0x1a>
 8005dfa:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <__swbuf_r+0xa0>)
 8005dfc:	429c      	cmp	r4, r3
 8005dfe:	bf08      	it	eq
 8005e00:	68ec      	ldreq	r4, [r5, #12]
 8005e02:	e7ca      	b.n	8005d9a <__swbuf_r+0x1a>
 8005e04:	4621      	mov	r1, r4
 8005e06:	4628      	mov	r0, r5
 8005e08:	f000 f80c 	bl	8005e24 <__swsetup_r>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d0cb      	beq.n	8005da8 <__swbuf_r+0x28>
 8005e10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e14:	e7ea      	b.n	8005dec <__swbuf_r+0x6c>
 8005e16:	bf00      	nop
 8005e18:	08008b34 	.word	0x08008b34
 8005e1c:	08008b54 	.word	0x08008b54
 8005e20:	08008b14 	.word	0x08008b14

08005e24 <__swsetup_r>:
 8005e24:	4b32      	ldr	r3, [pc, #200]	; (8005ef0 <__swsetup_r+0xcc>)
 8005e26:	b570      	push	{r4, r5, r6, lr}
 8005e28:	681d      	ldr	r5, [r3, #0]
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	460c      	mov	r4, r1
 8005e2e:	b125      	cbz	r5, 8005e3a <__swsetup_r+0x16>
 8005e30:	69ab      	ldr	r3, [r5, #24]
 8005e32:	b913      	cbnz	r3, 8005e3a <__swsetup_r+0x16>
 8005e34:	4628      	mov	r0, r5
 8005e36:	f000 ff7f 	bl	8006d38 <__sinit>
 8005e3a:	4b2e      	ldr	r3, [pc, #184]	; (8005ef4 <__swsetup_r+0xd0>)
 8005e3c:	429c      	cmp	r4, r3
 8005e3e:	d10f      	bne.n	8005e60 <__swsetup_r+0x3c>
 8005e40:	686c      	ldr	r4, [r5, #4]
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e48:	0719      	lsls	r1, r3, #28
 8005e4a:	d42c      	bmi.n	8005ea6 <__swsetup_r+0x82>
 8005e4c:	06dd      	lsls	r5, r3, #27
 8005e4e:	d411      	bmi.n	8005e74 <__swsetup_r+0x50>
 8005e50:	2309      	movs	r3, #9
 8005e52:	6033      	str	r3, [r6, #0]
 8005e54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e5e:	e03e      	b.n	8005ede <__swsetup_r+0xba>
 8005e60:	4b25      	ldr	r3, [pc, #148]	; (8005ef8 <__swsetup_r+0xd4>)
 8005e62:	429c      	cmp	r4, r3
 8005e64:	d101      	bne.n	8005e6a <__swsetup_r+0x46>
 8005e66:	68ac      	ldr	r4, [r5, #8]
 8005e68:	e7eb      	b.n	8005e42 <__swsetup_r+0x1e>
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <__swsetup_r+0xd8>)
 8005e6c:	429c      	cmp	r4, r3
 8005e6e:	bf08      	it	eq
 8005e70:	68ec      	ldreq	r4, [r5, #12]
 8005e72:	e7e6      	b.n	8005e42 <__swsetup_r+0x1e>
 8005e74:	0758      	lsls	r0, r3, #29
 8005e76:	d512      	bpl.n	8005e9e <__swsetup_r+0x7a>
 8005e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e7a:	b141      	cbz	r1, 8005e8e <__swsetup_r+0x6a>
 8005e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e80:	4299      	cmp	r1, r3
 8005e82:	d002      	beq.n	8005e8a <__swsetup_r+0x66>
 8005e84:	4630      	mov	r0, r6
 8005e86:	f002 f8e5 	bl	8008054 <_free_r>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e94:	81a3      	strh	r3, [r4, #12]
 8005e96:	2300      	movs	r3, #0
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	f043 0308 	orr.w	r3, r3, #8
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	6923      	ldr	r3, [r4, #16]
 8005ea8:	b94b      	cbnz	r3, 8005ebe <__swsetup_r+0x9a>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb4:	d003      	beq.n	8005ebe <__swsetup_r+0x9a>
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f001 fb75 	bl	80075a8 <__smakebuf_r>
 8005ebe:	89a0      	ldrh	r0, [r4, #12]
 8005ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ec4:	f010 0301 	ands.w	r3, r0, #1
 8005ec8:	d00a      	beq.n	8005ee0 <__swsetup_r+0xbc>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60a3      	str	r3, [r4, #8]
 8005ece:	6963      	ldr	r3, [r4, #20]
 8005ed0:	425b      	negs	r3, r3
 8005ed2:	61a3      	str	r3, [r4, #24]
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	b943      	cbnz	r3, 8005eea <__swsetup_r+0xc6>
 8005ed8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005edc:	d1ba      	bne.n	8005e54 <__swsetup_r+0x30>
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	0781      	lsls	r1, r0, #30
 8005ee2:	bf58      	it	pl
 8005ee4:	6963      	ldrpl	r3, [r4, #20]
 8005ee6:	60a3      	str	r3, [r4, #8]
 8005ee8:	e7f4      	b.n	8005ed4 <__swsetup_r+0xb0>
 8005eea:	2000      	movs	r0, #0
 8005eec:	e7f7      	b.n	8005ede <__swsetup_r+0xba>
 8005eee:	bf00      	nop
 8005ef0:	20000018 	.word	0x20000018
 8005ef4:	08008b34 	.word	0x08008b34
 8005ef8:	08008b54 	.word	0x08008b54
 8005efc:	08008b14 	.word	0x08008b14

08005f00 <abort>:
 8005f00:	b508      	push	{r3, lr}
 8005f02:	2006      	movs	r0, #6
 8005f04:	f002 fb50 	bl	80085a8 <raise>
 8005f08:	2001      	movs	r0, #1
 8005f0a:	f7fa ff81 	bl	8000e10 <_exit>

08005f0e <quorem>:
 8005f0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f12:	6903      	ldr	r3, [r0, #16]
 8005f14:	690c      	ldr	r4, [r1, #16]
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	4607      	mov	r7, r0
 8005f1a:	f2c0 8081 	blt.w	8006020 <quorem+0x112>
 8005f1e:	3c01      	subs	r4, #1
 8005f20:	f101 0814 	add.w	r8, r1, #20
 8005f24:	f100 0514 	add.w	r5, r0, #20
 8005f28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f36:	3301      	adds	r3, #1
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f42:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f46:	d331      	bcc.n	8005fac <quorem+0x9e>
 8005f48:	f04f 0e00 	mov.w	lr, #0
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	46ac      	mov	ip, r5
 8005f50:	46f2      	mov	sl, lr
 8005f52:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f56:	b293      	uxth	r3, r2
 8005f58:	fb06 e303 	mla	r3, r6, r3, lr
 8005f5c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	ebaa 0303 	sub.w	r3, sl, r3
 8005f66:	f8dc a000 	ldr.w	sl, [ip]
 8005f6a:	0c12      	lsrs	r2, r2, #16
 8005f6c:	fa13 f38a 	uxtah	r3, r3, sl
 8005f70:	fb06 e202 	mla	r2, r6, r2, lr
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	9b00      	ldr	r3, [sp, #0]
 8005f78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f7c:	b292      	uxth	r2, r2
 8005f7e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f86:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f8a:	4581      	cmp	r9, r0
 8005f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f90:	f84c 3b04 	str.w	r3, [ip], #4
 8005f94:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f98:	d2db      	bcs.n	8005f52 <quorem+0x44>
 8005f9a:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f9e:	b92b      	cbnz	r3, 8005fac <quorem+0x9e>
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	3b04      	subs	r3, #4
 8005fa4:	429d      	cmp	r5, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	d32e      	bcc.n	8006008 <quorem+0xfa>
 8005faa:	613c      	str	r4, [r7, #16]
 8005fac:	4638      	mov	r0, r7
 8005fae:	f001 fe49 	bl	8007c44 <__mcmp>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	db24      	blt.n	8006000 <quorem+0xf2>
 8005fb6:	3601      	adds	r6, #1
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f04f 0c00 	mov.w	ip, #0
 8005fbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fc2:	f8d0 e000 	ldr.w	lr, [r0]
 8005fc6:	b293      	uxth	r3, r2
 8005fc8:	ebac 0303 	sub.w	r3, ip, r3
 8005fcc:	0c12      	lsrs	r2, r2, #16
 8005fce:	fa13 f38e 	uxtah	r3, r3, lr
 8005fd2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe0:	45c1      	cmp	r9, r8
 8005fe2:	f840 3b04 	str.w	r3, [r0], #4
 8005fe6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fea:	d2e8      	bcs.n	8005fbe <quorem+0xb0>
 8005fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ff0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ff4:	b922      	cbnz	r2, 8006000 <quorem+0xf2>
 8005ff6:	3b04      	subs	r3, #4
 8005ff8:	429d      	cmp	r5, r3
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	d30a      	bcc.n	8006014 <quorem+0x106>
 8005ffe:	613c      	str	r4, [r7, #16]
 8006000:	4630      	mov	r0, r6
 8006002:	b003      	add	sp, #12
 8006004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	3b04      	subs	r3, #4
 800600c:	2a00      	cmp	r2, #0
 800600e:	d1cc      	bne.n	8005faa <quorem+0x9c>
 8006010:	3c01      	subs	r4, #1
 8006012:	e7c7      	b.n	8005fa4 <quorem+0x96>
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	3b04      	subs	r3, #4
 8006018:	2a00      	cmp	r2, #0
 800601a:	d1f0      	bne.n	8005ffe <quorem+0xf0>
 800601c:	3c01      	subs	r4, #1
 800601e:	e7eb      	b.n	8005ff8 <quorem+0xea>
 8006020:	2000      	movs	r0, #0
 8006022:	e7ee      	b.n	8006002 <quorem+0xf4>
 8006024:	0000      	movs	r0, r0
	...

08006028 <_dtoa_r>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	ed2d 8b02 	vpush	{d8}
 8006030:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006032:	b091      	sub	sp, #68	; 0x44
 8006034:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006038:	ec59 8b10 	vmov	r8, r9, d0
 800603c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800603e:	9106      	str	r1, [sp, #24]
 8006040:	4606      	mov	r6, r0
 8006042:	9208      	str	r2, [sp, #32]
 8006044:	930c      	str	r3, [sp, #48]	; 0x30
 8006046:	b975      	cbnz	r5, 8006066 <_dtoa_r+0x3e>
 8006048:	2010      	movs	r0, #16
 800604a:	f001 faed 	bl	8007628 <malloc>
 800604e:	4602      	mov	r2, r0
 8006050:	6270      	str	r0, [r6, #36]	; 0x24
 8006052:	b920      	cbnz	r0, 800605e <_dtoa_r+0x36>
 8006054:	4baa      	ldr	r3, [pc, #680]	; (8006300 <_dtoa_r+0x2d8>)
 8006056:	21ea      	movs	r1, #234	; 0xea
 8006058:	48aa      	ldr	r0, [pc, #680]	; (8006304 <_dtoa_r+0x2dc>)
 800605a:	f7fd ffd9 	bl	8004010 <__assert_func>
 800605e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006062:	6005      	str	r5, [r0, #0]
 8006064:	60c5      	str	r5, [r0, #12]
 8006066:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	b151      	cbz	r1, 8006082 <_dtoa_r+0x5a>
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	604a      	str	r2, [r1, #4]
 8006070:	2301      	movs	r3, #1
 8006072:	4093      	lsls	r3, r2
 8006074:	608b      	str	r3, [r1, #8]
 8006076:	4630      	mov	r0, r6
 8006078:	f001 fb58 	bl	800772c <_Bfree>
 800607c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	f1b9 0300 	subs.w	r3, r9, #0
 8006086:	bfbb      	ittet	lt
 8006088:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800608c:	9303      	strlt	r3, [sp, #12]
 800608e:	2300      	movge	r3, #0
 8006090:	2201      	movlt	r2, #1
 8006092:	bfac      	ite	ge
 8006094:	6023      	strge	r3, [r4, #0]
 8006096:	6022      	strlt	r2, [r4, #0]
 8006098:	4b9b      	ldr	r3, [pc, #620]	; (8006308 <_dtoa_r+0x2e0>)
 800609a:	9c03      	ldr	r4, [sp, #12]
 800609c:	43a3      	bics	r3, r4
 800609e:	d11c      	bne.n	80060da <_dtoa_r+0xb2>
 80060a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80060ac:	ea53 0308 	orrs.w	r3, r3, r8
 80060b0:	f000 84fd 	beq.w	8006aae <_dtoa_r+0xa86>
 80060b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060b6:	b963      	cbnz	r3, 80060d2 <_dtoa_r+0xaa>
 80060b8:	4b94      	ldr	r3, [pc, #592]	; (800630c <_dtoa_r+0x2e4>)
 80060ba:	e01f      	b.n	80060fc <_dtoa_r+0xd4>
 80060bc:	4b94      	ldr	r3, [pc, #592]	; (8006310 <_dtoa_r+0x2e8>)
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	3308      	adds	r3, #8
 80060c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	9801      	ldr	r0, [sp, #4]
 80060c8:	b011      	add	sp, #68	; 0x44
 80060ca:	ecbd 8b02 	vpop	{d8}
 80060ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d2:	4b8e      	ldr	r3, [pc, #568]	; (800630c <_dtoa_r+0x2e4>)
 80060d4:	9301      	str	r3, [sp, #4]
 80060d6:	3303      	adds	r3, #3
 80060d8:	e7f3      	b.n	80060c2 <_dtoa_r+0x9a>
 80060da:	ed9d 8b02 	vldr	d8, [sp, #8]
 80060de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80060e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e6:	d10b      	bne.n	8006100 <_dtoa_r+0xd8>
 80060e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060ea:	2301      	movs	r3, #1
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 84d9 	beq.w	8006aa8 <_dtoa_r+0xa80>
 80060f6:	4887      	ldr	r0, [pc, #540]	; (8006314 <_dtoa_r+0x2ec>)
 80060f8:	6018      	str	r0, [r3, #0]
 80060fa:	1e43      	subs	r3, r0, #1
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	e7e2      	b.n	80060c6 <_dtoa_r+0x9e>
 8006100:	a90f      	add	r1, sp, #60	; 0x3c
 8006102:	aa0e      	add	r2, sp, #56	; 0x38
 8006104:	4630      	mov	r0, r6
 8006106:	eeb0 0b48 	vmov.f64	d0, d8
 800610a:	f001 febd 	bl	8007e88 <__d2b>
 800610e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006112:	4605      	mov	r5, r0
 8006114:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006116:	2900      	cmp	r1, #0
 8006118:	d046      	beq.n	80061a8 <_dtoa_r+0x180>
 800611a:	ee18 4a90 	vmov	r4, s17
 800611e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006122:	ec53 2b18 	vmov	r2, r3, d8
 8006126:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800612a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800612e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006132:	2400      	movs	r4, #0
 8006134:	ec43 2b16 	vmov	d6, r2, r3
 8006138:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800613c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80062e8 <_dtoa_r+0x2c0>
 8006140:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006144:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80062f0 <_dtoa_r+0x2c8>
 8006148:	eea7 6b05 	vfma.f64	d6, d7, d5
 800614c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80062f8 <_dtoa_r+0x2d0>
 8006150:	ee07 1a90 	vmov	s15, r1
 8006154:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8006158:	eeb0 7b46 	vmov.f64	d7, d6
 800615c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006160:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006164:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616c:	ee16 ba90 	vmov	fp, s13
 8006170:	940a      	str	r4, [sp, #40]	; 0x28
 8006172:	d508      	bpl.n	8006186 <_dtoa_r+0x15e>
 8006174:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006178:	eeb4 6b47 	vcmp.f64	d6, d7
 800617c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006180:	bf18      	it	ne
 8006182:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8006186:	f1bb 0f16 	cmp.w	fp, #22
 800618a:	d82f      	bhi.n	80061ec <_dtoa_r+0x1c4>
 800618c:	4b62      	ldr	r3, [pc, #392]	; (8006318 <_dtoa_r+0x2f0>)
 800618e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006192:	ed93 7b00 	vldr	d7, [r3]
 8006196:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800619a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619e:	d501      	bpl.n	80061a4 <_dtoa_r+0x17c>
 80061a0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80061a4:	2300      	movs	r3, #0
 80061a6:	e022      	b.n	80061ee <_dtoa_r+0x1c6>
 80061a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80061aa:	4401      	add	r1, r0
 80061ac:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	bfc1      	itttt	gt
 80061b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061b8:	fa04 f303 	lslgt.w	r3, r4, r3
 80061bc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80061c0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80061c4:	bfd6      	itet	le
 80061c6:	f1c3 0320 	rsble	r3, r3, #32
 80061ca:	ea43 0808 	orrgt.w	r8, r3, r8
 80061ce:	fa08 f803 	lslle.w	r8, r8, r3
 80061d2:	ee07 8a90 	vmov	s15, r8
 80061d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80061da:	3901      	subs	r1, #1
 80061dc:	ee17 4a90 	vmov	r4, s15
 80061e0:	ec53 2b17 	vmov	r2, r3, d7
 80061e4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80061e8:	2401      	movs	r4, #1
 80061ea:	e7a3      	b.n	8006134 <_dtoa_r+0x10c>
 80061ec:	2301      	movs	r3, #1
 80061ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80061f0:	1a43      	subs	r3, r0, r1
 80061f2:	1e5a      	subs	r2, r3, #1
 80061f4:	bf45      	ittet	mi
 80061f6:	f1c3 0301 	rsbmi	r3, r3, #1
 80061fa:	9304      	strmi	r3, [sp, #16]
 80061fc:	2300      	movpl	r3, #0
 80061fe:	2300      	movmi	r3, #0
 8006200:	9205      	str	r2, [sp, #20]
 8006202:	bf54      	ite	pl
 8006204:	9304      	strpl	r3, [sp, #16]
 8006206:	9305      	strmi	r3, [sp, #20]
 8006208:	f1bb 0f00 	cmp.w	fp, #0
 800620c:	db18      	blt.n	8006240 <_dtoa_r+0x218>
 800620e:	9b05      	ldr	r3, [sp, #20]
 8006210:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006214:	445b      	add	r3, fp
 8006216:	9305      	str	r3, [sp, #20]
 8006218:	2300      	movs	r3, #0
 800621a:	9a06      	ldr	r2, [sp, #24]
 800621c:	2a09      	cmp	r2, #9
 800621e:	d849      	bhi.n	80062b4 <_dtoa_r+0x28c>
 8006220:	2a05      	cmp	r2, #5
 8006222:	bfc4      	itt	gt
 8006224:	3a04      	subgt	r2, #4
 8006226:	9206      	strgt	r2, [sp, #24]
 8006228:	9a06      	ldr	r2, [sp, #24]
 800622a:	f1a2 0202 	sub.w	r2, r2, #2
 800622e:	bfcc      	ite	gt
 8006230:	2400      	movgt	r4, #0
 8006232:	2401      	movle	r4, #1
 8006234:	2a03      	cmp	r2, #3
 8006236:	d848      	bhi.n	80062ca <_dtoa_r+0x2a2>
 8006238:	e8df f002 	tbb	[pc, r2]
 800623c:	3a2c2e0b 	.word	0x3a2c2e0b
 8006240:	9b04      	ldr	r3, [sp, #16]
 8006242:	2200      	movs	r2, #0
 8006244:	eba3 030b 	sub.w	r3, r3, fp
 8006248:	9304      	str	r3, [sp, #16]
 800624a:	9209      	str	r2, [sp, #36]	; 0x24
 800624c:	f1cb 0300 	rsb	r3, fp, #0
 8006250:	e7e3      	b.n	800621a <_dtoa_r+0x1f2>
 8006252:	2200      	movs	r2, #0
 8006254:	9207      	str	r2, [sp, #28]
 8006256:	9a08      	ldr	r2, [sp, #32]
 8006258:	2a00      	cmp	r2, #0
 800625a:	dc39      	bgt.n	80062d0 <_dtoa_r+0x2a8>
 800625c:	f04f 0a01 	mov.w	sl, #1
 8006260:	46d1      	mov	r9, sl
 8006262:	4652      	mov	r2, sl
 8006264:	f8cd a020 	str.w	sl, [sp, #32]
 8006268:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800626a:	2100      	movs	r1, #0
 800626c:	6079      	str	r1, [r7, #4]
 800626e:	2004      	movs	r0, #4
 8006270:	f100 0c14 	add.w	ip, r0, #20
 8006274:	4594      	cmp	ip, r2
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	d92f      	bls.n	80062da <_dtoa_r+0x2b2>
 800627a:	4630      	mov	r0, r6
 800627c:	930d      	str	r3, [sp, #52]	; 0x34
 800627e:	f001 fa15 	bl	80076ac <_Balloc>
 8006282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006284:	9001      	str	r0, [sp, #4]
 8006286:	4602      	mov	r2, r0
 8006288:	2800      	cmp	r0, #0
 800628a:	d149      	bne.n	8006320 <_dtoa_r+0x2f8>
 800628c:	4b23      	ldr	r3, [pc, #140]	; (800631c <_dtoa_r+0x2f4>)
 800628e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006292:	e6e1      	b.n	8006058 <_dtoa_r+0x30>
 8006294:	2201      	movs	r2, #1
 8006296:	e7dd      	b.n	8006254 <_dtoa_r+0x22c>
 8006298:	2200      	movs	r2, #0
 800629a:	9207      	str	r2, [sp, #28]
 800629c:	9a08      	ldr	r2, [sp, #32]
 800629e:	eb0b 0a02 	add.w	sl, fp, r2
 80062a2:	f10a 0901 	add.w	r9, sl, #1
 80062a6:	464a      	mov	r2, r9
 80062a8:	2a01      	cmp	r2, #1
 80062aa:	bfb8      	it	lt
 80062ac:	2201      	movlt	r2, #1
 80062ae:	e7db      	b.n	8006268 <_dtoa_r+0x240>
 80062b0:	2201      	movs	r2, #1
 80062b2:	e7f2      	b.n	800629a <_dtoa_r+0x272>
 80062b4:	2401      	movs	r4, #1
 80062b6:	2200      	movs	r2, #0
 80062b8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80062bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80062c0:	2100      	movs	r1, #0
 80062c2:	46d1      	mov	r9, sl
 80062c4:	2212      	movs	r2, #18
 80062c6:	9108      	str	r1, [sp, #32]
 80062c8:	e7ce      	b.n	8006268 <_dtoa_r+0x240>
 80062ca:	2201      	movs	r2, #1
 80062cc:	9207      	str	r2, [sp, #28]
 80062ce:	e7f5      	b.n	80062bc <_dtoa_r+0x294>
 80062d0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80062d4:	46d1      	mov	r9, sl
 80062d6:	4652      	mov	r2, sl
 80062d8:	e7c6      	b.n	8006268 <_dtoa_r+0x240>
 80062da:	3101      	adds	r1, #1
 80062dc:	6079      	str	r1, [r7, #4]
 80062de:	0040      	lsls	r0, r0, #1
 80062e0:	e7c6      	b.n	8006270 <_dtoa_r+0x248>
 80062e2:	bf00      	nop
 80062e4:	f3af 8000 	nop.w
 80062e8:	636f4361 	.word	0x636f4361
 80062ec:	3fd287a7 	.word	0x3fd287a7
 80062f0:	8b60c8b3 	.word	0x8b60c8b3
 80062f4:	3fc68a28 	.word	0x3fc68a28
 80062f8:	509f79fb 	.word	0x509f79fb
 80062fc:	3fd34413 	.word	0x3fd34413
 8006300:	08008a8e 	.word	0x08008a8e
 8006304:	08008aa5 	.word	0x08008aa5
 8006308:	7ff00000 	.word	0x7ff00000
 800630c:	08008a8a 	.word	0x08008a8a
 8006310:	08008a81 	.word	0x08008a81
 8006314:	08008906 	.word	0x08008906
 8006318:	08008c78 	.word	0x08008c78
 800631c:	08008b00 	.word	0x08008b00
 8006320:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006322:	9901      	ldr	r1, [sp, #4]
 8006324:	6011      	str	r1, [r2, #0]
 8006326:	f1b9 0f0e 	cmp.w	r9, #14
 800632a:	d86c      	bhi.n	8006406 <_dtoa_r+0x3de>
 800632c:	2c00      	cmp	r4, #0
 800632e:	d06a      	beq.n	8006406 <_dtoa_r+0x3de>
 8006330:	f1bb 0f00 	cmp.w	fp, #0
 8006334:	f340 80a0 	ble.w	8006478 <_dtoa_r+0x450>
 8006338:	49c1      	ldr	r1, [pc, #772]	; (8006640 <_dtoa_r+0x618>)
 800633a:	f00b 020f 	and.w	r2, fp, #15
 800633e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006342:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006346:	ed92 7b00 	vldr	d7, [r2]
 800634a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800634e:	f000 8087 	beq.w	8006460 <_dtoa_r+0x438>
 8006352:	4abc      	ldr	r2, [pc, #752]	; (8006644 <_dtoa_r+0x61c>)
 8006354:	ed92 6b08 	vldr	d6, [r2, #32]
 8006358:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800635c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006360:	f001 010f 	and.w	r1, r1, #15
 8006364:	2203      	movs	r2, #3
 8006366:	48b7      	ldr	r0, [pc, #732]	; (8006644 <_dtoa_r+0x61c>)
 8006368:	2900      	cmp	r1, #0
 800636a:	d17b      	bne.n	8006464 <_dtoa_r+0x43c>
 800636c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006370:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006374:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006378:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800637a:	2900      	cmp	r1, #0
 800637c:	f000 80a2 	beq.w	80064c4 <_dtoa_r+0x49c>
 8006380:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006384:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006388:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800638c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006390:	f140 8098 	bpl.w	80064c4 <_dtoa_r+0x49c>
 8006394:	f1b9 0f00 	cmp.w	r9, #0
 8006398:	f000 8094 	beq.w	80064c4 <_dtoa_r+0x49c>
 800639c:	f1ba 0f00 	cmp.w	sl, #0
 80063a0:	dd2f      	ble.n	8006402 <_dtoa_r+0x3da>
 80063a2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80063a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80063aa:	ed8d 7b02 	vstr	d7, [sp, #8]
 80063ae:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80063b2:	3201      	adds	r2, #1
 80063b4:	4650      	mov	r0, sl
 80063b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80063ba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80063be:	ee07 2a90 	vmov	s15, r2
 80063c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80063c6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80063ca:	ee15 4a90 	vmov	r4, s11
 80063ce:	ec52 1b15 	vmov	r1, r2, d5
 80063d2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d177      	bne.n	80064ca <_dtoa_r+0x4a2>
 80063da:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80063de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80063e2:	ec42 1b17 	vmov	d7, r1, r2
 80063e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80063ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ee:	f300 8263 	bgt.w	80068b8 <_dtoa_r+0x890>
 80063f2:	eeb1 7b47 	vneg.f64	d7, d7
 80063f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80063fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063fe:	f100 8258 	bmi.w	80068b2 <_dtoa_r+0x88a>
 8006402:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006408:	2a00      	cmp	r2, #0
 800640a:	f2c0 811d 	blt.w	8006648 <_dtoa_r+0x620>
 800640e:	f1bb 0f0e 	cmp.w	fp, #14
 8006412:	f300 8119 	bgt.w	8006648 <_dtoa_r+0x620>
 8006416:	4b8a      	ldr	r3, [pc, #552]	; (8006640 <_dtoa_r+0x618>)
 8006418:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800641c:	ed93 6b00 	vldr	d6, [r3]
 8006420:	9b08      	ldr	r3, [sp, #32]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f280 80b7 	bge.w	8006596 <_dtoa_r+0x56e>
 8006428:	f1b9 0f00 	cmp.w	r9, #0
 800642c:	f300 80b3 	bgt.w	8006596 <_dtoa_r+0x56e>
 8006430:	f040 823f 	bne.w	80068b2 <_dtoa_r+0x88a>
 8006434:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006438:	ee26 6b07 	vmul.f64	d6, d6, d7
 800643c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006440:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006448:	464c      	mov	r4, r9
 800644a:	464f      	mov	r7, r9
 800644c:	f280 8215 	bge.w	800687a <_dtoa_r+0x852>
 8006450:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006454:	2331      	movs	r3, #49	; 0x31
 8006456:	f808 3b01 	strb.w	r3, [r8], #1
 800645a:	f10b 0b01 	add.w	fp, fp, #1
 800645e:	e211      	b.n	8006884 <_dtoa_r+0x85c>
 8006460:	2202      	movs	r2, #2
 8006462:	e780      	b.n	8006366 <_dtoa_r+0x33e>
 8006464:	07cc      	lsls	r4, r1, #31
 8006466:	d504      	bpl.n	8006472 <_dtoa_r+0x44a>
 8006468:	ed90 6b00 	vldr	d6, [r0]
 800646c:	3201      	adds	r2, #1
 800646e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006472:	1049      	asrs	r1, r1, #1
 8006474:	3008      	adds	r0, #8
 8006476:	e777      	b.n	8006368 <_dtoa_r+0x340>
 8006478:	d022      	beq.n	80064c0 <_dtoa_r+0x498>
 800647a:	f1cb 0100 	rsb	r1, fp, #0
 800647e:	4a70      	ldr	r2, [pc, #448]	; (8006640 <_dtoa_r+0x618>)
 8006480:	f001 000f 	and.w	r0, r1, #15
 8006484:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006488:	ed92 7b00 	vldr	d7, [r2]
 800648c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006490:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006494:	486b      	ldr	r0, [pc, #428]	; (8006644 <_dtoa_r+0x61c>)
 8006496:	1109      	asrs	r1, r1, #4
 8006498:	2400      	movs	r4, #0
 800649a:	2202      	movs	r2, #2
 800649c:	b929      	cbnz	r1, 80064aa <_dtoa_r+0x482>
 800649e:	2c00      	cmp	r4, #0
 80064a0:	f43f af6a 	beq.w	8006378 <_dtoa_r+0x350>
 80064a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80064a8:	e766      	b.n	8006378 <_dtoa_r+0x350>
 80064aa:	07cf      	lsls	r7, r1, #31
 80064ac:	d505      	bpl.n	80064ba <_dtoa_r+0x492>
 80064ae:	ed90 6b00 	vldr	d6, [r0]
 80064b2:	3201      	adds	r2, #1
 80064b4:	2401      	movs	r4, #1
 80064b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80064ba:	1049      	asrs	r1, r1, #1
 80064bc:	3008      	adds	r0, #8
 80064be:	e7ed      	b.n	800649c <_dtoa_r+0x474>
 80064c0:	2202      	movs	r2, #2
 80064c2:	e759      	b.n	8006378 <_dtoa_r+0x350>
 80064c4:	465f      	mov	r7, fp
 80064c6:	4648      	mov	r0, r9
 80064c8:	e775      	b.n	80063b6 <_dtoa_r+0x38e>
 80064ca:	ec42 1b17 	vmov	d7, r1, r2
 80064ce:	4a5c      	ldr	r2, [pc, #368]	; (8006640 <_dtoa_r+0x618>)
 80064d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80064d4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80064d8:	9a01      	ldr	r2, [sp, #4]
 80064da:	1814      	adds	r4, r2, r0
 80064dc:	9a07      	ldr	r2, [sp, #28]
 80064de:	b352      	cbz	r2, 8006536 <_dtoa_r+0x50e>
 80064e0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80064e4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80064e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80064ec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80064f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80064f4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80064f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80064fc:	ee14 2a90 	vmov	r2, s9
 8006500:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006504:	3230      	adds	r2, #48	; 0x30
 8006506:	ee36 6b45 	vsub.f64	d6, d6, d5
 800650a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800650e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006512:	f808 2b01 	strb.w	r2, [r8], #1
 8006516:	d439      	bmi.n	800658c <_dtoa_r+0x564>
 8006518:	ee32 5b46 	vsub.f64	d5, d2, d6
 800651c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006524:	d472      	bmi.n	800660c <_dtoa_r+0x5e4>
 8006526:	45a0      	cmp	r8, r4
 8006528:	f43f af6b 	beq.w	8006402 <_dtoa_r+0x3da>
 800652c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006530:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006534:	e7e0      	b.n	80064f8 <_dtoa_r+0x4d0>
 8006536:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800653a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800653e:	4621      	mov	r1, r4
 8006540:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006544:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006548:	ee14 2a90 	vmov	r2, s9
 800654c:	3230      	adds	r2, #48	; 0x30
 800654e:	f808 2b01 	strb.w	r2, [r8], #1
 8006552:	45a0      	cmp	r8, r4
 8006554:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006558:	ee36 6b45 	vsub.f64	d6, d6, d5
 800655c:	d118      	bne.n	8006590 <_dtoa_r+0x568>
 800655e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006562:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006566:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800656a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656e:	dc4d      	bgt.n	800660c <_dtoa_r+0x5e4>
 8006570:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006574:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657c:	f57f af41 	bpl.w	8006402 <_dtoa_r+0x3da>
 8006580:	4688      	mov	r8, r1
 8006582:	3901      	subs	r1, #1
 8006584:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006588:	2b30      	cmp	r3, #48	; 0x30
 800658a:	d0f9      	beq.n	8006580 <_dtoa_r+0x558>
 800658c:	46bb      	mov	fp, r7
 800658e:	e02a      	b.n	80065e6 <_dtoa_r+0x5be>
 8006590:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006594:	e7d6      	b.n	8006544 <_dtoa_r+0x51c>
 8006596:	ed9d 7b02 	vldr	d7, [sp, #8]
 800659a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800659e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80065a2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80065a6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80065aa:	ee15 3a10 	vmov	r3, s10
 80065ae:	3330      	adds	r3, #48	; 0x30
 80065b0:	f808 3b01 	strb.w	r3, [r8], #1
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	eba8 0303 	sub.w	r3, r8, r3
 80065ba:	4599      	cmp	r9, r3
 80065bc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80065c0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80065c4:	d133      	bne.n	800662e <_dtoa_r+0x606>
 80065c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80065ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80065ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d2:	dc1a      	bgt.n	800660a <_dtoa_r+0x5e2>
 80065d4:	eeb4 7b46 	vcmp.f64	d7, d6
 80065d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065dc:	d103      	bne.n	80065e6 <_dtoa_r+0x5be>
 80065de:	ee15 3a10 	vmov	r3, s10
 80065e2:	07d9      	lsls	r1, r3, #31
 80065e4:	d411      	bmi.n	800660a <_dtoa_r+0x5e2>
 80065e6:	4629      	mov	r1, r5
 80065e8:	4630      	mov	r0, r6
 80065ea:	f001 f89f 	bl	800772c <_Bfree>
 80065ee:	2300      	movs	r3, #0
 80065f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065f2:	f888 3000 	strb.w	r3, [r8]
 80065f6:	f10b 0301 	add.w	r3, fp, #1
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f43f ad61 	beq.w	80060c6 <_dtoa_r+0x9e>
 8006604:	f8c3 8000 	str.w	r8, [r3]
 8006608:	e55d      	b.n	80060c6 <_dtoa_r+0x9e>
 800660a:	465f      	mov	r7, fp
 800660c:	4643      	mov	r3, r8
 800660e:	4698      	mov	r8, r3
 8006610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006614:	2a39      	cmp	r2, #57	; 0x39
 8006616:	d106      	bne.n	8006626 <_dtoa_r+0x5fe>
 8006618:	9a01      	ldr	r2, [sp, #4]
 800661a:	429a      	cmp	r2, r3
 800661c:	d1f7      	bne.n	800660e <_dtoa_r+0x5e6>
 800661e:	9901      	ldr	r1, [sp, #4]
 8006620:	2230      	movs	r2, #48	; 0x30
 8006622:	3701      	adds	r7, #1
 8006624:	700a      	strb	r2, [r1, #0]
 8006626:	781a      	ldrb	r2, [r3, #0]
 8006628:	3201      	adds	r2, #1
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	e7ae      	b.n	800658c <_dtoa_r+0x564>
 800662e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006632:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663a:	d1b2      	bne.n	80065a2 <_dtoa_r+0x57a>
 800663c:	e7d3      	b.n	80065e6 <_dtoa_r+0x5be>
 800663e:	bf00      	nop
 8006640:	08008c78 	.word	0x08008c78
 8006644:	08008c50 	.word	0x08008c50
 8006648:	9907      	ldr	r1, [sp, #28]
 800664a:	2900      	cmp	r1, #0
 800664c:	f000 80d0 	beq.w	80067f0 <_dtoa_r+0x7c8>
 8006650:	9906      	ldr	r1, [sp, #24]
 8006652:	2901      	cmp	r1, #1
 8006654:	f300 80b4 	bgt.w	80067c0 <_dtoa_r+0x798>
 8006658:	990a      	ldr	r1, [sp, #40]	; 0x28
 800665a:	2900      	cmp	r1, #0
 800665c:	f000 80ac 	beq.w	80067b8 <_dtoa_r+0x790>
 8006660:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006664:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006668:	461c      	mov	r4, r3
 800666a:	930a      	str	r3, [sp, #40]	; 0x28
 800666c:	9b04      	ldr	r3, [sp, #16]
 800666e:	4413      	add	r3, r2
 8006670:	9304      	str	r3, [sp, #16]
 8006672:	9b05      	ldr	r3, [sp, #20]
 8006674:	2101      	movs	r1, #1
 8006676:	4413      	add	r3, r2
 8006678:	4630      	mov	r0, r6
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	f001 f958 	bl	8007930 <__i2b>
 8006680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006682:	4607      	mov	r7, r0
 8006684:	f1b8 0f00 	cmp.w	r8, #0
 8006688:	dd0d      	ble.n	80066a6 <_dtoa_r+0x67e>
 800668a:	9a05      	ldr	r2, [sp, #20]
 800668c:	2a00      	cmp	r2, #0
 800668e:	dd0a      	ble.n	80066a6 <_dtoa_r+0x67e>
 8006690:	4542      	cmp	r2, r8
 8006692:	9904      	ldr	r1, [sp, #16]
 8006694:	bfa8      	it	ge
 8006696:	4642      	movge	r2, r8
 8006698:	1a89      	subs	r1, r1, r2
 800669a:	9104      	str	r1, [sp, #16]
 800669c:	9905      	ldr	r1, [sp, #20]
 800669e:	eba8 0802 	sub.w	r8, r8, r2
 80066a2:	1a8a      	subs	r2, r1, r2
 80066a4:	9205      	str	r2, [sp, #20]
 80066a6:	b303      	cbz	r3, 80066ea <_dtoa_r+0x6c2>
 80066a8:	9a07      	ldr	r2, [sp, #28]
 80066aa:	2a00      	cmp	r2, #0
 80066ac:	f000 80a5 	beq.w	80067fa <_dtoa_r+0x7d2>
 80066b0:	2c00      	cmp	r4, #0
 80066b2:	dd13      	ble.n	80066dc <_dtoa_r+0x6b4>
 80066b4:	4639      	mov	r1, r7
 80066b6:	4622      	mov	r2, r4
 80066b8:	4630      	mov	r0, r6
 80066ba:	930d      	str	r3, [sp, #52]	; 0x34
 80066bc:	f001 f9f8 	bl	8007ab0 <__pow5mult>
 80066c0:	462a      	mov	r2, r5
 80066c2:	4601      	mov	r1, r0
 80066c4:	4607      	mov	r7, r0
 80066c6:	4630      	mov	r0, r6
 80066c8:	f001 f948 	bl	800795c <__multiply>
 80066cc:	4629      	mov	r1, r5
 80066ce:	900a      	str	r0, [sp, #40]	; 0x28
 80066d0:	4630      	mov	r0, r6
 80066d2:	f001 f82b 	bl	800772c <_Bfree>
 80066d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066da:	4615      	mov	r5, r2
 80066dc:	1b1a      	subs	r2, r3, r4
 80066de:	d004      	beq.n	80066ea <_dtoa_r+0x6c2>
 80066e0:	4629      	mov	r1, r5
 80066e2:	4630      	mov	r0, r6
 80066e4:	f001 f9e4 	bl	8007ab0 <__pow5mult>
 80066e8:	4605      	mov	r5, r0
 80066ea:	2101      	movs	r1, #1
 80066ec:	4630      	mov	r0, r6
 80066ee:	f001 f91f 	bl	8007930 <__i2b>
 80066f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	f340 8081 	ble.w	80067fe <_dtoa_r+0x7d6>
 80066fc:	461a      	mov	r2, r3
 80066fe:	4601      	mov	r1, r0
 8006700:	4630      	mov	r0, r6
 8006702:	f001 f9d5 	bl	8007ab0 <__pow5mult>
 8006706:	9b06      	ldr	r3, [sp, #24]
 8006708:	2b01      	cmp	r3, #1
 800670a:	4604      	mov	r4, r0
 800670c:	dd7a      	ble.n	8006804 <_dtoa_r+0x7dc>
 800670e:	2300      	movs	r3, #0
 8006710:	930a      	str	r3, [sp, #40]	; 0x28
 8006712:	6922      	ldr	r2, [r4, #16]
 8006714:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006718:	6910      	ldr	r0, [r2, #16]
 800671a:	f001 f8b9 	bl	8007890 <__hi0bits>
 800671e:	f1c0 0020 	rsb	r0, r0, #32
 8006722:	9b05      	ldr	r3, [sp, #20]
 8006724:	4418      	add	r0, r3
 8006726:	f010 001f 	ands.w	r0, r0, #31
 800672a:	f000 808c 	beq.w	8006846 <_dtoa_r+0x81e>
 800672e:	f1c0 0220 	rsb	r2, r0, #32
 8006732:	2a04      	cmp	r2, #4
 8006734:	f340 8085 	ble.w	8006842 <_dtoa_r+0x81a>
 8006738:	f1c0 001c 	rsb	r0, r0, #28
 800673c:	9b04      	ldr	r3, [sp, #16]
 800673e:	4403      	add	r3, r0
 8006740:	9304      	str	r3, [sp, #16]
 8006742:	9b05      	ldr	r3, [sp, #20]
 8006744:	4403      	add	r3, r0
 8006746:	4480      	add	r8, r0
 8006748:	9305      	str	r3, [sp, #20]
 800674a:	9b04      	ldr	r3, [sp, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	dd05      	ble.n	800675c <_dtoa_r+0x734>
 8006750:	4629      	mov	r1, r5
 8006752:	461a      	mov	r2, r3
 8006754:	4630      	mov	r0, r6
 8006756:	f001 fa05 	bl	8007b64 <__lshift>
 800675a:	4605      	mov	r5, r0
 800675c:	9b05      	ldr	r3, [sp, #20]
 800675e:	2b00      	cmp	r3, #0
 8006760:	dd05      	ble.n	800676e <_dtoa_r+0x746>
 8006762:	4621      	mov	r1, r4
 8006764:	461a      	mov	r2, r3
 8006766:	4630      	mov	r0, r6
 8006768:	f001 f9fc 	bl	8007b64 <__lshift>
 800676c:	4604      	mov	r4, r0
 800676e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d06a      	beq.n	800684a <_dtoa_r+0x822>
 8006774:	4621      	mov	r1, r4
 8006776:	4628      	mov	r0, r5
 8006778:	f001 fa64 	bl	8007c44 <__mcmp>
 800677c:	2800      	cmp	r0, #0
 800677e:	da64      	bge.n	800684a <_dtoa_r+0x822>
 8006780:	2300      	movs	r3, #0
 8006782:	4629      	mov	r1, r5
 8006784:	220a      	movs	r2, #10
 8006786:	4630      	mov	r0, r6
 8006788:	f000 fff2 	bl	8007770 <__multadd>
 800678c:	9b07      	ldr	r3, [sp, #28]
 800678e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006792:	4605      	mov	r5, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8191 	beq.w	8006abc <_dtoa_r+0xa94>
 800679a:	4639      	mov	r1, r7
 800679c:	2300      	movs	r3, #0
 800679e:	220a      	movs	r2, #10
 80067a0:	4630      	mov	r0, r6
 80067a2:	f000 ffe5 	bl	8007770 <__multadd>
 80067a6:	f1ba 0f00 	cmp.w	sl, #0
 80067aa:	4607      	mov	r7, r0
 80067ac:	f300 808d 	bgt.w	80068ca <_dtoa_r+0x8a2>
 80067b0:	9b06      	ldr	r3, [sp, #24]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	dc50      	bgt.n	8006858 <_dtoa_r+0x830>
 80067b6:	e088      	b.n	80068ca <_dtoa_r+0x8a2>
 80067b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80067be:	e751      	b.n	8006664 <_dtoa_r+0x63c>
 80067c0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	bfbf      	itttt	lt
 80067c8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80067ca:	1ae3      	sublt	r3, r4, r3
 80067cc:	18d2      	addlt	r2, r2, r3
 80067ce:	9209      	strlt	r2, [sp, #36]	; 0x24
 80067d0:	bfb6      	itet	lt
 80067d2:	4623      	movlt	r3, r4
 80067d4:	1b1c      	subge	r4, r3, r4
 80067d6:	2400      	movlt	r4, #0
 80067d8:	f1b9 0f00 	cmp.w	r9, #0
 80067dc:	bfb5      	itete	lt
 80067de:	9a04      	ldrlt	r2, [sp, #16]
 80067e0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80067e4:	eba2 0809 	sublt.w	r8, r2, r9
 80067e8:	464a      	movge	r2, r9
 80067ea:	bfb8      	it	lt
 80067ec:	2200      	movlt	r2, #0
 80067ee:	e73c      	b.n	800666a <_dtoa_r+0x642>
 80067f0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80067f4:	9f07      	ldr	r7, [sp, #28]
 80067f6:	461c      	mov	r4, r3
 80067f8:	e744      	b.n	8006684 <_dtoa_r+0x65c>
 80067fa:	461a      	mov	r2, r3
 80067fc:	e770      	b.n	80066e0 <_dtoa_r+0x6b8>
 80067fe:	9b06      	ldr	r3, [sp, #24]
 8006800:	2b01      	cmp	r3, #1
 8006802:	dc18      	bgt.n	8006836 <_dtoa_r+0x80e>
 8006804:	9b02      	ldr	r3, [sp, #8]
 8006806:	b9b3      	cbnz	r3, 8006836 <_dtoa_r+0x80e>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800680e:	b9a2      	cbnz	r2, 800683a <_dtoa_r+0x812>
 8006810:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006814:	0d12      	lsrs	r2, r2, #20
 8006816:	0512      	lsls	r2, r2, #20
 8006818:	b18a      	cbz	r2, 800683e <_dtoa_r+0x816>
 800681a:	9b04      	ldr	r3, [sp, #16]
 800681c:	3301      	adds	r3, #1
 800681e:	9304      	str	r3, [sp, #16]
 8006820:	9b05      	ldr	r3, [sp, #20]
 8006822:	3301      	adds	r3, #1
 8006824:	9305      	str	r3, [sp, #20]
 8006826:	2301      	movs	r3, #1
 8006828:	930a      	str	r3, [sp, #40]	; 0x28
 800682a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	f47f af70 	bne.w	8006712 <_dtoa_r+0x6ea>
 8006832:	2001      	movs	r0, #1
 8006834:	e775      	b.n	8006722 <_dtoa_r+0x6fa>
 8006836:	2300      	movs	r3, #0
 8006838:	e7f6      	b.n	8006828 <_dtoa_r+0x800>
 800683a:	9b02      	ldr	r3, [sp, #8]
 800683c:	e7f4      	b.n	8006828 <_dtoa_r+0x800>
 800683e:	920a      	str	r2, [sp, #40]	; 0x28
 8006840:	e7f3      	b.n	800682a <_dtoa_r+0x802>
 8006842:	d082      	beq.n	800674a <_dtoa_r+0x722>
 8006844:	4610      	mov	r0, r2
 8006846:	301c      	adds	r0, #28
 8006848:	e778      	b.n	800673c <_dtoa_r+0x714>
 800684a:	f1b9 0f00 	cmp.w	r9, #0
 800684e:	dc37      	bgt.n	80068c0 <_dtoa_r+0x898>
 8006850:	9b06      	ldr	r3, [sp, #24]
 8006852:	2b02      	cmp	r3, #2
 8006854:	dd34      	ble.n	80068c0 <_dtoa_r+0x898>
 8006856:	46ca      	mov	sl, r9
 8006858:	f1ba 0f00 	cmp.w	sl, #0
 800685c:	d10d      	bne.n	800687a <_dtoa_r+0x852>
 800685e:	4621      	mov	r1, r4
 8006860:	4653      	mov	r3, sl
 8006862:	2205      	movs	r2, #5
 8006864:	4630      	mov	r0, r6
 8006866:	f000 ff83 	bl	8007770 <__multadd>
 800686a:	4601      	mov	r1, r0
 800686c:	4604      	mov	r4, r0
 800686e:	4628      	mov	r0, r5
 8006870:	f001 f9e8 	bl	8007c44 <__mcmp>
 8006874:	2800      	cmp	r0, #0
 8006876:	f73f adeb 	bgt.w	8006450 <_dtoa_r+0x428>
 800687a:	9b08      	ldr	r3, [sp, #32]
 800687c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006880:	ea6f 0b03 	mvn.w	fp, r3
 8006884:	f04f 0900 	mov.w	r9, #0
 8006888:	4621      	mov	r1, r4
 800688a:	4630      	mov	r0, r6
 800688c:	f000 ff4e 	bl	800772c <_Bfree>
 8006890:	2f00      	cmp	r7, #0
 8006892:	f43f aea8 	beq.w	80065e6 <_dtoa_r+0x5be>
 8006896:	f1b9 0f00 	cmp.w	r9, #0
 800689a:	d005      	beq.n	80068a8 <_dtoa_r+0x880>
 800689c:	45b9      	cmp	r9, r7
 800689e:	d003      	beq.n	80068a8 <_dtoa_r+0x880>
 80068a0:	4649      	mov	r1, r9
 80068a2:	4630      	mov	r0, r6
 80068a4:	f000 ff42 	bl	800772c <_Bfree>
 80068a8:	4639      	mov	r1, r7
 80068aa:	4630      	mov	r0, r6
 80068ac:	f000 ff3e 	bl	800772c <_Bfree>
 80068b0:	e699      	b.n	80065e6 <_dtoa_r+0x5be>
 80068b2:	2400      	movs	r4, #0
 80068b4:	4627      	mov	r7, r4
 80068b6:	e7e0      	b.n	800687a <_dtoa_r+0x852>
 80068b8:	46bb      	mov	fp, r7
 80068ba:	4604      	mov	r4, r0
 80068bc:	4607      	mov	r7, r0
 80068be:	e5c7      	b.n	8006450 <_dtoa_r+0x428>
 80068c0:	9b07      	ldr	r3, [sp, #28]
 80068c2:	46ca      	mov	sl, r9
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8100 	beq.w	8006aca <_dtoa_r+0xaa2>
 80068ca:	f1b8 0f00 	cmp.w	r8, #0
 80068ce:	dd05      	ble.n	80068dc <_dtoa_r+0x8b4>
 80068d0:	4639      	mov	r1, r7
 80068d2:	4642      	mov	r2, r8
 80068d4:	4630      	mov	r0, r6
 80068d6:	f001 f945 	bl	8007b64 <__lshift>
 80068da:	4607      	mov	r7, r0
 80068dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d05d      	beq.n	800699e <_dtoa_r+0x976>
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	4630      	mov	r0, r6
 80068e6:	f000 fee1 	bl	80076ac <_Balloc>
 80068ea:	4680      	mov	r8, r0
 80068ec:	b928      	cbnz	r0, 80068fa <_dtoa_r+0x8d2>
 80068ee:	4b82      	ldr	r3, [pc, #520]	; (8006af8 <_dtoa_r+0xad0>)
 80068f0:	4602      	mov	r2, r0
 80068f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80068f6:	f7ff bbaf 	b.w	8006058 <_dtoa_r+0x30>
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	3202      	adds	r2, #2
 80068fe:	0092      	lsls	r2, r2, #2
 8006900:	f107 010c 	add.w	r1, r7, #12
 8006904:	300c      	adds	r0, #12
 8006906:	f000 fea9 	bl	800765c <memcpy>
 800690a:	2201      	movs	r2, #1
 800690c:	4641      	mov	r1, r8
 800690e:	4630      	mov	r0, r6
 8006910:	f001 f928 	bl	8007b64 <__lshift>
 8006914:	9b01      	ldr	r3, [sp, #4]
 8006916:	3301      	adds	r3, #1
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	9b01      	ldr	r3, [sp, #4]
 800691c:	4453      	add	r3, sl
 800691e:	9308      	str	r3, [sp, #32]
 8006920:	9b02      	ldr	r3, [sp, #8]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	46b9      	mov	r9, r7
 8006928:	9307      	str	r3, [sp, #28]
 800692a:	4607      	mov	r7, r0
 800692c:	9b04      	ldr	r3, [sp, #16]
 800692e:	4621      	mov	r1, r4
 8006930:	3b01      	subs	r3, #1
 8006932:	4628      	mov	r0, r5
 8006934:	9302      	str	r3, [sp, #8]
 8006936:	f7ff faea 	bl	8005f0e <quorem>
 800693a:	4603      	mov	r3, r0
 800693c:	3330      	adds	r3, #48	; 0x30
 800693e:	9005      	str	r0, [sp, #20]
 8006940:	4649      	mov	r1, r9
 8006942:	4628      	mov	r0, r5
 8006944:	9309      	str	r3, [sp, #36]	; 0x24
 8006946:	f001 f97d 	bl	8007c44 <__mcmp>
 800694a:	463a      	mov	r2, r7
 800694c:	4682      	mov	sl, r0
 800694e:	4621      	mov	r1, r4
 8006950:	4630      	mov	r0, r6
 8006952:	f001 f993 	bl	8007c7c <__mdiff>
 8006956:	68c2      	ldr	r2, [r0, #12]
 8006958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695a:	4680      	mov	r8, r0
 800695c:	bb0a      	cbnz	r2, 80069a2 <_dtoa_r+0x97a>
 800695e:	4601      	mov	r1, r0
 8006960:	4628      	mov	r0, r5
 8006962:	f001 f96f 	bl	8007c44 <__mcmp>
 8006966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006968:	4602      	mov	r2, r0
 800696a:	4641      	mov	r1, r8
 800696c:	4630      	mov	r0, r6
 800696e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006972:	f000 fedb 	bl	800772c <_Bfree>
 8006976:	9b06      	ldr	r3, [sp, #24]
 8006978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800697a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800697e:	ea43 0102 	orr.w	r1, r3, r2
 8006982:	9b07      	ldr	r3, [sp, #28]
 8006984:	430b      	orrs	r3, r1
 8006986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006988:	d10d      	bne.n	80069a6 <_dtoa_r+0x97e>
 800698a:	2b39      	cmp	r3, #57	; 0x39
 800698c:	d029      	beq.n	80069e2 <_dtoa_r+0x9ba>
 800698e:	f1ba 0f00 	cmp.w	sl, #0
 8006992:	dd01      	ble.n	8006998 <_dtoa_r+0x970>
 8006994:	9b05      	ldr	r3, [sp, #20]
 8006996:	3331      	adds	r3, #49	; 0x31
 8006998:	9a02      	ldr	r2, [sp, #8]
 800699a:	7013      	strb	r3, [r2, #0]
 800699c:	e774      	b.n	8006888 <_dtoa_r+0x860>
 800699e:	4638      	mov	r0, r7
 80069a0:	e7b8      	b.n	8006914 <_dtoa_r+0x8ec>
 80069a2:	2201      	movs	r2, #1
 80069a4:	e7e1      	b.n	800696a <_dtoa_r+0x942>
 80069a6:	f1ba 0f00 	cmp.w	sl, #0
 80069aa:	db06      	blt.n	80069ba <_dtoa_r+0x992>
 80069ac:	9906      	ldr	r1, [sp, #24]
 80069ae:	ea41 0a0a 	orr.w	sl, r1, sl
 80069b2:	9907      	ldr	r1, [sp, #28]
 80069b4:	ea5a 0101 	orrs.w	r1, sl, r1
 80069b8:	d120      	bne.n	80069fc <_dtoa_r+0x9d4>
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	ddec      	ble.n	8006998 <_dtoa_r+0x970>
 80069be:	4629      	mov	r1, r5
 80069c0:	2201      	movs	r2, #1
 80069c2:	4630      	mov	r0, r6
 80069c4:	9304      	str	r3, [sp, #16]
 80069c6:	f001 f8cd 	bl	8007b64 <__lshift>
 80069ca:	4621      	mov	r1, r4
 80069cc:	4605      	mov	r5, r0
 80069ce:	f001 f939 	bl	8007c44 <__mcmp>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	9b04      	ldr	r3, [sp, #16]
 80069d6:	dc02      	bgt.n	80069de <_dtoa_r+0x9b6>
 80069d8:	d1de      	bne.n	8006998 <_dtoa_r+0x970>
 80069da:	07da      	lsls	r2, r3, #31
 80069dc:	d5dc      	bpl.n	8006998 <_dtoa_r+0x970>
 80069de:	2b39      	cmp	r3, #57	; 0x39
 80069e0:	d1d8      	bne.n	8006994 <_dtoa_r+0x96c>
 80069e2:	9a02      	ldr	r2, [sp, #8]
 80069e4:	2339      	movs	r3, #57	; 0x39
 80069e6:	7013      	strb	r3, [r2, #0]
 80069e8:	4643      	mov	r3, r8
 80069ea:	4698      	mov	r8, r3
 80069ec:	3b01      	subs	r3, #1
 80069ee:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80069f2:	2a39      	cmp	r2, #57	; 0x39
 80069f4:	d051      	beq.n	8006a9a <_dtoa_r+0xa72>
 80069f6:	3201      	adds	r2, #1
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	e745      	b.n	8006888 <_dtoa_r+0x860>
 80069fc:	2a00      	cmp	r2, #0
 80069fe:	dd03      	ble.n	8006a08 <_dtoa_r+0x9e0>
 8006a00:	2b39      	cmp	r3, #57	; 0x39
 8006a02:	d0ee      	beq.n	80069e2 <_dtoa_r+0x9ba>
 8006a04:	3301      	adds	r3, #1
 8006a06:	e7c7      	b.n	8006998 <_dtoa_r+0x970>
 8006a08:	9a04      	ldr	r2, [sp, #16]
 8006a0a:	9908      	ldr	r1, [sp, #32]
 8006a0c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a10:	428a      	cmp	r2, r1
 8006a12:	d02b      	beq.n	8006a6c <_dtoa_r+0xa44>
 8006a14:	4629      	mov	r1, r5
 8006a16:	2300      	movs	r3, #0
 8006a18:	220a      	movs	r2, #10
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f000 fea8 	bl	8007770 <__multadd>
 8006a20:	45b9      	cmp	r9, r7
 8006a22:	4605      	mov	r5, r0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	f04f 020a 	mov.w	r2, #10
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4630      	mov	r0, r6
 8006a30:	d107      	bne.n	8006a42 <_dtoa_r+0xa1a>
 8006a32:	f000 fe9d 	bl	8007770 <__multadd>
 8006a36:	4681      	mov	r9, r0
 8006a38:	4607      	mov	r7, r0
 8006a3a:	9b04      	ldr	r3, [sp, #16]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	9304      	str	r3, [sp, #16]
 8006a40:	e774      	b.n	800692c <_dtoa_r+0x904>
 8006a42:	f000 fe95 	bl	8007770 <__multadd>
 8006a46:	4639      	mov	r1, r7
 8006a48:	4681      	mov	r9, r0
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	220a      	movs	r2, #10
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f000 fe8e 	bl	8007770 <__multadd>
 8006a54:	4607      	mov	r7, r0
 8006a56:	e7f0      	b.n	8006a3a <_dtoa_r+0xa12>
 8006a58:	f1ba 0f00 	cmp.w	sl, #0
 8006a5c:	9a01      	ldr	r2, [sp, #4]
 8006a5e:	bfcc      	ite	gt
 8006a60:	46d0      	movgt	r8, sl
 8006a62:	f04f 0801 	movle.w	r8, #1
 8006a66:	4490      	add	r8, r2
 8006a68:	f04f 0900 	mov.w	r9, #0
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	2201      	movs	r2, #1
 8006a70:	4630      	mov	r0, r6
 8006a72:	9302      	str	r3, [sp, #8]
 8006a74:	f001 f876 	bl	8007b64 <__lshift>
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	f001 f8e2 	bl	8007c44 <__mcmp>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	dcb1      	bgt.n	80069e8 <_dtoa_r+0x9c0>
 8006a84:	d102      	bne.n	8006a8c <_dtoa_r+0xa64>
 8006a86:	9b02      	ldr	r3, [sp, #8]
 8006a88:	07db      	lsls	r3, r3, #31
 8006a8a:	d4ad      	bmi.n	80069e8 <_dtoa_r+0x9c0>
 8006a8c:	4643      	mov	r3, r8
 8006a8e:	4698      	mov	r8, r3
 8006a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a94:	2a30      	cmp	r2, #48	; 0x30
 8006a96:	d0fa      	beq.n	8006a8e <_dtoa_r+0xa66>
 8006a98:	e6f6      	b.n	8006888 <_dtoa_r+0x860>
 8006a9a:	9a01      	ldr	r2, [sp, #4]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d1a4      	bne.n	80069ea <_dtoa_r+0x9c2>
 8006aa0:	f10b 0b01 	add.w	fp, fp, #1
 8006aa4:	2331      	movs	r3, #49	; 0x31
 8006aa6:	e778      	b.n	800699a <_dtoa_r+0x972>
 8006aa8:	4b14      	ldr	r3, [pc, #80]	; (8006afc <_dtoa_r+0xad4>)
 8006aaa:	f7ff bb27 	b.w	80060fc <_dtoa_r+0xd4>
 8006aae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f47f ab03 	bne.w	80060bc <_dtoa_r+0x94>
 8006ab6:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <_dtoa_r+0xad8>)
 8006ab8:	f7ff bb20 	b.w	80060fc <_dtoa_r+0xd4>
 8006abc:	f1ba 0f00 	cmp.w	sl, #0
 8006ac0:	dc03      	bgt.n	8006aca <_dtoa_r+0xaa2>
 8006ac2:	9b06      	ldr	r3, [sp, #24]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	f73f aec7 	bgt.w	8006858 <_dtoa_r+0x830>
 8006aca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f7ff fa1c 	bl	8005f0e <quorem>
 8006ad6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ada:	f808 3b01 	strb.w	r3, [r8], #1
 8006ade:	9a01      	ldr	r2, [sp, #4]
 8006ae0:	eba8 0202 	sub.w	r2, r8, r2
 8006ae4:	4592      	cmp	sl, r2
 8006ae6:	ddb7      	ble.n	8006a58 <_dtoa_r+0xa30>
 8006ae8:	4629      	mov	r1, r5
 8006aea:	2300      	movs	r3, #0
 8006aec:	220a      	movs	r2, #10
 8006aee:	4630      	mov	r0, r6
 8006af0:	f000 fe3e 	bl	8007770 <__multadd>
 8006af4:	4605      	mov	r5, r0
 8006af6:	e7ea      	b.n	8006ace <_dtoa_r+0xaa6>
 8006af8:	08008b00 	.word	0x08008b00
 8006afc:	08008905 	.word	0x08008905
 8006b00:	08008a81 	.word	0x08008a81

08006b04 <__sflush_r>:
 8006b04:	898a      	ldrh	r2, [r1, #12]
 8006b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	0710      	lsls	r0, r2, #28
 8006b0e:	460c      	mov	r4, r1
 8006b10:	d458      	bmi.n	8006bc4 <__sflush_r+0xc0>
 8006b12:	684b      	ldr	r3, [r1, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dc05      	bgt.n	8006b24 <__sflush_r+0x20>
 8006b18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dc02      	bgt.n	8006b24 <__sflush_r+0x20>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b26:	2e00      	cmp	r6, #0
 8006b28:	d0f9      	beq.n	8006b1e <__sflush_r+0x1a>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b30:	682f      	ldr	r7, [r5, #0]
 8006b32:	602b      	str	r3, [r5, #0]
 8006b34:	d032      	beq.n	8006b9c <__sflush_r+0x98>
 8006b36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	075a      	lsls	r2, r3, #29
 8006b3c:	d505      	bpl.n	8006b4a <__sflush_r+0x46>
 8006b3e:	6863      	ldr	r3, [r4, #4]
 8006b40:	1ac0      	subs	r0, r0, r3
 8006b42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b44:	b10b      	cbz	r3, 8006b4a <__sflush_r+0x46>
 8006b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b48:	1ac0      	subs	r0, r0, r3
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b50:	6a21      	ldr	r1, [r4, #32]
 8006b52:	4628      	mov	r0, r5
 8006b54:	47b0      	blx	r6
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	d106      	bne.n	8006b6a <__sflush_r+0x66>
 8006b5c:	6829      	ldr	r1, [r5, #0]
 8006b5e:	291d      	cmp	r1, #29
 8006b60:	d82c      	bhi.n	8006bbc <__sflush_r+0xb8>
 8006b62:	4a2a      	ldr	r2, [pc, #168]	; (8006c0c <__sflush_r+0x108>)
 8006b64:	40ca      	lsrs	r2, r1
 8006b66:	07d6      	lsls	r6, r2, #31
 8006b68:	d528      	bpl.n	8006bbc <__sflush_r+0xb8>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	6062      	str	r2, [r4, #4]
 8006b6e:	04d9      	lsls	r1, r3, #19
 8006b70:	6922      	ldr	r2, [r4, #16]
 8006b72:	6022      	str	r2, [r4, #0]
 8006b74:	d504      	bpl.n	8006b80 <__sflush_r+0x7c>
 8006b76:	1c42      	adds	r2, r0, #1
 8006b78:	d101      	bne.n	8006b7e <__sflush_r+0x7a>
 8006b7a:	682b      	ldr	r3, [r5, #0]
 8006b7c:	b903      	cbnz	r3, 8006b80 <__sflush_r+0x7c>
 8006b7e:	6560      	str	r0, [r4, #84]	; 0x54
 8006b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b82:	602f      	str	r7, [r5, #0]
 8006b84:	2900      	cmp	r1, #0
 8006b86:	d0ca      	beq.n	8006b1e <__sflush_r+0x1a>
 8006b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b8c:	4299      	cmp	r1, r3
 8006b8e:	d002      	beq.n	8006b96 <__sflush_r+0x92>
 8006b90:	4628      	mov	r0, r5
 8006b92:	f001 fa5f 	bl	8008054 <_free_r>
 8006b96:	2000      	movs	r0, #0
 8006b98:	6360      	str	r0, [r4, #52]	; 0x34
 8006b9a:	e7c1      	b.n	8006b20 <__sflush_r+0x1c>
 8006b9c:	6a21      	ldr	r1, [r4, #32]
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	47b0      	blx	r6
 8006ba4:	1c41      	adds	r1, r0, #1
 8006ba6:	d1c7      	bne.n	8006b38 <__sflush_r+0x34>
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0c4      	beq.n	8006b38 <__sflush_r+0x34>
 8006bae:	2b1d      	cmp	r3, #29
 8006bb0:	d001      	beq.n	8006bb6 <__sflush_r+0xb2>
 8006bb2:	2b16      	cmp	r3, #22
 8006bb4:	d101      	bne.n	8006bba <__sflush_r+0xb6>
 8006bb6:	602f      	str	r7, [r5, #0]
 8006bb8:	e7b1      	b.n	8006b1e <__sflush_r+0x1a>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc0:	81a3      	strh	r3, [r4, #12]
 8006bc2:	e7ad      	b.n	8006b20 <__sflush_r+0x1c>
 8006bc4:	690f      	ldr	r7, [r1, #16]
 8006bc6:	2f00      	cmp	r7, #0
 8006bc8:	d0a9      	beq.n	8006b1e <__sflush_r+0x1a>
 8006bca:	0793      	lsls	r3, r2, #30
 8006bcc:	680e      	ldr	r6, [r1, #0]
 8006bce:	bf08      	it	eq
 8006bd0:	694b      	ldreq	r3, [r1, #20]
 8006bd2:	600f      	str	r7, [r1, #0]
 8006bd4:	bf18      	it	ne
 8006bd6:	2300      	movne	r3, #0
 8006bd8:	eba6 0807 	sub.w	r8, r6, r7
 8006bdc:	608b      	str	r3, [r1, #8]
 8006bde:	f1b8 0f00 	cmp.w	r8, #0
 8006be2:	dd9c      	ble.n	8006b1e <__sflush_r+0x1a>
 8006be4:	6a21      	ldr	r1, [r4, #32]
 8006be6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006be8:	4643      	mov	r3, r8
 8006bea:	463a      	mov	r2, r7
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b0      	blx	r6
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	dc06      	bgt.n	8006c02 <__sflush_r+0xfe>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c00:	e78e      	b.n	8006b20 <__sflush_r+0x1c>
 8006c02:	4407      	add	r7, r0
 8006c04:	eba8 0800 	sub.w	r8, r8, r0
 8006c08:	e7e9      	b.n	8006bde <__sflush_r+0xda>
 8006c0a:	bf00      	nop
 8006c0c:	20400001 	.word	0x20400001

08006c10 <_fflush_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	690b      	ldr	r3, [r1, #16]
 8006c14:	4605      	mov	r5, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	b913      	cbnz	r3, 8006c20 <_fflush_r+0x10>
 8006c1a:	2500      	movs	r5, #0
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	b118      	cbz	r0, 8006c2a <_fflush_r+0x1a>
 8006c22:	6983      	ldr	r3, [r0, #24]
 8006c24:	b90b      	cbnz	r3, 8006c2a <_fflush_r+0x1a>
 8006c26:	f000 f887 	bl	8006d38 <__sinit>
 8006c2a:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <_fflush_r+0x6c>)
 8006c2c:	429c      	cmp	r4, r3
 8006c2e:	d11b      	bne.n	8006c68 <_fflush_r+0x58>
 8006c30:	686c      	ldr	r4, [r5, #4]
 8006c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0ef      	beq.n	8006c1a <_fflush_r+0xa>
 8006c3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c3c:	07d0      	lsls	r0, r2, #31
 8006c3e:	d404      	bmi.n	8006c4a <_fflush_r+0x3a>
 8006c40:	0599      	lsls	r1, r3, #22
 8006c42:	d402      	bmi.n	8006c4a <_fflush_r+0x3a>
 8006c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c46:	f000 fc88 	bl	800755a <__retarget_lock_acquire_recursive>
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	f7ff ff59 	bl	8006b04 <__sflush_r>
 8006c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c54:	07da      	lsls	r2, r3, #31
 8006c56:	4605      	mov	r5, r0
 8006c58:	d4e0      	bmi.n	8006c1c <_fflush_r+0xc>
 8006c5a:	89a3      	ldrh	r3, [r4, #12]
 8006c5c:	059b      	lsls	r3, r3, #22
 8006c5e:	d4dd      	bmi.n	8006c1c <_fflush_r+0xc>
 8006c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c62:	f000 fc7b 	bl	800755c <__retarget_lock_release_recursive>
 8006c66:	e7d9      	b.n	8006c1c <_fflush_r+0xc>
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <_fflush_r+0x70>)
 8006c6a:	429c      	cmp	r4, r3
 8006c6c:	d101      	bne.n	8006c72 <_fflush_r+0x62>
 8006c6e:	68ac      	ldr	r4, [r5, #8]
 8006c70:	e7df      	b.n	8006c32 <_fflush_r+0x22>
 8006c72:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <_fflush_r+0x74>)
 8006c74:	429c      	cmp	r4, r3
 8006c76:	bf08      	it	eq
 8006c78:	68ec      	ldreq	r4, [r5, #12]
 8006c7a:	e7da      	b.n	8006c32 <_fflush_r+0x22>
 8006c7c:	08008b34 	.word	0x08008b34
 8006c80:	08008b54 	.word	0x08008b54
 8006c84:	08008b14 	.word	0x08008b14

08006c88 <std>:
 8006c88:	2300      	movs	r3, #0
 8006c8a:	b510      	push	{r4, lr}
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c96:	6083      	str	r3, [r0, #8]
 8006c98:	8181      	strh	r1, [r0, #12]
 8006c9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006c9c:	81c2      	strh	r2, [r0, #14]
 8006c9e:	6183      	str	r3, [r0, #24]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	2208      	movs	r2, #8
 8006ca4:	305c      	adds	r0, #92	; 0x5c
 8006ca6:	f7fd fa0d 	bl	80040c4 <memset>
 8006caa:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <std+0x38>)
 8006cac:	6263      	str	r3, [r4, #36]	; 0x24
 8006cae:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <std+0x3c>)
 8006cb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cb2:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <std+0x40>)
 8006cb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cb6:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <std+0x44>)
 8006cb8:	6224      	str	r4, [r4, #32]
 8006cba:	6323      	str	r3, [r4, #48]	; 0x30
 8006cbc:	bd10      	pop	{r4, pc}
 8006cbe:	bf00      	nop
 8006cc0:	080085e1 	.word	0x080085e1
 8006cc4:	08008603 	.word	0x08008603
 8006cc8:	0800863b 	.word	0x0800863b
 8006ccc:	0800865f 	.word	0x0800865f

08006cd0 <_cleanup_r>:
 8006cd0:	4901      	ldr	r1, [pc, #4]	; (8006cd8 <_cleanup_r+0x8>)
 8006cd2:	f000 b8af 	b.w	8006e34 <_fwalk_reent>
 8006cd6:	bf00      	nop
 8006cd8:	08006c11 	.word	0x08006c11

08006cdc <__sfmoreglue>:
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	2268      	movs	r2, #104	; 0x68
 8006ce0:	1e4d      	subs	r5, r1, #1
 8006ce2:	4355      	muls	r5, r2
 8006ce4:	460e      	mov	r6, r1
 8006ce6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cea:	f001 fa1f 	bl	800812c <_malloc_r>
 8006cee:	4604      	mov	r4, r0
 8006cf0:	b140      	cbz	r0, 8006d04 <__sfmoreglue+0x28>
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	e9c0 1600 	strd	r1, r6, [r0]
 8006cf8:	300c      	adds	r0, #12
 8006cfa:	60a0      	str	r0, [r4, #8]
 8006cfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d00:	f7fd f9e0 	bl	80040c4 <memset>
 8006d04:	4620      	mov	r0, r4
 8006d06:	bd70      	pop	{r4, r5, r6, pc}

08006d08 <__sfp_lock_acquire>:
 8006d08:	4801      	ldr	r0, [pc, #4]	; (8006d10 <__sfp_lock_acquire+0x8>)
 8006d0a:	f000 bc26 	b.w	800755a <__retarget_lock_acquire_recursive>
 8006d0e:	bf00      	nop
 8006d10:	20000309 	.word	0x20000309

08006d14 <__sfp_lock_release>:
 8006d14:	4801      	ldr	r0, [pc, #4]	; (8006d1c <__sfp_lock_release+0x8>)
 8006d16:	f000 bc21 	b.w	800755c <__retarget_lock_release_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	20000309 	.word	0x20000309

08006d20 <__sinit_lock_acquire>:
 8006d20:	4801      	ldr	r0, [pc, #4]	; (8006d28 <__sinit_lock_acquire+0x8>)
 8006d22:	f000 bc1a 	b.w	800755a <__retarget_lock_acquire_recursive>
 8006d26:	bf00      	nop
 8006d28:	2000030a 	.word	0x2000030a

08006d2c <__sinit_lock_release>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	; (8006d34 <__sinit_lock_release+0x8>)
 8006d2e:	f000 bc15 	b.w	800755c <__retarget_lock_release_recursive>
 8006d32:	bf00      	nop
 8006d34:	2000030a 	.word	0x2000030a

08006d38 <__sinit>:
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	4604      	mov	r4, r0
 8006d3c:	f7ff fff0 	bl	8006d20 <__sinit_lock_acquire>
 8006d40:	69a3      	ldr	r3, [r4, #24]
 8006d42:	b11b      	cbz	r3, 8006d4c <__sinit+0x14>
 8006d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d48:	f7ff bff0 	b.w	8006d2c <__sinit_lock_release>
 8006d4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d50:	6523      	str	r3, [r4, #80]	; 0x50
 8006d52:	4b13      	ldr	r3, [pc, #76]	; (8006da0 <__sinit+0x68>)
 8006d54:	4a13      	ldr	r2, [pc, #76]	; (8006da4 <__sinit+0x6c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d5a:	42a3      	cmp	r3, r4
 8006d5c:	bf04      	itt	eq
 8006d5e:	2301      	moveq	r3, #1
 8006d60:	61a3      	streq	r3, [r4, #24]
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 f820 	bl	8006da8 <__sfp>
 8006d68:	6060      	str	r0, [r4, #4]
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 f81c 	bl	8006da8 <__sfp>
 8006d70:	60a0      	str	r0, [r4, #8]
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 f818 	bl	8006da8 <__sfp>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	60e0      	str	r0, [r4, #12]
 8006d7c:	2104      	movs	r1, #4
 8006d7e:	6860      	ldr	r0, [r4, #4]
 8006d80:	f7ff ff82 	bl	8006c88 <std>
 8006d84:	68a0      	ldr	r0, [r4, #8]
 8006d86:	2201      	movs	r2, #1
 8006d88:	2109      	movs	r1, #9
 8006d8a:	f7ff ff7d 	bl	8006c88 <std>
 8006d8e:	68e0      	ldr	r0, [r4, #12]
 8006d90:	2202      	movs	r2, #2
 8006d92:	2112      	movs	r1, #18
 8006d94:	f7ff ff78 	bl	8006c88 <std>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	61a3      	str	r3, [r4, #24]
 8006d9c:	e7d2      	b.n	8006d44 <__sinit+0xc>
 8006d9e:	bf00      	nop
 8006da0:	080088e0 	.word	0x080088e0
 8006da4:	08006cd1 	.word	0x08006cd1

08006da8 <__sfp>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	4607      	mov	r7, r0
 8006dac:	f7ff ffac 	bl	8006d08 <__sfp_lock_acquire>
 8006db0:	4b1e      	ldr	r3, [pc, #120]	; (8006e2c <__sfp+0x84>)
 8006db2:	681e      	ldr	r6, [r3, #0]
 8006db4:	69b3      	ldr	r3, [r6, #24]
 8006db6:	b913      	cbnz	r3, 8006dbe <__sfp+0x16>
 8006db8:	4630      	mov	r0, r6
 8006dba:	f7ff ffbd 	bl	8006d38 <__sinit>
 8006dbe:	3648      	adds	r6, #72	; 0x48
 8006dc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	d503      	bpl.n	8006dd0 <__sfp+0x28>
 8006dc8:	6833      	ldr	r3, [r6, #0]
 8006dca:	b30b      	cbz	r3, 8006e10 <__sfp+0x68>
 8006dcc:	6836      	ldr	r6, [r6, #0]
 8006dce:	e7f7      	b.n	8006dc0 <__sfp+0x18>
 8006dd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006dd4:	b9d5      	cbnz	r5, 8006e0c <__sfp+0x64>
 8006dd6:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <__sfp+0x88>)
 8006dd8:	60e3      	str	r3, [r4, #12]
 8006dda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dde:	6665      	str	r5, [r4, #100]	; 0x64
 8006de0:	f000 fbba 	bl	8007558 <__retarget_lock_init_recursive>
 8006de4:	f7ff ff96 	bl	8006d14 <__sfp_lock_release>
 8006de8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006df0:	6025      	str	r5, [r4, #0]
 8006df2:	61a5      	str	r5, [r4, #24]
 8006df4:	2208      	movs	r2, #8
 8006df6:	4629      	mov	r1, r5
 8006df8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dfc:	f7fd f962 	bl	80040c4 <memset>
 8006e00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e08:	4620      	mov	r0, r4
 8006e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e0c:	3468      	adds	r4, #104	; 0x68
 8006e0e:	e7d9      	b.n	8006dc4 <__sfp+0x1c>
 8006e10:	2104      	movs	r1, #4
 8006e12:	4638      	mov	r0, r7
 8006e14:	f7ff ff62 	bl	8006cdc <__sfmoreglue>
 8006e18:	4604      	mov	r4, r0
 8006e1a:	6030      	str	r0, [r6, #0]
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d1d5      	bne.n	8006dcc <__sfp+0x24>
 8006e20:	f7ff ff78 	bl	8006d14 <__sfp_lock_release>
 8006e24:	230c      	movs	r3, #12
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	e7ee      	b.n	8006e08 <__sfp+0x60>
 8006e2a:	bf00      	nop
 8006e2c:	080088e0 	.word	0x080088e0
 8006e30:	ffff0001 	.word	0xffff0001

08006e34 <_fwalk_reent>:
 8006e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e38:	4606      	mov	r6, r0
 8006e3a:	4688      	mov	r8, r1
 8006e3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e40:	2700      	movs	r7, #0
 8006e42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e46:	f1b9 0901 	subs.w	r9, r9, #1
 8006e4a:	d505      	bpl.n	8006e58 <_fwalk_reent+0x24>
 8006e4c:	6824      	ldr	r4, [r4, #0]
 8006e4e:	2c00      	cmp	r4, #0
 8006e50:	d1f7      	bne.n	8006e42 <_fwalk_reent+0xe>
 8006e52:	4638      	mov	r0, r7
 8006e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e58:	89ab      	ldrh	r3, [r5, #12]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d907      	bls.n	8006e6e <_fwalk_reent+0x3a>
 8006e5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e62:	3301      	adds	r3, #1
 8006e64:	d003      	beq.n	8006e6e <_fwalk_reent+0x3a>
 8006e66:	4629      	mov	r1, r5
 8006e68:	4630      	mov	r0, r6
 8006e6a:	47c0      	blx	r8
 8006e6c:	4307      	orrs	r7, r0
 8006e6e:	3568      	adds	r5, #104	; 0x68
 8006e70:	e7e9      	b.n	8006e46 <_fwalk_reent+0x12>

08006e72 <rshift>:
 8006e72:	6903      	ldr	r3, [r0, #16]
 8006e74:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e7c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006e80:	f100 0414 	add.w	r4, r0, #20
 8006e84:	dd45      	ble.n	8006f12 <rshift+0xa0>
 8006e86:	f011 011f 	ands.w	r1, r1, #31
 8006e8a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006e8e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006e92:	d10c      	bne.n	8006eae <rshift+0x3c>
 8006e94:	f100 0710 	add.w	r7, r0, #16
 8006e98:	4629      	mov	r1, r5
 8006e9a:	42b1      	cmp	r1, r6
 8006e9c:	d334      	bcc.n	8006f08 <rshift+0x96>
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	1eea      	subs	r2, r5, #3
 8006ea4:	4296      	cmp	r6, r2
 8006ea6:	bf38      	it	cc
 8006ea8:	2300      	movcc	r3, #0
 8006eaa:	4423      	add	r3, r4
 8006eac:	e015      	b.n	8006eda <rshift+0x68>
 8006eae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006eb2:	f1c1 0820 	rsb	r8, r1, #32
 8006eb6:	40cf      	lsrs	r7, r1
 8006eb8:	f105 0e04 	add.w	lr, r5, #4
 8006ebc:	46a1      	mov	r9, r4
 8006ebe:	4576      	cmp	r6, lr
 8006ec0:	46f4      	mov	ip, lr
 8006ec2:	d815      	bhi.n	8006ef0 <rshift+0x7e>
 8006ec4:	1a9a      	subs	r2, r3, r2
 8006ec6:	0092      	lsls	r2, r2, #2
 8006ec8:	3a04      	subs	r2, #4
 8006eca:	3501      	adds	r5, #1
 8006ecc:	42ae      	cmp	r6, r5
 8006ece:	bf38      	it	cc
 8006ed0:	2200      	movcc	r2, #0
 8006ed2:	18a3      	adds	r3, r4, r2
 8006ed4:	50a7      	str	r7, [r4, r2]
 8006ed6:	b107      	cbz	r7, 8006eda <rshift+0x68>
 8006ed8:	3304      	adds	r3, #4
 8006eda:	1b1a      	subs	r2, r3, r4
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ee2:	bf08      	it	eq
 8006ee4:	2300      	moveq	r3, #0
 8006ee6:	6102      	str	r2, [r0, #16]
 8006ee8:	bf08      	it	eq
 8006eea:	6143      	streq	r3, [r0, #20]
 8006eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ef0:	f8dc c000 	ldr.w	ip, [ip]
 8006ef4:	fa0c fc08 	lsl.w	ip, ip, r8
 8006ef8:	ea4c 0707 	orr.w	r7, ip, r7
 8006efc:	f849 7b04 	str.w	r7, [r9], #4
 8006f00:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f04:	40cf      	lsrs	r7, r1
 8006f06:	e7da      	b.n	8006ebe <rshift+0x4c>
 8006f08:	f851 cb04 	ldr.w	ip, [r1], #4
 8006f0c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006f10:	e7c3      	b.n	8006e9a <rshift+0x28>
 8006f12:	4623      	mov	r3, r4
 8006f14:	e7e1      	b.n	8006eda <rshift+0x68>

08006f16 <__hexdig_fun>:
 8006f16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006f1a:	2b09      	cmp	r3, #9
 8006f1c:	d802      	bhi.n	8006f24 <__hexdig_fun+0xe>
 8006f1e:	3820      	subs	r0, #32
 8006f20:	b2c0      	uxtb	r0, r0
 8006f22:	4770      	bx	lr
 8006f24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006f28:	2b05      	cmp	r3, #5
 8006f2a:	d801      	bhi.n	8006f30 <__hexdig_fun+0x1a>
 8006f2c:	3847      	subs	r0, #71	; 0x47
 8006f2e:	e7f7      	b.n	8006f20 <__hexdig_fun+0xa>
 8006f30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006f34:	2b05      	cmp	r3, #5
 8006f36:	d801      	bhi.n	8006f3c <__hexdig_fun+0x26>
 8006f38:	3827      	subs	r0, #39	; 0x27
 8006f3a:	e7f1      	b.n	8006f20 <__hexdig_fun+0xa>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	4770      	bx	lr

08006f40 <__gethex>:
 8006f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	ed2d 8b02 	vpush	{d8}
 8006f48:	b089      	sub	sp, #36	; 0x24
 8006f4a:	ee08 0a10 	vmov	s16, r0
 8006f4e:	9304      	str	r3, [sp, #16]
 8006f50:	4bb4      	ldr	r3, [pc, #720]	; (8007224 <__gethex+0x2e4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	9301      	str	r3, [sp, #4]
 8006f56:	4618      	mov	r0, r3
 8006f58:	468b      	mov	fp, r1
 8006f5a:	4690      	mov	r8, r2
 8006f5c:	f7f9 f970 	bl	8000240 <strlen>
 8006f60:	9b01      	ldr	r3, [sp, #4]
 8006f62:	f8db 2000 	ldr.w	r2, [fp]
 8006f66:	4403      	add	r3, r0
 8006f68:	4682      	mov	sl, r0
 8006f6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006f6e:	9305      	str	r3, [sp, #20]
 8006f70:	1c93      	adds	r3, r2, #2
 8006f72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006f76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006f7a:	32fe      	adds	r2, #254	; 0xfe
 8006f7c:	18d1      	adds	r1, r2, r3
 8006f7e:	461f      	mov	r7, r3
 8006f80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006f84:	9100      	str	r1, [sp, #0]
 8006f86:	2830      	cmp	r0, #48	; 0x30
 8006f88:	d0f8      	beq.n	8006f7c <__gethex+0x3c>
 8006f8a:	f7ff ffc4 	bl	8006f16 <__hexdig_fun>
 8006f8e:	4604      	mov	r4, r0
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d13a      	bne.n	800700a <__gethex+0xca>
 8006f94:	9901      	ldr	r1, [sp, #4]
 8006f96:	4652      	mov	r2, sl
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f001 fb64 	bl	8008666 <strncmp>
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d168      	bne.n	8007076 <__gethex+0x136>
 8006fa4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006fa8:	eb07 060a 	add.w	r6, r7, sl
 8006fac:	f7ff ffb3 	bl	8006f16 <__hexdig_fun>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d062      	beq.n	800707a <__gethex+0x13a>
 8006fb4:	4633      	mov	r3, r6
 8006fb6:	7818      	ldrb	r0, [r3, #0]
 8006fb8:	2830      	cmp	r0, #48	; 0x30
 8006fba:	461f      	mov	r7, r3
 8006fbc:	f103 0301 	add.w	r3, r3, #1
 8006fc0:	d0f9      	beq.n	8006fb6 <__gethex+0x76>
 8006fc2:	f7ff ffa8 	bl	8006f16 <__hexdig_fun>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	fab0 f480 	clz	r4, r0
 8006fcc:	0964      	lsrs	r4, r4, #5
 8006fce:	4635      	mov	r5, r6
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	463a      	mov	r2, r7
 8006fd4:	4616      	mov	r6, r2
 8006fd6:	3201      	adds	r2, #1
 8006fd8:	7830      	ldrb	r0, [r6, #0]
 8006fda:	f7ff ff9c 	bl	8006f16 <__hexdig_fun>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d1f8      	bne.n	8006fd4 <__gethex+0x94>
 8006fe2:	9901      	ldr	r1, [sp, #4]
 8006fe4:	4652      	mov	r2, sl
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f001 fb3d 	bl	8008666 <strncmp>
 8006fec:	b980      	cbnz	r0, 8007010 <__gethex+0xd0>
 8006fee:	b94d      	cbnz	r5, 8007004 <__gethex+0xc4>
 8006ff0:	eb06 050a 	add.w	r5, r6, sl
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4616      	mov	r6, r2
 8006ff8:	3201      	adds	r2, #1
 8006ffa:	7830      	ldrb	r0, [r6, #0]
 8006ffc:	f7ff ff8b 	bl	8006f16 <__hexdig_fun>
 8007000:	2800      	cmp	r0, #0
 8007002:	d1f8      	bne.n	8006ff6 <__gethex+0xb6>
 8007004:	1bad      	subs	r5, r5, r6
 8007006:	00ad      	lsls	r5, r5, #2
 8007008:	e004      	b.n	8007014 <__gethex+0xd4>
 800700a:	2400      	movs	r4, #0
 800700c:	4625      	mov	r5, r4
 800700e:	e7e0      	b.n	8006fd2 <__gethex+0x92>
 8007010:	2d00      	cmp	r5, #0
 8007012:	d1f7      	bne.n	8007004 <__gethex+0xc4>
 8007014:	7833      	ldrb	r3, [r6, #0]
 8007016:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800701a:	2b50      	cmp	r3, #80	; 0x50
 800701c:	d13b      	bne.n	8007096 <__gethex+0x156>
 800701e:	7873      	ldrb	r3, [r6, #1]
 8007020:	2b2b      	cmp	r3, #43	; 0x2b
 8007022:	d02c      	beq.n	800707e <__gethex+0x13e>
 8007024:	2b2d      	cmp	r3, #45	; 0x2d
 8007026:	d02e      	beq.n	8007086 <__gethex+0x146>
 8007028:	1c71      	adds	r1, r6, #1
 800702a:	f04f 0900 	mov.w	r9, #0
 800702e:	7808      	ldrb	r0, [r1, #0]
 8007030:	f7ff ff71 	bl	8006f16 <__hexdig_fun>
 8007034:	1e43      	subs	r3, r0, #1
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b18      	cmp	r3, #24
 800703a:	d82c      	bhi.n	8007096 <__gethex+0x156>
 800703c:	f1a0 0210 	sub.w	r2, r0, #16
 8007040:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007044:	f7ff ff67 	bl	8006f16 <__hexdig_fun>
 8007048:	1e43      	subs	r3, r0, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b18      	cmp	r3, #24
 800704e:	d91d      	bls.n	800708c <__gethex+0x14c>
 8007050:	f1b9 0f00 	cmp.w	r9, #0
 8007054:	d000      	beq.n	8007058 <__gethex+0x118>
 8007056:	4252      	negs	r2, r2
 8007058:	4415      	add	r5, r2
 800705a:	f8cb 1000 	str.w	r1, [fp]
 800705e:	b1e4      	cbz	r4, 800709a <__gethex+0x15a>
 8007060:	9b00      	ldr	r3, [sp, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	bf14      	ite	ne
 8007066:	2700      	movne	r7, #0
 8007068:	2706      	moveq	r7, #6
 800706a:	4638      	mov	r0, r7
 800706c:	b009      	add	sp, #36	; 0x24
 800706e:	ecbd 8b02 	vpop	{d8}
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	463e      	mov	r6, r7
 8007078:	4625      	mov	r5, r4
 800707a:	2401      	movs	r4, #1
 800707c:	e7ca      	b.n	8007014 <__gethex+0xd4>
 800707e:	f04f 0900 	mov.w	r9, #0
 8007082:	1cb1      	adds	r1, r6, #2
 8007084:	e7d3      	b.n	800702e <__gethex+0xee>
 8007086:	f04f 0901 	mov.w	r9, #1
 800708a:	e7fa      	b.n	8007082 <__gethex+0x142>
 800708c:	230a      	movs	r3, #10
 800708e:	fb03 0202 	mla	r2, r3, r2, r0
 8007092:	3a10      	subs	r2, #16
 8007094:	e7d4      	b.n	8007040 <__gethex+0x100>
 8007096:	4631      	mov	r1, r6
 8007098:	e7df      	b.n	800705a <__gethex+0x11a>
 800709a:	1bf3      	subs	r3, r6, r7
 800709c:	3b01      	subs	r3, #1
 800709e:	4621      	mov	r1, r4
 80070a0:	2b07      	cmp	r3, #7
 80070a2:	dc0b      	bgt.n	80070bc <__gethex+0x17c>
 80070a4:	ee18 0a10 	vmov	r0, s16
 80070a8:	f000 fb00 	bl	80076ac <_Balloc>
 80070ac:	4604      	mov	r4, r0
 80070ae:	b940      	cbnz	r0, 80070c2 <__gethex+0x182>
 80070b0:	4b5d      	ldr	r3, [pc, #372]	; (8007228 <__gethex+0x2e8>)
 80070b2:	4602      	mov	r2, r0
 80070b4:	21de      	movs	r1, #222	; 0xde
 80070b6:	485d      	ldr	r0, [pc, #372]	; (800722c <__gethex+0x2ec>)
 80070b8:	f7fc ffaa 	bl	8004010 <__assert_func>
 80070bc:	3101      	adds	r1, #1
 80070be:	105b      	asrs	r3, r3, #1
 80070c0:	e7ee      	b.n	80070a0 <__gethex+0x160>
 80070c2:	f100 0914 	add.w	r9, r0, #20
 80070c6:	f04f 0b00 	mov.w	fp, #0
 80070ca:	f1ca 0301 	rsb	r3, sl, #1
 80070ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80070d2:	f8cd b000 	str.w	fp, [sp]
 80070d6:	9306      	str	r3, [sp, #24]
 80070d8:	42b7      	cmp	r7, r6
 80070da:	d340      	bcc.n	800715e <__gethex+0x21e>
 80070dc:	9802      	ldr	r0, [sp, #8]
 80070de:	9b00      	ldr	r3, [sp, #0]
 80070e0:	f840 3b04 	str.w	r3, [r0], #4
 80070e4:	eba0 0009 	sub.w	r0, r0, r9
 80070e8:	1080      	asrs	r0, r0, #2
 80070ea:	0146      	lsls	r6, r0, #5
 80070ec:	6120      	str	r0, [r4, #16]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fbce 	bl	8007890 <__hi0bits>
 80070f4:	1a30      	subs	r0, r6, r0
 80070f6:	f8d8 6000 	ldr.w	r6, [r8]
 80070fa:	42b0      	cmp	r0, r6
 80070fc:	dd63      	ble.n	80071c6 <__gethex+0x286>
 80070fe:	1b87      	subs	r7, r0, r6
 8007100:	4639      	mov	r1, r7
 8007102:	4620      	mov	r0, r4
 8007104:	f000 ff6f 	bl	8007fe6 <__any_on>
 8007108:	4682      	mov	sl, r0
 800710a:	b1a8      	cbz	r0, 8007138 <__gethex+0x1f8>
 800710c:	1e7b      	subs	r3, r7, #1
 800710e:	1159      	asrs	r1, r3, #5
 8007110:	f003 021f 	and.w	r2, r3, #31
 8007114:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007118:	f04f 0a01 	mov.w	sl, #1
 800711c:	fa0a f202 	lsl.w	r2, sl, r2
 8007120:	420a      	tst	r2, r1
 8007122:	d009      	beq.n	8007138 <__gethex+0x1f8>
 8007124:	4553      	cmp	r3, sl
 8007126:	dd05      	ble.n	8007134 <__gethex+0x1f4>
 8007128:	1eb9      	subs	r1, r7, #2
 800712a:	4620      	mov	r0, r4
 800712c:	f000 ff5b 	bl	8007fe6 <__any_on>
 8007130:	2800      	cmp	r0, #0
 8007132:	d145      	bne.n	80071c0 <__gethex+0x280>
 8007134:	f04f 0a02 	mov.w	sl, #2
 8007138:	4639      	mov	r1, r7
 800713a:	4620      	mov	r0, r4
 800713c:	f7ff fe99 	bl	8006e72 <rshift>
 8007140:	443d      	add	r5, r7
 8007142:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007146:	42ab      	cmp	r3, r5
 8007148:	da4c      	bge.n	80071e4 <__gethex+0x2a4>
 800714a:	ee18 0a10 	vmov	r0, s16
 800714e:	4621      	mov	r1, r4
 8007150:	f000 faec 	bl	800772c <_Bfree>
 8007154:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007156:	2300      	movs	r3, #0
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	27a3      	movs	r7, #163	; 0xa3
 800715c:	e785      	b.n	800706a <__gethex+0x12a>
 800715e:	1e73      	subs	r3, r6, #1
 8007160:	9a05      	ldr	r2, [sp, #20]
 8007162:	9303      	str	r3, [sp, #12]
 8007164:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007168:	4293      	cmp	r3, r2
 800716a:	d019      	beq.n	80071a0 <__gethex+0x260>
 800716c:	f1bb 0f20 	cmp.w	fp, #32
 8007170:	d107      	bne.n	8007182 <__gethex+0x242>
 8007172:	9b02      	ldr	r3, [sp, #8]
 8007174:	9a00      	ldr	r2, [sp, #0]
 8007176:	f843 2b04 	str.w	r2, [r3], #4
 800717a:	9302      	str	r3, [sp, #8]
 800717c:	2300      	movs	r3, #0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	469b      	mov	fp, r3
 8007182:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007186:	f7ff fec6 	bl	8006f16 <__hexdig_fun>
 800718a:	9b00      	ldr	r3, [sp, #0]
 800718c:	f000 000f 	and.w	r0, r0, #15
 8007190:	fa00 f00b 	lsl.w	r0, r0, fp
 8007194:	4303      	orrs	r3, r0
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	f10b 0b04 	add.w	fp, fp, #4
 800719c:	9b03      	ldr	r3, [sp, #12]
 800719e:	e00d      	b.n	80071bc <__gethex+0x27c>
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	9a06      	ldr	r2, [sp, #24]
 80071a4:	4413      	add	r3, r2
 80071a6:	42bb      	cmp	r3, r7
 80071a8:	d3e0      	bcc.n	800716c <__gethex+0x22c>
 80071aa:	4618      	mov	r0, r3
 80071ac:	9901      	ldr	r1, [sp, #4]
 80071ae:	9307      	str	r3, [sp, #28]
 80071b0:	4652      	mov	r2, sl
 80071b2:	f001 fa58 	bl	8008666 <strncmp>
 80071b6:	9b07      	ldr	r3, [sp, #28]
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d1d7      	bne.n	800716c <__gethex+0x22c>
 80071bc:	461e      	mov	r6, r3
 80071be:	e78b      	b.n	80070d8 <__gethex+0x198>
 80071c0:	f04f 0a03 	mov.w	sl, #3
 80071c4:	e7b8      	b.n	8007138 <__gethex+0x1f8>
 80071c6:	da0a      	bge.n	80071de <__gethex+0x29e>
 80071c8:	1a37      	subs	r7, r6, r0
 80071ca:	4621      	mov	r1, r4
 80071cc:	ee18 0a10 	vmov	r0, s16
 80071d0:	463a      	mov	r2, r7
 80071d2:	f000 fcc7 	bl	8007b64 <__lshift>
 80071d6:	1bed      	subs	r5, r5, r7
 80071d8:	4604      	mov	r4, r0
 80071da:	f100 0914 	add.w	r9, r0, #20
 80071de:	f04f 0a00 	mov.w	sl, #0
 80071e2:	e7ae      	b.n	8007142 <__gethex+0x202>
 80071e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80071e8:	42a8      	cmp	r0, r5
 80071ea:	dd72      	ble.n	80072d2 <__gethex+0x392>
 80071ec:	1b45      	subs	r5, r0, r5
 80071ee:	42ae      	cmp	r6, r5
 80071f0:	dc36      	bgt.n	8007260 <__gethex+0x320>
 80071f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d02a      	beq.n	8007250 <__gethex+0x310>
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d02c      	beq.n	8007258 <__gethex+0x318>
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d11c      	bne.n	800723c <__gethex+0x2fc>
 8007202:	42ae      	cmp	r6, r5
 8007204:	d11a      	bne.n	800723c <__gethex+0x2fc>
 8007206:	2e01      	cmp	r6, #1
 8007208:	d112      	bne.n	8007230 <__gethex+0x2f0>
 800720a:	9a04      	ldr	r2, [sp, #16]
 800720c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	2301      	movs	r3, #1
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	f8c9 3000 	str.w	r3, [r9]
 800721a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800721c:	2762      	movs	r7, #98	; 0x62
 800721e:	601c      	str	r4, [r3, #0]
 8007220:	e723      	b.n	800706a <__gethex+0x12a>
 8007222:	bf00      	nop
 8007224:	08008bdc 	.word	0x08008bdc
 8007228:	08008b00 	.word	0x08008b00
 800722c:	08008b74 	.word	0x08008b74
 8007230:	1e71      	subs	r1, r6, #1
 8007232:	4620      	mov	r0, r4
 8007234:	f000 fed7 	bl	8007fe6 <__any_on>
 8007238:	2800      	cmp	r0, #0
 800723a:	d1e6      	bne.n	800720a <__gethex+0x2ca>
 800723c:	ee18 0a10 	vmov	r0, s16
 8007240:	4621      	mov	r1, r4
 8007242:	f000 fa73 	bl	800772c <_Bfree>
 8007246:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007248:	2300      	movs	r3, #0
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	2750      	movs	r7, #80	; 0x50
 800724e:	e70c      	b.n	800706a <__gethex+0x12a>
 8007250:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1f2      	bne.n	800723c <__gethex+0x2fc>
 8007256:	e7d8      	b.n	800720a <__gethex+0x2ca>
 8007258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1d5      	bne.n	800720a <__gethex+0x2ca>
 800725e:	e7ed      	b.n	800723c <__gethex+0x2fc>
 8007260:	1e6f      	subs	r7, r5, #1
 8007262:	f1ba 0f00 	cmp.w	sl, #0
 8007266:	d131      	bne.n	80072cc <__gethex+0x38c>
 8007268:	b127      	cbz	r7, 8007274 <__gethex+0x334>
 800726a:	4639      	mov	r1, r7
 800726c:	4620      	mov	r0, r4
 800726e:	f000 feba 	bl	8007fe6 <__any_on>
 8007272:	4682      	mov	sl, r0
 8007274:	117b      	asrs	r3, r7, #5
 8007276:	2101      	movs	r1, #1
 8007278:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800727c:	f007 071f 	and.w	r7, r7, #31
 8007280:	fa01 f707 	lsl.w	r7, r1, r7
 8007284:	421f      	tst	r7, r3
 8007286:	4629      	mov	r1, r5
 8007288:	4620      	mov	r0, r4
 800728a:	bf18      	it	ne
 800728c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007290:	1b76      	subs	r6, r6, r5
 8007292:	f7ff fdee 	bl	8006e72 <rshift>
 8007296:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800729a:	2702      	movs	r7, #2
 800729c:	f1ba 0f00 	cmp.w	sl, #0
 80072a0:	d048      	beq.n	8007334 <__gethex+0x3f4>
 80072a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d015      	beq.n	80072d6 <__gethex+0x396>
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d017      	beq.n	80072de <__gethex+0x39e>
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d109      	bne.n	80072c6 <__gethex+0x386>
 80072b2:	f01a 0f02 	tst.w	sl, #2
 80072b6:	d006      	beq.n	80072c6 <__gethex+0x386>
 80072b8:	f8d9 0000 	ldr.w	r0, [r9]
 80072bc:	ea4a 0a00 	orr.w	sl, sl, r0
 80072c0:	f01a 0f01 	tst.w	sl, #1
 80072c4:	d10e      	bne.n	80072e4 <__gethex+0x3a4>
 80072c6:	f047 0710 	orr.w	r7, r7, #16
 80072ca:	e033      	b.n	8007334 <__gethex+0x3f4>
 80072cc:	f04f 0a01 	mov.w	sl, #1
 80072d0:	e7d0      	b.n	8007274 <__gethex+0x334>
 80072d2:	2701      	movs	r7, #1
 80072d4:	e7e2      	b.n	800729c <__gethex+0x35c>
 80072d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072d8:	f1c3 0301 	rsb	r3, r3, #1
 80072dc:	9315      	str	r3, [sp, #84]	; 0x54
 80072de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0f0      	beq.n	80072c6 <__gethex+0x386>
 80072e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80072e8:	f104 0314 	add.w	r3, r4, #20
 80072ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80072f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80072f4:	f04f 0c00 	mov.w	ip, #0
 80072f8:	4618      	mov	r0, r3
 80072fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007302:	d01c      	beq.n	800733e <__gethex+0x3fe>
 8007304:	3201      	adds	r2, #1
 8007306:	6002      	str	r2, [r0, #0]
 8007308:	2f02      	cmp	r7, #2
 800730a:	f104 0314 	add.w	r3, r4, #20
 800730e:	d13f      	bne.n	8007390 <__gethex+0x450>
 8007310:	f8d8 2000 	ldr.w	r2, [r8]
 8007314:	3a01      	subs	r2, #1
 8007316:	42b2      	cmp	r2, r6
 8007318:	d10a      	bne.n	8007330 <__gethex+0x3f0>
 800731a:	1171      	asrs	r1, r6, #5
 800731c:	2201      	movs	r2, #1
 800731e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007322:	f006 061f 	and.w	r6, r6, #31
 8007326:	fa02 f606 	lsl.w	r6, r2, r6
 800732a:	421e      	tst	r6, r3
 800732c:	bf18      	it	ne
 800732e:	4617      	movne	r7, r2
 8007330:	f047 0720 	orr.w	r7, r7, #32
 8007334:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007336:	601c      	str	r4, [r3, #0]
 8007338:	9b04      	ldr	r3, [sp, #16]
 800733a:	601d      	str	r5, [r3, #0]
 800733c:	e695      	b.n	800706a <__gethex+0x12a>
 800733e:	4299      	cmp	r1, r3
 8007340:	f843 cc04 	str.w	ip, [r3, #-4]
 8007344:	d8d8      	bhi.n	80072f8 <__gethex+0x3b8>
 8007346:	68a3      	ldr	r3, [r4, #8]
 8007348:	459b      	cmp	fp, r3
 800734a:	db19      	blt.n	8007380 <__gethex+0x440>
 800734c:	6861      	ldr	r1, [r4, #4]
 800734e:	ee18 0a10 	vmov	r0, s16
 8007352:	3101      	adds	r1, #1
 8007354:	f000 f9aa 	bl	80076ac <_Balloc>
 8007358:	4681      	mov	r9, r0
 800735a:	b918      	cbnz	r0, 8007364 <__gethex+0x424>
 800735c:	4b1a      	ldr	r3, [pc, #104]	; (80073c8 <__gethex+0x488>)
 800735e:	4602      	mov	r2, r0
 8007360:	2184      	movs	r1, #132	; 0x84
 8007362:	e6a8      	b.n	80070b6 <__gethex+0x176>
 8007364:	6922      	ldr	r2, [r4, #16]
 8007366:	3202      	adds	r2, #2
 8007368:	f104 010c 	add.w	r1, r4, #12
 800736c:	0092      	lsls	r2, r2, #2
 800736e:	300c      	adds	r0, #12
 8007370:	f000 f974 	bl	800765c <memcpy>
 8007374:	4621      	mov	r1, r4
 8007376:	ee18 0a10 	vmov	r0, s16
 800737a:	f000 f9d7 	bl	800772c <_Bfree>
 800737e:	464c      	mov	r4, r9
 8007380:	6923      	ldr	r3, [r4, #16]
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007388:	6122      	str	r2, [r4, #16]
 800738a:	2201      	movs	r2, #1
 800738c:	615a      	str	r2, [r3, #20]
 800738e:	e7bb      	b.n	8007308 <__gethex+0x3c8>
 8007390:	6922      	ldr	r2, [r4, #16]
 8007392:	455a      	cmp	r2, fp
 8007394:	dd0b      	ble.n	80073ae <__gethex+0x46e>
 8007396:	2101      	movs	r1, #1
 8007398:	4620      	mov	r0, r4
 800739a:	f7ff fd6a 	bl	8006e72 <rshift>
 800739e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073a2:	3501      	adds	r5, #1
 80073a4:	42ab      	cmp	r3, r5
 80073a6:	f6ff aed0 	blt.w	800714a <__gethex+0x20a>
 80073aa:	2701      	movs	r7, #1
 80073ac:	e7c0      	b.n	8007330 <__gethex+0x3f0>
 80073ae:	f016 061f 	ands.w	r6, r6, #31
 80073b2:	d0fa      	beq.n	80073aa <__gethex+0x46a>
 80073b4:	4453      	add	r3, sl
 80073b6:	f1c6 0620 	rsb	r6, r6, #32
 80073ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80073be:	f000 fa67 	bl	8007890 <__hi0bits>
 80073c2:	42b0      	cmp	r0, r6
 80073c4:	dbe7      	blt.n	8007396 <__gethex+0x456>
 80073c6:	e7f0      	b.n	80073aa <__gethex+0x46a>
 80073c8:	08008b00 	.word	0x08008b00

080073cc <L_shift>:
 80073cc:	f1c2 0208 	rsb	r2, r2, #8
 80073d0:	0092      	lsls	r2, r2, #2
 80073d2:	b570      	push	{r4, r5, r6, lr}
 80073d4:	f1c2 0620 	rsb	r6, r2, #32
 80073d8:	6843      	ldr	r3, [r0, #4]
 80073da:	6804      	ldr	r4, [r0, #0]
 80073dc:	fa03 f506 	lsl.w	r5, r3, r6
 80073e0:	432c      	orrs	r4, r5
 80073e2:	40d3      	lsrs	r3, r2
 80073e4:	6004      	str	r4, [r0, #0]
 80073e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80073ea:	4288      	cmp	r0, r1
 80073ec:	d3f4      	bcc.n	80073d8 <L_shift+0xc>
 80073ee:	bd70      	pop	{r4, r5, r6, pc}

080073f0 <__match>:
 80073f0:	b530      	push	{r4, r5, lr}
 80073f2:	6803      	ldr	r3, [r0, #0]
 80073f4:	3301      	adds	r3, #1
 80073f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073fa:	b914      	cbnz	r4, 8007402 <__match+0x12>
 80073fc:	6003      	str	r3, [r0, #0]
 80073fe:	2001      	movs	r0, #1
 8007400:	bd30      	pop	{r4, r5, pc}
 8007402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007406:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800740a:	2d19      	cmp	r5, #25
 800740c:	bf98      	it	ls
 800740e:	3220      	addls	r2, #32
 8007410:	42a2      	cmp	r2, r4
 8007412:	d0f0      	beq.n	80073f6 <__match+0x6>
 8007414:	2000      	movs	r0, #0
 8007416:	e7f3      	b.n	8007400 <__match+0x10>

08007418 <__hexnan>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	680b      	ldr	r3, [r1, #0]
 800741e:	115e      	asrs	r6, r3, #5
 8007420:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007424:	f013 031f 	ands.w	r3, r3, #31
 8007428:	b087      	sub	sp, #28
 800742a:	bf18      	it	ne
 800742c:	3604      	addne	r6, #4
 800742e:	2500      	movs	r5, #0
 8007430:	1f37      	subs	r7, r6, #4
 8007432:	4690      	mov	r8, r2
 8007434:	6802      	ldr	r2, [r0, #0]
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	4682      	mov	sl, r0
 800743a:	f846 5c04 	str.w	r5, [r6, #-4]
 800743e:	46b9      	mov	r9, r7
 8007440:	463c      	mov	r4, r7
 8007442:	9502      	str	r5, [sp, #8]
 8007444:	46ab      	mov	fp, r5
 8007446:	7851      	ldrb	r1, [r2, #1]
 8007448:	1c53      	adds	r3, r2, #1
 800744a:	9303      	str	r3, [sp, #12]
 800744c:	b341      	cbz	r1, 80074a0 <__hexnan+0x88>
 800744e:	4608      	mov	r0, r1
 8007450:	9205      	str	r2, [sp, #20]
 8007452:	9104      	str	r1, [sp, #16]
 8007454:	f7ff fd5f 	bl	8006f16 <__hexdig_fun>
 8007458:	2800      	cmp	r0, #0
 800745a:	d14f      	bne.n	80074fc <__hexnan+0xe4>
 800745c:	9904      	ldr	r1, [sp, #16]
 800745e:	9a05      	ldr	r2, [sp, #20]
 8007460:	2920      	cmp	r1, #32
 8007462:	d818      	bhi.n	8007496 <__hexnan+0x7e>
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	459b      	cmp	fp, r3
 8007468:	dd13      	ble.n	8007492 <__hexnan+0x7a>
 800746a:	454c      	cmp	r4, r9
 800746c:	d206      	bcs.n	800747c <__hexnan+0x64>
 800746e:	2d07      	cmp	r5, #7
 8007470:	dc04      	bgt.n	800747c <__hexnan+0x64>
 8007472:	462a      	mov	r2, r5
 8007474:	4649      	mov	r1, r9
 8007476:	4620      	mov	r0, r4
 8007478:	f7ff ffa8 	bl	80073cc <L_shift>
 800747c:	4544      	cmp	r4, r8
 800747e:	d950      	bls.n	8007522 <__hexnan+0x10a>
 8007480:	2300      	movs	r3, #0
 8007482:	f1a4 0904 	sub.w	r9, r4, #4
 8007486:	f844 3c04 	str.w	r3, [r4, #-4]
 800748a:	f8cd b008 	str.w	fp, [sp, #8]
 800748e:	464c      	mov	r4, r9
 8007490:	461d      	mov	r5, r3
 8007492:	9a03      	ldr	r2, [sp, #12]
 8007494:	e7d7      	b.n	8007446 <__hexnan+0x2e>
 8007496:	2929      	cmp	r1, #41	; 0x29
 8007498:	d156      	bne.n	8007548 <__hexnan+0x130>
 800749a:	3202      	adds	r2, #2
 800749c:	f8ca 2000 	str.w	r2, [sl]
 80074a0:	f1bb 0f00 	cmp.w	fp, #0
 80074a4:	d050      	beq.n	8007548 <__hexnan+0x130>
 80074a6:	454c      	cmp	r4, r9
 80074a8:	d206      	bcs.n	80074b8 <__hexnan+0xa0>
 80074aa:	2d07      	cmp	r5, #7
 80074ac:	dc04      	bgt.n	80074b8 <__hexnan+0xa0>
 80074ae:	462a      	mov	r2, r5
 80074b0:	4649      	mov	r1, r9
 80074b2:	4620      	mov	r0, r4
 80074b4:	f7ff ff8a 	bl	80073cc <L_shift>
 80074b8:	4544      	cmp	r4, r8
 80074ba:	d934      	bls.n	8007526 <__hexnan+0x10e>
 80074bc:	f1a8 0204 	sub.w	r2, r8, #4
 80074c0:	4623      	mov	r3, r4
 80074c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80074c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80074ca:	429f      	cmp	r7, r3
 80074cc:	d2f9      	bcs.n	80074c2 <__hexnan+0xaa>
 80074ce:	1b3b      	subs	r3, r7, r4
 80074d0:	f023 0303 	bic.w	r3, r3, #3
 80074d4:	3304      	adds	r3, #4
 80074d6:	3401      	adds	r4, #1
 80074d8:	3e03      	subs	r6, #3
 80074da:	42b4      	cmp	r4, r6
 80074dc:	bf88      	it	hi
 80074de:	2304      	movhi	r3, #4
 80074e0:	4443      	add	r3, r8
 80074e2:	2200      	movs	r2, #0
 80074e4:	f843 2b04 	str.w	r2, [r3], #4
 80074e8:	429f      	cmp	r7, r3
 80074ea:	d2fb      	bcs.n	80074e4 <__hexnan+0xcc>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	b91b      	cbnz	r3, 80074f8 <__hexnan+0xe0>
 80074f0:	4547      	cmp	r7, r8
 80074f2:	d127      	bne.n	8007544 <__hexnan+0x12c>
 80074f4:	2301      	movs	r3, #1
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	2005      	movs	r0, #5
 80074fa:	e026      	b.n	800754a <__hexnan+0x132>
 80074fc:	3501      	adds	r5, #1
 80074fe:	2d08      	cmp	r5, #8
 8007500:	f10b 0b01 	add.w	fp, fp, #1
 8007504:	dd06      	ble.n	8007514 <__hexnan+0xfc>
 8007506:	4544      	cmp	r4, r8
 8007508:	d9c3      	bls.n	8007492 <__hexnan+0x7a>
 800750a:	2300      	movs	r3, #0
 800750c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007510:	2501      	movs	r5, #1
 8007512:	3c04      	subs	r4, #4
 8007514:	6822      	ldr	r2, [r4, #0]
 8007516:	f000 000f 	and.w	r0, r0, #15
 800751a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800751e:	6022      	str	r2, [r4, #0]
 8007520:	e7b7      	b.n	8007492 <__hexnan+0x7a>
 8007522:	2508      	movs	r5, #8
 8007524:	e7b5      	b.n	8007492 <__hexnan+0x7a>
 8007526:	9b01      	ldr	r3, [sp, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d0df      	beq.n	80074ec <__hexnan+0xd4>
 800752c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007530:	f1c3 0320 	rsb	r3, r3, #32
 8007534:	fa22 f303 	lsr.w	r3, r2, r3
 8007538:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800753c:	401a      	ands	r2, r3
 800753e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007542:	e7d3      	b.n	80074ec <__hexnan+0xd4>
 8007544:	3f04      	subs	r7, #4
 8007546:	e7d1      	b.n	80074ec <__hexnan+0xd4>
 8007548:	2004      	movs	r0, #4
 800754a:	b007      	add	sp, #28
 800754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007550 <_localeconv_r>:
 8007550:	4800      	ldr	r0, [pc, #0]	; (8007554 <_localeconv_r+0x4>)
 8007552:	4770      	bx	lr
 8007554:	20000170 	.word	0x20000170

08007558 <__retarget_lock_init_recursive>:
 8007558:	4770      	bx	lr

0800755a <__retarget_lock_acquire_recursive>:
 800755a:	4770      	bx	lr

0800755c <__retarget_lock_release_recursive>:
 800755c:	4770      	bx	lr

0800755e <__swhatbuf_r>:
 800755e:	b570      	push	{r4, r5, r6, lr}
 8007560:	460e      	mov	r6, r1
 8007562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007566:	2900      	cmp	r1, #0
 8007568:	b096      	sub	sp, #88	; 0x58
 800756a:	4614      	mov	r4, r2
 800756c:	461d      	mov	r5, r3
 800756e:	da08      	bge.n	8007582 <__swhatbuf_r+0x24>
 8007570:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	602a      	str	r2, [r5, #0]
 8007578:	061a      	lsls	r2, r3, #24
 800757a:	d410      	bmi.n	800759e <__swhatbuf_r+0x40>
 800757c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007580:	e00e      	b.n	80075a0 <__swhatbuf_r+0x42>
 8007582:	466a      	mov	r2, sp
 8007584:	f001 f8b2 	bl	80086ec <_fstat_r>
 8007588:	2800      	cmp	r0, #0
 800758a:	dbf1      	blt.n	8007570 <__swhatbuf_r+0x12>
 800758c:	9a01      	ldr	r2, [sp, #4]
 800758e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007592:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007596:	425a      	negs	r2, r3
 8007598:	415a      	adcs	r2, r3
 800759a:	602a      	str	r2, [r5, #0]
 800759c:	e7ee      	b.n	800757c <__swhatbuf_r+0x1e>
 800759e:	2340      	movs	r3, #64	; 0x40
 80075a0:	2000      	movs	r0, #0
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	b016      	add	sp, #88	; 0x58
 80075a6:	bd70      	pop	{r4, r5, r6, pc}

080075a8 <__smakebuf_r>:
 80075a8:	898b      	ldrh	r3, [r1, #12]
 80075aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075ac:	079d      	lsls	r5, r3, #30
 80075ae:	4606      	mov	r6, r0
 80075b0:	460c      	mov	r4, r1
 80075b2:	d507      	bpl.n	80075c4 <__smakebuf_r+0x1c>
 80075b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	6123      	str	r3, [r4, #16]
 80075bc:	2301      	movs	r3, #1
 80075be:	6163      	str	r3, [r4, #20]
 80075c0:	b002      	add	sp, #8
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	ab01      	add	r3, sp, #4
 80075c6:	466a      	mov	r2, sp
 80075c8:	f7ff ffc9 	bl	800755e <__swhatbuf_r>
 80075cc:	9900      	ldr	r1, [sp, #0]
 80075ce:	4605      	mov	r5, r0
 80075d0:	4630      	mov	r0, r6
 80075d2:	f000 fdab 	bl	800812c <_malloc_r>
 80075d6:	b948      	cbnz	r0, 80075ec <__smakebuf_r+0x44>
 80075d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075dc:	059a      	lsls	r2, r3, #22
 80075de:	d4ef      	bmi.n	80075c0 <__smakebuf_r+0x18>
 80075e0:	f023 0303 	bic.w	r3, r3, #3
 80075e4:	f043 0302 	orr.w	r3, r3, #2
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	e7e3      	b.n	80075b4 <__smakebuf_r+0xc>
 80075ec:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <__smakebuf_r+0x7c>)
 80075ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	6020      	str	r0, [r4, #0]
 80075f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	9b00      	ldr	r3, [sp, #0]
 80075fc:	6163      	str	r3, [r4, #20]
 80075fe:	9b01      	ldr	r3, [sp, #4]
 8007600:	6120      	str	r0, [r4, #16]
 8007602:	b15b      	cbz	r3, 800761c <__smakebuf_r+0x74>
 8007604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007608:	4630      	mov	r0, r6
 800760a:	f001 f881 	bl	8008710 <_isatty_r>
 800760e:	b128      	cbz	r0, 800761c <__smakebuf_r+0x74>
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	f023 0303 	bic.w	r3, r3, #3
 8007616:	f043 0301 	orr.w	r3, r3, #1
 800761a:	81a3      	strh	r3, [r4, #12]
 800761c:	89a0      	ldrh	r0, [r4, #12]
 800761e:	4305      	orrs	r5, r0
 8007620:	81a5      	strh	r5, [r4, #12]
 8007622:	e7cd      	b.n	80075c0 <__smakebuf_r+0x18>
 8007624:	08006cd1 	.word	0x08006cd1

08007628 <malloc>:
 8007628:	4b02      	ldr	r3, [pc, #8]	; (8007634 <malloc+0xc>)
 800762a:	4601      	mov	r1, r0
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	f000 bd7d 	b.w	800812c <_malloc_r>
 8007632:	bf00      	nop
 8007634:	20000018 	.word	0x20000018

08007638 <__ascii_mbtowc>:
 8007638:	b082      	sub	sp, #8
 800763a:	b901      	cbnz	r1, 800763e <__ascii_mbtowc+0x6>
 800763c:	a901      	add	r1, sp, #4
 800763e:	b142      	cbz	r2, 8007652 <__ascii_mbtowc+0x1a>
 8007640:	b14b      	cbz	r3, 8007656 <__ascii_mbtowc+0x1e>
 8007642:	7813      	ldrb	r3, [r2, #0]
 8007644:	600b      	str	r3, [r1, #0]
 8007646:	7812      	ldrb	r2, [r2, #0]
 8007648:	1e10      	subs	r0, r2, #0
 800764a:	bf18      	it	ne
 800764c:	2001      	movne	r0, #1
 800764e:	b002      	add	sp, #8
 8007650:	4770      	bx	lr
 8007652:	4610      	mov	r0, r2
 8007654:	e7fb      	b.n	800764e <__ascii_mbtowc+0x16>
 8007656:	f06f 0001 	mvn.w	r0, #1
 800765a:	e7f8      	b.n	800764e <__ascii_mbtowc+0x16>

0800765c <memcpy>:
 800765c:	440a      	add	r2, r1
 800765e:	4291      	cmp	r1, r2
 8007660:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007664:	d100      	bne.n	8007668 <memcpy+0xc>
 8007666:	4770      	bx	lr
 8007668:	b510      	push	{r4, lr}
 800766a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800766e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007672:	4291      	cmp	r1, r2
 8007674:	d1f9      	bne.n	800766a <memcpy+0xe>
 8007676:	bd10      	pop	{r4, pc}

08007678 <memmove>:
 8007678:	4288      	cmp	r0, r1
 800767a:	b510      	push	{r4, lr}
 800767c:	eb01 0402 	add.w	r4, r1, r2
 8007680:	d902      	bls.n	8007688 <memmove+0x10>
 8007682:	4284      	cmp	r4, r0
 8007684:	4623      	mov	r3, r4
 8007686:	d807      	bhi.n	8007698 <memmove+0x20>
 8007688:	1e43      	subs	r3, r0, #1
 800768a:	42a1      	cmp	r1, r4
 800768c:	d008      	beq.n	80076a0 <memmove+0x28>
 800768e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007692:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007696:	e7f8      	b.n	800768a <memmove+0x12>
 8007698:	4402      	add	r2, r0
 800769a:	4601      	mov	r1, r0
 800769c:	428a      	cmp	r2, r1
 800769e:	d100      	bne.n	80076a2 <memmove+0x2a>
 80076a0:	bd10      	pop	{r4, pc}
 80076a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076aa:	e7f7      	b.n	800769c <memmove+0x24>

080076ac <_Balloc>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076b0:	4604      	mov	r4, r0
 80076b2:	460d      	mov	r5, r1
 80076b4:	b976      	cbnz	r6, 80076d4 <_Balloc+0x28>
 80076b6:	2010      	movs	r0, #16
 80076b8:	f7ff ffb6 	bl	8007628 <malloc>
 80076bc:	4602      	mov	r2, r0
 80076be:	6260      	str	r0, [r4, #36]	; 0x24
 80076c0:	b920      	cbnz	r0, 80076cc <_Balloc+0x20>
 80076c2:	4b18      	ldr	r3, [pc, #96]	; (8007724 <_Balloc+0x78>)
 80076c4:	4818      	ldr	r0, [pc, #96]	; (8007728 <_Balloc+0x7c>)
 80076c6:	2166      	movs	r1, #102	; 0x66
 80076c8:	f7fc fca2 	bl	8004010 <__assert_func>
 80076cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076d0:	6006      	str	r6, [r0, #0]
 80076d2:	60c6      	str	r6, [r0, #12]
 80076d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80076d6:	68f3      	ldr	r3, [r6, #12]
 80076d8:	b183      	cbz	r3, 80076fc <_Balloc+0x50>
 80076da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076e2:	b9b8      	cbnz	r0, 8007714 <_Balloc+0x68>
 80076e4:	2101      	movs	r1, #1
 80076e6:	fa01 f605 	lsl.w	r6, r1, r5
 80076ea:	1d72      	adds	r2, r6, #5
 80076ec:	0092      	lsls	r2, r2, #2
 80076ee:	4620      	mov	r0, r4
 80076f0:	f000 fc9a 	bl	8008028 <_calloc_r>
 80076f4:	b160      	cbz	r0, 8007710 <_Balloc+0x64>
 80076f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076fa:	e00e      	b.n	800771a <_Balloc+0x6e>
 80076fc:	2221      	movs	r2, #33	; 0x21
 80076fe:	2104      	movs	r1, #4
 8007700:	4620      	mov	r0, r4
 8007702:	f000 fc91 	bl	8008028 <_calloc_r>
 8007706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007708:	60f0      	str	r0, [r6, #12]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e4      	bne.n	80076da <_Balloc+0x2e>
 8007710:	2000      	movs	r0, #0
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	6802      	ldr	r2, [r0, #0]
 8007716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800771a:	2300      	movs	r3, #0
 800771c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007720:	e7f7      	b.n	8007712 <_Balloc+0x66>
 8007722:	bf00      	nop
 8007724:	08008a8e 	.word	0x08008a8e
 8007728:	08008bf0 	.word	0x08008bf0

0800772c <_Bfree>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007730:	4605      	mov	r5, r0
 8007732:	460c      	mov	r4, r1
 8007734:	b976      	cbnz	r6, 8007754 <_Bfree+0x28>
 8007736:	2010      	movs	r0, #16
 8007738:	f7ff ff76 	bl	8007628 <malloc>
 800773c:	4602      	mov	r2, r0
 800773e:	6268      	str	r0, [r5, #36]	; 0x24
 8007740:	b920      	cbnz	r0, 800774c <_Bfree+0x20>
 8007742:	4b09      	ldr	r3, [pc, #36]	; (8007768 <_Bfree+0x3c>)
 8007744:	4809      	ldr	r0, [pc, #36]	; (800776c <_Bfree+0x40>)
 8007746:	218a      	movs	r1, #138	; 0x8a
 8007748:	f7fc fc62 	bl	8004010 <__assert_func>
 800774c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007750:	6006      	str	r6, [r0, #0]
 8007752:	60c6      	str	r6, [r0, #12]
 8007754:	b13c      	cbz	r4, 8007766 <_Bfree+0x3a>
 8007756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007758:	6862      	ldr	r2, [r4, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007760:	6021      	str	r1, [r4, #0]
 8007762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007766:	bd70      	pop	{r4, r5, r6, pc}
 8007768:	08008a8e 	.word	0x08008a8e
 800776c:	08008bf0 	.word	0x08008bf0

08007770 <__multadd>:
 8007770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007774:	690d      	ldr	r5, [r1, #16]
 8007776:	4607      	mov	r7, r0
 8007778:	460c      	mov	r4, r1
 800777a:	461e      	mov	r6, r3
 800777c:	f101 0c14 	add.w	ip, r1, #20
 8007780:	2000      	movs	r0, #0
 8007782:	f8dc 3000 	ldr.w	r3, [ip]
 8007786:	b299      	uxth	r1, r3
 8007788:	fb02 6101 	mla	r1, r2, r1, r6
 800778c:	0c1e      	lsrs	r6, r3, #16
 800778e:	0c0b      	lsrs	r3, r1, #16
 8007790:	fb02 3306 	mla	r3, r2, r6, r3
 8007794:	b289      	uxth	r1, r1
 8007796:	3001      	adds	r0, #1
 8007798:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800779c:	4285      	cmp	r5, r0
 800779e:	f84c 1b04 	str.w	r1, [ip], #4
 80077a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077a6:	dcec      	bgt.n	8007782 <__multadd+0x12>
 80077a8:	b30e      	cbz	r6, 80077ee <__multadd+0x7e>
 80077aa:	68a3      	ldr	r3, [r4, #8]
 80077ac:	42ab      	cmp	r3, r5
 80077ae:	dc19      	bgt.n	80077e4 <__multadd+0x74>
 80077b0:	6861      	ldr	r1, [r4, #4]
 80077b2:	4638      	mov	r0, r7
 80077b4:	3101      	adds	r1, #1
 80077b6:	f7ff ff79 	bl	80076ac <_Balloc>
 80077ba:	4680      	mov	r8, r0
 80077bc:	b928      	cbnz	r0, 80077ca <__multadd+0x5a>
 80077be:	4602      	mov	r2, r0
 80077c0:	4b0c      	ldr	r3, [pc, #48]	; (80077f4 <__multadd+0x84>)
 80077c2:	480d      	ldr	r0, [pc, #52]	; (80077f8 <__multadd+0x88>)
 80077c4:	21b5      	movs	r1, #181	; 0xb5
 80077c6:	f7fc fc23 	bl	8004010 <__assert_func>
 80077ca:	6922      	ldr	r2, [r4, #16]
 80077cc:	3202      	adds	r2, #2
 80077ce:	f104 010c 	add.w	r1, r4, #12
 80077d2:	0092      	lsls	r2, r2, #2
 80077d4:	300c      	adds	r0, #12
 80077d6:	f7ff ff41 	bl	800765c <memcpy>
 80077da:	4621      	mov	r1, r4
 80077dc:	4638      	mov	r0, r7
 80077de:	f7ff ffa5 	bl	800772c <_Bfree>
 80077e2:	4644      	mov	r4, r8
 80077e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077e8:	3501      	adds	r5, #1
 80077ea:	615e      	str	r6, [r3, #20]
 80077ec:	6125      	str	r5, [r4, #16]
 80077ee:	4620      	mov	r0, r4
 80077f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f4:	08008b00 	.word	0x08008b00
 80077f8:	08008bf0 	.word	0x08008bf0

080077fc <__s2b>:
 80077fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007800:	460c      	mov	r4, r1
 8007802:	4615      	mov	r5, r2
 8007804:	461f      	mov	r7, r3
 8007806:	2209      	movs	r2, #9
 8007808:	3308      	adds	r3, #8
 800780a:	4606      	mov	r6, r0
 800780c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007810:	2100      	movs	r1, #0
 8007812:	2201      	movs	r2, #1
 8007814:	429a      	cmp	r2, r3
 8007816:	db09      	blt.n	800782c <__s2b+0x30>
 8007818:	4630      	mov	r0, r6
 800781a:	f7ff ff47 	bl	80076ac <_Balloc>
 800781e:	b940      	cbnz	r0, 8007832 <__s2b+0x36>
 8007820:	4602      	mov	r2, r0
 8007822:	4b19      	ldr	r3, [pc, #100]	; (8007888 <__s2b+0x8c>)
 8007824:	4819      	ldr	r0, [pc, #100]	; (800788c <__s2b+0x90>)
 8007826:	21ce      	movs	r1, #206	; 0xce
 8007828:	f7fc fbf2 	bl	8004010 <__assert_func>
 800782c:	0052      	lsls	r2, r2, #1
 800782e:	3101      	adds	r1, #1
 8007830:	e7f0      	b.n	8007814 <__s2b+0x18>
 8007832:	9b08      	ldr	r3, [sp, #32]
 8007834:	6143      	str	r3, [r0, #20]
 8007836:	2d09      	cmp	r5, #9
 8007838:	f04f 0301 	mov.w	r3, #1
 800783c:	6103      	str	r3, [r0, #16]
 800783e:	dd16      	ble.n	800786e <__s2b+0x72>
 8007840:	f104 0909 	add.w	r9, r4, #9
 8007844:	46c8      	mov	r8, r9
 8007846:	442c      	add	r4, r5
 8007848:	f818 3b01 	ldrb.w	r3, [r8], #1
 800784c:	4601      	mov	r1, r0
 800784e:	3b30      	subs	r3, #48	; 0x30
 8007850:	220a      	movs	r2, #10
 8007852:	4630      	mov	r0, r6
 8007854:	f7ff ff8c 	bl	8007770 <__multadd>
 8007858:	45a0      	cmp	r8, r4
 800785a:	d1f5      	bne.n	8007848 <__s2b+0x4c>
 800785c:	f1a5 0408 	sub.w	r4, r5, #8
 8007860:	444c      	add	r4, r9
 8007862:	1b2d      	subs	r5, r5, r4
 8007864:	1963      	adds	r3, r4, r5
 8007866:	42bb      	cmp	r3, r7
 8007868:	db04      	blt.n	8007874 <__s2b+0x78>
 800786a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786e:	340a      	adds	r4, #10
 8007870:	2509      	movs	r5, #9
 8007872:	e7f6      	b.n	8007862 <__s2b+0x66>
 8007874:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007878:	4601      	mov	r1, r0
 800787a:	3b30      	subs	r3, #48	; 0x30
 800787c:	220a      	movs	r2, #10
 800787e:	4630      	mov	r0, r6
 8007880:	f7ff ff76 	bl	8007770 <__multadd>
 8007884:	e7ee      	b.n	8007864 <__s2b+0x68>
 8007886:	bf00      	nop
 8007888:	08008b00 	.word	0x08008b00
 800788c:	08008bf0 	.word	0x08008bf0

08007890 <__hi0bits>:
 8007890:	0c03      	lsrs	r3, r0, #16
 8007892:	041b      	lsls	r3, r3, #16
 8007894:	b9d3      	cbnz	r3, 80078cc <__hi0bits+0x3c>
 8007896:	0400      	lsls	r0, r0, #16
 8007898:	2310      	movs	r3, #16
 800789a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800789e:	bf04      	itt	eq
 80078a0:	0200      	lsleq	r0, r0, #8
 80078a2:	3308      	addeq	r3, #8
 80078a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078a8:	bf04      	itt	eq
 80078aa:	0100      	lsleq	r0, r0, #4
 80078ac:	3304      	addeq	r3, #4
 80078ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078b2:	bf04      	itt	eq
 80078b4:	0080      	lsleq	r0, r0, #2
 80078b6:	3302      	addeq	r3, #2
 80078b8:	2800      	cmp	r0, #0
 80078ba:	db05      	blt.n	80078c8 <__hi0bits+0x38>
 80078bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078c0:	f103 0301 	add.w	r3, r3, #1
 80078c4:	bf08      	it	eq
 80078c6:	2320      	moveq	r3, #32
 80078c8:	4618      	mov	r0, r3
 80078ca:	4770      	bx	lr
 80078cc:	2300      	movs	r3, #0
 80078ce:	e7e4      	b.n	800789a <__hi0bits+0xa>

080078d0 <__lo0bits>:
 80078d0:	6803      	ldr	r3, [r0, #0]
 80078d2:	f013 0207 	ands.w	r2, r3, #7
 80078d6:	4601      	mov	r1, r0
 80078d8:	d00b      	beq.n	80078f2 <__lo0bits+0x22>
 80078da:	07da      	lsls	r2, r3, #31
 80078dc:	d423      	bmi.n	8007926 <__lo0bits+0x56>
 80078de:	0798      	lsls	r0, r3, #30
 80078e0:	bf49      	itett	mi
 80078e2:	085b      	lsrmi	r3, r3, #1
 80078e4:	089b      	lsrpl	r3, r3, #2
 80078e6:	2001      	movmi	r0, #1
 80078e8:	600b      	strmi	r3, [r1, #0]
 80078ea:	bf5c      	itt	pl
 80078ec:	600b      	strpl	r3, [r1, #0]
 80078ee:	2002      	movpl	r0, #2
 80078f0:	4770      	bx	lr
 80078f2:	b298      	uxth	r0, r3
 80078f4:	b9a8      	cbnz	r0, 8007922 <__lo0bits+0x52>
 80078f6:	0c1b      	lsrs	r3, r3, #16
 80078f8:	2010      	movs	r0, #16
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	b90a      	cbnz	r2, 8007902 <__lo0bits+0x32>
 80078fe:	3008      	adds	r0, #8
 8007900:	0a1b      	lsrs	r3, r3, #8
 8007902:	071a      	lsls	r2, r3, #28
 8007904:	bf04      	itt	eq
 8007906:	091b      	lsreq	r3, r3, #4
 8007908:	3004      	addeq	r0, #4
 800790a:	079a      	lsls	r2, r3, #30
 800790c:	bf04      	itt	eq
 800790e:	089b      	lsreq	r3, r3, #2
 8007910:	3002      	addeq	r0, #2
 8007912:	07da      	lsls	r2, r3, #31
 8007914:	d403      	bmi.n	800791e <__lo0bits+0x4e>
 8007916:	085b      	lsrs	r3, r3, #1
 8007918:	f100 0001 	add.w	r0, r0, #1
 800791c:	d005      	beq.n	800792a <__lo0bits+0x5a>
 800791e:	600b      	str	r3, [r1, #0]
 8007920:	4770      	bx	lr
 8007922:	4610      	mov	r0, r2
 8007924:	e7e9      	b.n	80078fa <__lo0bits+0x2a>
 8007926:	2000      	movs	r0, #0
 8007928:	4770      	bx	lr
 800792a:	2020      	movs	r0, #32
 800792c:	4770      	bx	lr
	...

08007930 <__i2b>:
 8007930:	b510      	push	{r4, lr}
 8007932:	460c      	mov	r4, r1
 8007934:	2101      	movs	r1, #1
 8007936:	f7ff feb9 	bl	80076ac <_Balloc>
 800793a:	4602      	mov	r2, r0
 800793c:	b928      	cbnz	r0, 800794a <__i2b+0x1a>
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <__i2b+0x24>)
 8007940:	4805      	ldr	r0, [pc, #20]	; (8007958 <__i2b+0x28>)
 8007942:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007946:	f7fc fb63 	bl	8004010 <__assert_func>
 800794a:	2301      	movs	r3, #1
 800794c:	6144      	str	r4, [r0, #20]
 800794e:	6103      	str	r3, [r0, #16]
 8007950:	bd10      	pop	{r4, pc}
 8007952:	bf00      	nop
 8007954:	08008b00 	.word	0x08008b00
 8007958:	08008bf0 	.word	0x08008bf0

0800795c <__multiply>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	4691      	mov	r9, r2
 8007962:	690a      	ldr	r2, [r1, #16]
 8007964:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007968:	429a      	cmp	r2, r3
 800796a:	bfb8      	it	lt
 800796c:	460b      	movlt	r3, r1
 800796e:	460c      	mov	r4, r1
 8007970:	bfbc      	itt	lt
 8007972:	464c      	movlt	r4, r9
 8007974:	4699      	movlt	r9, r3
 8007976:	6927      	ldr	r7, [r4, #16]
 8007978:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800797c:	68a3      	ldr	r3, [r4, #8]
 800797e:	6861      	ldr	r1, [r4, #4]
 8007980:	eb07 060a 	add.w	r6, r7, sl
 8007984:	42b3      	cmp	r3, r6
 8007986:	b085      	sub	sp, #20
 8007988:	bfb8      	it	lt
 800798a:	3101      	addlt	r1, #1
 800798c:	f7ff fe8e 	bl	80076ac <_Balloc>
 8007990:	b930      	cbnz	r0, 80079a0 <__multiply+0x44>
 8007992:	4602      	mov	r2, r0
 8007994:	4b44      	ldr	r3, [pc, #272]	; (8007aa8 <__multiply+0x14c>)
 8007996:	4845      	ldr	r0, [pc, #276]	; (8007aac <__multiply+0x150>)
 8007998:	f240 115d 	movw	r1, #349	; 0x15d
 800799c:	f7fc fb38 	bl	8004010 <__assert_func>
 80079a0:	f100 0514 	add.w	r5, r0, #20
 80079a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079a8:	462b      	mov	r3, r5
 80079aa:	2200      	movs	r2, #0
 80079ac:	4543      	cmp	r3, r8
 80079ae:	d321      	bcc.n	80079f4 <__multiply+0x98>
 80079b0:	f104 0314 	add.w	r3, r4, #20
 80079b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079b8:	f109 0314 	add.w	r3, r9, #20
 80079bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079c0:	9202      	str	r2, [sp, #8]
 80079c2:	1b3a      	subs	r2, r7, r4
 80079c4:	3a15      	subs	r2, #21
 80079c6:	f022 0203 	bic.w	r2, r2, #3
 80079ca:	3204      	adds	r2, #4
 80079cc:	f104 0115 	add.w	r1, r4, #21
 80079d0:	428f      	cmp	r7, r1
 80079d2:	bf38      	it	cc
 80079d4:	2204      	movcc	r2, #4
 80079d6:	9201      	str	r2, [sp, #4]
 80079d8:	9a02      	ldr	r2, [sp, #8]
 80079da:	9303      	str	r3, [sp, #12]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d80c      	bhi.n	80079fa <__multiply+0x9e>
 80079e0:	2e00      	cmp	r6, #0
 80079e2:	dd03      	ble.n	80079ec <__multiply+0x90>
 80079e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d05a      	beq.n	8007aa2 <__multiply+0x146>
 80079ec:	6106      	str	r6, [r0, #16]
 80079ee:	b005      	add	sp, #20
 80079f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f4:	f843 2b04 	str.w	r2, [r3], #4
 80079f8:	e7d8      	b.n	80079ac <__multiply+0x50>
 80079fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80079fe:	f1ba 0f00 	cmp.w	sl, #0
 8007a02:	d024      	beq.n	8007a4e <__multiply+0xf2>
 8007a04:	f104 0e14 	add.w	lr, r4, #20
 8007a08:	46a9      	mov	r9, r5
 8007a0a:	f04f 0c00 	mov.w	ip, #0
 8007a0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a12:	f8d9 1000 	ldr.w	r1, [r9]
 8007a16:	fa1f fb82 	uxth.w	fp, r2
 8007a1a:	b289      	uxth	r1, r1
 8007a1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a24:	f8d9 2000 	ldr.w	r2, [r9]
 8007a28:	4461      	add	r1, ip
 8007a2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a36:	b289      	uxth	r1, r1
 8007a38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a3c:	4577      	cmp	r7, lr
 8007a3e:	f849 1b04 	str.w	r1, [r9], #4
 8007a42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a46:	d8e2      	bhi.n	8007a0e <__multiply+0xb2>
 8007a48:	9a01      	ldr	r2, [sp, #4]
 8007a4a:	f845 c002 	str.w	ip, [r5, r2]
 8007a4e:	9a03      	ldr	r2, [sp, #12]
 8007a50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a54:	3304      	adds	r3, #4
 8007a56:	f1b9 0f00 	cmp.w	r9, #0
 8007a5a:	d020      	beq.n	8007a9e <__multiply+0x142>
 8007a5c:	6829      	ldr	r1, [r5, #0]
 8007a5e:	f104 0c14 	add.w	ip, r4, #20
 8007a62:	46ae      	mov	lr, r5
 8007a64:	f04f 0a00 	mov.w	sl, #0
 8007a68:	f8bc b000 	ldrh.w	fp, [ip]
 8007a6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a70:	fb09 220b 	mla	r2, r9, fp, r2
 8007a74:	4492      	add	sl, r2
 8007a76:	b289      	uxth	r1, r1
 8007a78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007a7c:	f84e 1b04 	str.w	r1, [lr], #4
 8007a80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a84:	f8be 1000 	ldrh.w	r1, [lr]
 8007a88:	0c12      	lsrs	r2, r2, #16
 8007a8a:	fb09 1102 	mla	r1, r9, r2, r1
 8007a8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007a92:	4567      	cmp	r7, ip
 8007a94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a98:	d8e6      	bhi.n	8007a68 <__multiply+0x10c>
 8007a9a:	9a01      	ldr	r2, [sp, #4]
 8007a9c:	50a9      	str	r1, [r5, r2]
 8007a9e:	3504      	adds	r5, #4
 8007aa0:	e79a      	b.n	80079d8 <__multiply+0x7c>
 8007aa2:	3e01      	subs	r6, #1
 8007aa4:	e79c      	b.n	80079e0 <__multiply+0x84>
 8007aa6:	bf00      	nop
 8007aa8:	08008b00 	.word	0x08008b00
 8007aac:	08008bf0 	.word	0x08008bf0

08007ab0 <__pow5mult>:
 8007ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	f012 0203 	ands.w	r2, r2, #3
 8007aba:	4606      	mov	r6, r0
 8007abc:	460f      	mov	r7, r1
 8007abe:	d007      	beq.n	8007ad0 <__pow5mult+0x20>
 8007ac0:	4c25      	ldr	r4, [pc, #148]	; (8007b58 <__pow5mult+0xa8>)
 8007ac2:	3a01      	subs	r2, #1
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007aca:	f7ff fe51 	bl	8007770 <__multadd>
 8007ace:	4607      	mov	r7, r0
 8007ad0:	10ad      	asrs	r5, r5, #2
 8007ad2:	d03d      	beq.n	8007b50 <__pow5mult+0xa0>
 8007ad4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ad6:	b97c      	cbnz	r4, 8007af8 <__pow5mult+0x48>
 8007ad8:	2010      	movs	r0, #16
 8007ada:	f7ff fda5 	bl	8007628 <malloc>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6270      	str	r0, [r6, #36]	; 0x24
 8007ae2:	b928      	cbnz	r0, 8007af0 <__pow5mult+0x40>
 8007ae4:	4b1d      	ldr	r3, [pc, #116]	; (8007b5c <__pow5mult+0xac>)
 8007ae6:	481e      	ldr	r0, [pc, #120]	; (8007b60 <__pow5mult+0xb0>)
 8007ae8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007aec:	f7fc fa90 	bl	8004010 <__assert_func>
 8007af0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007af4:	6004      	str	r4, [r0, #0]
 8007af6:	60c4      	str	r4, [r0, #12]
 8007af8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007afc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b00:	b94c      	cbnz	r4, 8007b16 <__pow5mult+0x66>
 8007b02:	f240 2171 	movw	r1, #625	; 0x271
 8007b06:	4630      	mov	r0, r6
 8007b08:	f7ff ff12 	bl	8007930 <__i2b>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b12:	4604      	mov	r4, r0
 8007b14:	6003      	str	r3, [r0, #0]
 8007b16:	f04f 0900 	mov.w	r9, #0
 8007b1a:	07eb      	lsls	r3, r5, #31
 8007b1c:	d50a      	bpl.n	8007b34 <__pow5mult+0x84>
 8007b1e:	4639      	mov	r1, r7
 8007b20:	4622      	mov	r2, r4
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ff1a 	bl	800795c <__multiply>
 8007b28:	4639      	mov	r1, r7
 8007b2a:	4680      	mov	r8, r0
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f7ff fdfd 	bl	800772c <_Bfree>
 8007b32:	4647      	mov	r7, r8
 8007b34:	106d      	asrs	r5, r5, #1
 8007b36:	d00b      	beq.n	8007b50 <__pow5mult+0xa0>
 8007b38:	6820      	ldr	r0, [r4, #0]
 8007b3a:	b938      	cbnz	r0, 8007b4c <__pow5mult+0x9c>
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7ff ff0b 	bl	800795c <__multiply>
 8007b46:	6020      	str	r0, [r4, #0]
 8007b48:	f8c0 9000 	str.w	r9, [r0]
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	e7e4      	b.n	8007b1a <__pow5mult+0x6a>
 8007b50:	4638      	mov	r0, r7
 8007b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b56:	bf00      	nop
 8007b58:	08008d40 	.word	0x08008d40
 8007b5c:	08008a8e 	.word	0x08008a8e
 8007b60:	08008bf0 	.word	0x08008bf0

08007b64 <__lshift>:
 8007b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b68:	460c      	mov	r4, r1
 8007b6a:	6849      	ldr	r1, [r1, #4]
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b72:	68a3      	ldr	r3, [r4, #8]
 8007b74:	4607      	mov	r7, r0
 8007b76:	4691      	mov	r9, r2
 8007b78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b7c:	f108 0601 	add.w	r6, r8, #1
 8007b80:	42b3      	cmp	r3, r6
 8007b82:	db0b      	blt.n	8007b9c <__lshift+0x38>
 8007b84:	4638      	mov	r0, r7
 8007b86:	f7ff fd91 	bl	80076ac <_Balloc>
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	b948      	cbnz	r0, 8007ba2 <__lshift+0x3e>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	4b2a      	ldr	r3, [pc, #168]	; (8007c3c <__lshift+0xd8>)
 8007b92:	482b      	ldr	r0, [pc, #172]	; (8007c40 <__lshift+0xdc>)
 8007b94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b98:	f7fc fa3a 	bl	8004010 <__assert_func>
 8007b9c:	3101      	adds	r1, #1
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	e7ee      	b.n	8007b80 <__lshift+0x1c>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f100 0114 	add.w	r1, r0, #20
 8007ba8:	f100 0210 	add.w	r2, r0, #16
 8007bac:	4618      	mov	r0, r3
 8007bae:	4553      	cmp	r3, sl
 8007bb0:	db37      	blt.n	8007c22 <__lshift+0xbe>
 8007bb2:	6920      	ldr	r0, [r4, #16]
 8007bb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bb8:	f104 0314 	add.w	r3, r4, #20
 8007bbc:	f019 091f 	ands.w	r9, r9, #31
 8007bc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bc8:	d02f      	beq.n	8007c2a <__lshift+0xc6>
 8007bca:	f1c9 0e20 	rsb	lr, r9, #32
 8007bce:	468a      	mov	sl, r1
 8007bd0:	f04f 0c00 	mov.w	ip, #0
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	fa02 f209 	lsl.w	r2, r2, r9
 8007bda:	ea42 020c 	orr.w	r2, r2, ip
 8007bde:	f84a 2b04 	str.w	r2, [sl], #4
 8007be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be6:	4298      	cmp	r0, r3
 8007be8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007bec:	d8f2      	bhi.n	8007bd4 <__lshift+0x70>
 8007bee:	1b03      	subs	r3, r0, r4
 8007bf0:	3b15      	subs	r3, #21
 8007bf2:	f023 0303 	bic.w	r3, r3, #3
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	f104 0215 	add.w	r2, r4, #21
 8007bfc:	4290      	cmp	r0, r2
 8007bfe:	bf38      	it	cc
 8007c00:	2304      	movcc	r3, #4
 8007c02:	f841 c003 	str.w	ip, [r1, r3]
 8007c06:	f1bc 0f00 	cmp.w	ip, #0
 8007c0a:	d001      	beq.n	8007c10 <__lshift+0xac>
 8007c0c:	f108 0602 	add.w	r6, r8, #2
 8007c10:	3e01      	subs	r6, #1
 8007c12:	4638      	mov	r0, r7
 8007c14:	612e      	str	r6, [r5, #16]
 8007c16:	4621      	mov	r1, r4
 8007c18:	f7ff fd88 	bl	800772c <_Bfree>
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c22:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c26:	3301      	adds	r3, #1
 8007c28:	e7c1      	b.n	8007bae <__lshift+0x4a>
 8007c2a:	3904      	subs	r1, #4
 8007c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c30:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c34:	4298      	cmp	r0, r3
 8007c36:	d8f9      	bhi.n	8007c2c <__lshift+0xc8>
 8007c38:	e7ea      	b.n	8007c10 <__lshift+0xac>
 8007c3a:	bf00      	nop
 8007c3c:	08008b00 	.word	0x08008b00
 8007c40:	08008bf0 	.word	0x08008bf0

08007c44 <__mcmp>:
 8007c44:	b530      	push	{r4, r5, lr}
 8007c46:	6902      	ldr	r2, [r0, #16]
 8007c48:	690c      	ldr	r4, [r1, #16]
 8007c4a:	1b12      	subs	r2, r2, r4
 8007c4c:	d10e      	bne.n	8007c6c <__mcmp+0x28>
 8007c4e:	f100 0314 	add.w	r3, r0, #20
 8007c52:	3114      	adds	r1, #20
 8007c54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c64:	42a5      	cmp	r5, r4
 8007c66:	d003      	beq.n	8007c70 <__mcmp+0x2c>
 8007c68:	d305      	bcc.n	8007c76 <__mcmp+0x32>
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	bd30      	pop	{r4, r5, pc}
 8007c70:	4283      	cmp	r3, r0
 8007c72:	d3f3      	bcc.n	8007c5c <__mcmp+0x18>
 8007c74:	e7fa      	b.n	8007c6c <__mcmp+0x28>
 8007c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c7a:	e7f7      	b.n	8007c6c <__mcmp+0x28>

08007c7c <__mdiff>:
 8007c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c80:	460c      	mov	r4, r1
 8007c82:	4606      	mov	r6, r0
 8007c84:	4611      	mov	r1, r2
 8007c86:	4620      	mov	r0, r4
 8007c88:	4690      	mov	r8, r2
 8007c8a:	f7ff ffdb 	bl	8007c44 <__mcmp>
 8007c8e:	1e05      	subs	r5, r0, #0
 8007c90:	d110      	bne.n	8007cb4 <__mdiff+0x38>
 8007c92:	4629      	mov	r1, r5
 8007c94:	4630      	mov	r0, r6
 8007c96:	f7ff fd09 	bl	80076ac <_Balloc>
 8007c9a:	b930      	cbnz	r0, 8007caa <__mdiff+0x2e>
 8007c9c:	4b3a      	ldr	r3, [pc, #232]	; (8007d88 <__mdiff+0x10c>)
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	f240 2132 	movw	r1, #562	; 0x232
 8007ca4:	4839      	ldr	r0, [pc, #228]	; (8007d8c <__mdiff+0x110>)
 8007ca6:	f7fc f9b3 	bl	8004010 <__assert_func>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb4:	bfa4      	itt	ge
 8007cb6:	4643      	movge	r3, r8
 8007cb8:	46a0      	movge	r8, r4
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007cc0:	bfa6      	itte	ge
 8007cc2:	461c      	movge	r4, r3
 8007cc4:	2500      	movge	r5, #0
 8007cc6:	2501      	movlt	r5, #1
 8007cc8:	f7ff fcf0 	bl	80076ac <_Balloc>
 8007ccc:	b920      	cbnz	r0, 8007cd8 <__mdiff+0x5c>
 8007cce:	4b2e      	ldr	r3, [pc, #184]	; (8007d88 <__mdiff+0x10c>)
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cd6:	e7e5      	b.n	8007ca4 <__mdiff+0x28>
 8007cd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007cdc:	6926      	ldr	r6, [r4, #16]
 8007cde:	60c5      	str	r5, [r0, #12]
 8007ce0:	f104 0914 	add.w	r9, r4, #20
 8007ce4:	f108 0514 	add.w	r5, r8, #20
 8007ce8:	f100 0e14 	add.w	lr, r0, #20
 8007cec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007cf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007cf4:	f108 0210 	add.w	r2, r8, #16
 8007cf8:	46f2      	mov	sl, lr
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d04:	fa1f f883 	uxth.w	r8, r3
 8007d08:	fa11 f18b 	uxtah	r1, r1, fp
 8007d0c:	0c1b      	lsrs	r3, r3, #16
 8007d0e:	eba1 0808 	sub.w	r8, r1, r8
 8007d12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d1a:	fa1f f888 	uxth.w	r8, r8
 8007d1e:	1419      	asrs	r1, r3, #16
 8007d20:	454e      	cmp	r6, r9
 8007d22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d26:	f84a 3b04 	str.w	r3, [sl], #4
 8007d2a:	d8e7      	bhi.n	8007cfc <__mdiff+0x80>
 8007d2c:	1b33      	subs	r3, r6, r4
 8007d2e:	3b15      	subs	r3, #21
 8007d30:	f023 0303 	bic.w	r3, r3, #3
 8007d34:	3304      	adds	r3, #4
 8007d36:	3415      	adds	r4, #21
 8007d38:	42a6      	cmp	r6, r4
 8007d3a:	bf38      	it	cc
 8007d3c:	2304      	movcc	r3, #4
 8007d3e:	441d      	add	r5, r3
 8007d40:	4473      	add	r3, lr
 8007d42:	469e      	mov	lr, r3
 8007d44:	462e      	mov	r6, r5
 8007d46:	4566      	cmp	r6, ip
 8007d48:	d30e      	bcc.n	8007d68 <__mdiff+0xec>
 8007d4a:	f10c 0203 	add.w	r2, ip, #3
 8007d4e:	1b52      	subs	r2, r2, r5
 8007d50:	f022 0203 	bic.w	r2, r2, #3
 8007d54:	3d03      	subs	r5, #3
 8007d56:	45ac      	cmp	ip, r5
 8007d58:	bf38      	it	cc
 8007d5a:	2200      	movcc	r2, #0
 8007d5c:	441a      	add	r2, r3
 8007d5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d62:	b17b      	cbz	r3, 8007d84 <__mdiff+0x108>
 8007d64:	6107      	str	r7, [r0, #16]
 8007d66:	e7a3      	b.n	8007cb0 <__mdiff+0x34>
 8007d68:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d6c:	fa11 f288 	uxtah	r2, r1, r8
 8007d70:	1414      	asrs	r4, r2, #16
 8007d72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d76:	b292      	uxth	r2, r2
 8007d78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d7c:	f84e 2b04 	str.w	r2, [lr], #4
 8007d80:	1421      	asrs	r1, r4, #16
 8007d82:	e7e0      	b.n	8007d46 <__mdiff+0xca>
 8007d84:	3f01      	subs	r7, #1
 8007d86:	e7ea      	b.n	8007d5e <__mdiff+0xe2>
 8007d88:	08008b00 	.word	0x08008b00
 8007d8c:	08008bf0 	.word	0x08008bf0

08007d90 <__ulp>:
 8007d90:	b082      	sub	sp, #8
 8007d92:	ed8d 0b00 	vstr	d0, [sp]
 8007d96:	9b01      	ldr	r3, [sp, #4]
 8007d98:	4912      	ldr	r1, [pc, #72]	; (8007de4 <__ulp+0x54>)
 8007d9a:	4019      	ands	r1, r3
 8007d9c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007da0:	2900      	cmp	r1, #0
 8007da2:	dd05      	ble.n	8007db0 <__ulp+0x20>
 8007da4:	2200      	movs	r2, #0
 8007da6:	460b      	mov	r3, r1
 8007da8:	ec43 2b10 	vmov	d0, r2, r3
 8007dac:	b002      	add	sp, #8
 8007dae:	4770      	bx	lr
 8007db0:	4249      	negs	r1, r1
 8007db2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007db6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007dba:	f04f 0200 	mov.w	r2, #0
 8007dbe:	f04f 0300 	mov.w	r3, #0
 8007dc2:	da04      	bge.n	8007dce <__ulp+0x3e>
 8007dc4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007dc8:	fa41 f300 	asr.w	r3, r1, r0
 8007dcc:	e7ec      	b.n	8007da8 <__ulp+0x18>
 8007dce:	f1a0 0114 	sub.w	r1, r0, #20
 8007dd2:	291e      	cmp	r1, #30
 8007dd4:	bfda      	itte	le
 8007dd6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007dda:	fa20 f101 	lsrle.w	r1, r0, r1
 8007dde:	2101      	movgt	r1, #1
 8007de0:	460a      	mov	r2, r1
 8007de2:	e7e1      	b.n	8007da8 <__ulp+0x18>
 8007de4:	7ff00000 	.word	0x7ff00000

08007de8 <__b2d>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	6905      	ldr	r5, [r0, #16]
 8007dec:	f100 0714 	add.w	r7, r0, #20
 8007df0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007df4:	1f2e      	subs	r6, r5, #4
 8007df6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f7ff fd48 	bl	8007890 <__hi0bits>
 8007e00:	f1c0 0320 	rsb	r3, r0, #32
 8007e04:	280a      	cmp	r0, #10
 8007e06:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007e84 <__b2d+0x9c>
 8007e0a:	600b      	str	r3, [r1, #0]
 8007e0c:	dc14      	bgt.n	8007e38 <__b2d+0x50>
 8007e0e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007e12:	fa24 f10e 	lsr.w	r1, r4, lr
 8007e16:	42b7      	cmp	r7, r6
 8007e18:	ea41 030c 	orr.w	r3, r1, ip
 8007e1c:	bf34      	ite	cc
 8007e1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007e22:	2100      	movcs	r1, #0
 8007e24:	3015      	adds	r0, #21
 8007e26:	fa04 f000 	lsl.w	r0, r4, r0
 8007e2a:	fa21 f10e 	lsr.w	r1, r1, lr
 8007e2e:	ea40 0201 	orr.w	r2, r0, r1
 8007e32:	ec43 2b10 	vmov	d0, r2, r3
 8007e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e38:	42b7      	cmp	r7, r6
 8007e3a:	bf3a      	itte	cc
 8007e3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007e40:	f1a5 0608 	subcc.w	r6, r5, #8
 8007e44:	2100      	movcs	r1, #0
 8007e46:	380b      	subs	r0, #11
 8007e48:	d017      	beq.n	8007e7a <__b2d+0x92>
 8007e4a:	f1c0 0c20 	rsb	ip, r0, #32
 8007e4e:	fa04 f500 	lsl.w	r5, r4, r0
 8007e52:	42be      	cmp	r6, r7
 8007e54:	fa21 f40c 	lsr.w	r4, r1, ip
 8007e58:	ea45 0504 	orr.w	r5, r5, r4
 8007e5c:	bf8c      	ite	hi
 8007e5e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007e62:	2400      	movls	r4, #0
 8007e64:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007e68:	fa01 f000 	lsl.w	r0, r1, r0
 8007e6c:	fa24 f40c 	lsr.w	r4, r4, ip
 8007e70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e74:	ea40 0204 	orr.w	r2, r0, r4
 8007e78:	e7db      	b.n	8007e32 <__b2d+0x4a>
 8007e7a:	ea44 030c 	orr.w	r3, r4, ip
 8007e7e:	460a      	mov	r2, r1
 8007e80:	e7d7      	b.n	8007e32 <__b2d+0x4a>
 8007e82:	bf00      	nop
 8007e84:	3ff00000 	.word	0x3ff00000

08007e88 <__d2b>:
 8007e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e8c:	4689      	mov	r9, r1
 8007e8e:	2101      	movs	r1, #1
 8007e90:	ec57 6b10 	vmov	r6, r7, d0
 8007e94:	4690      	mov	r8, r2
 8007e96:	f7ff fc09 	bl	80076ac <_Balloc>
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	b930      	cbnz	r0, 8007eac <__d2b+0x24>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	4b25      	ldr	r3, [pc, #148]	; (8007f38 <__d2b+0xb0>)
 8007ea2:	4826      	ldr	r0, [pc, #152]	; (8007f3c <__d2b+0xb4>)
 8007ea4:	f240 310a 	movw	r1, #778	; 0x30a
 8007ea8:	f7fc f8b2 	bl	8004010 <__assert_func>
 8007eac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007eb4:	bb35      	cbnz	r5, 8007f04 <__d2b+0x7c>
 8007eb6:	2e00      	cmp	r6, #0
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	d028      	beq.n	8007f0e <__d2b+0x86>
 8007ebc:	4668      	mov	r0, sp
 8007ebe:	9600      	str	r6, [sp, #0]
 8007ec0:	f7ff fd06 	bl	80078d0 <__lo0bits>
 8007ec4:	9900      	ldr	r1, [sp, #0]
 8007ec6:	b300      	cbz	r0, 8007f0a <__d2b+0x82>
 8007ec8:	9a01      	ldr	r2, [sp, #4]
 8007eca:	f1c0 0320 	rsb	r3, r0, #32
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	430b      	orrs	r3, r1
 8007ed4:	40c2      	lsrs	r2, r0
 8007ed6:	6163      	str	r3, [r4, #20]
 8007ed8:	9201      	str	r2, [sp, #4]
 8007eda:	9b01      	ldr	r3, [sp, #4]
 8007edc:	61a3      	str	r3, [r4, #24]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bf14      	ite	ne
 8007ee2:	2202      	movne	r2, #2
 8007ee4:	2201      	moveq	r2, #1
 8007ee6:	6122      	str	r2, [r4, #16]
 8007ee8:	b1d5      	cbz	r5, 8007f20 <__d2b+0x98>
 8007eea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007eee:	4405      	add	r5, r0
 8007ef0:	f8c9 5000 	str.w	r5, [r9]
 8007ef4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ef8:	f8c8 0000 	str.w	r0, [r8]
 8007efc:	4620      	mov	r0, r4
 8007efe:	b003      	add	sp, #12
 8007f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f08:	e7d5      	b.n	8007eb6 <__d2b+0x2e>
 8007f0a:	6161      	str	r1, [r4, #20]
 8007f0c:	e7e5      	b.n	8007eda <__d2b+0x52>
 8007f0e:	a801      	add	r0, sp, #4
 8007f10:	f7ff fcde 	bl	80078d0 <__lo0bits>
 8007f14:	9b01      	ldr	r3, [sp, #4]
 8007f16:	6163      	str	r3, [r4, #20]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	6122      	str	r2, [r4, #16]
 8007f1c:	3020      	adds	r0, #32
 8007f1e:	e7e3      	b.n	8007ee8 <__d2b+0x60>
 8007f20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f28:	f8c9 0000 	str.w	r0, [r9]
 8007f2c:	6918      	ldr	r0, [r3, #16]
 8007f2e:	f7ff fcaf 	bl	8007890 <__hi0bits>
 8007f32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f36:	e7df      	b.n	8007ef8 <__d2b+0x70>
 8007f38:	08008b00 	.word	0x08008b00
 8007f3c:	08008bf0 	.word	0x08008bf0

08007f40 <__ratio>:
 8007f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	4688      	mov	r8, r1
 8007f46:	4669      	mov	r1, sp
 8007f48:	4681      	mov	r9, r0
 8007f4a:	f7ff ff4d 	bl	8007de8 <__b2d>
 8007f4e:	a901      	add	r1, sp, #4
 8007f50:	4640      	mov	r0, r8
 8007f52:	ec55 4b10 	vmov	r4, r5, d0
 8007f56:	ee10 aa10 	vmov	sl, s0
 8007f5a:	f7ff ff45 	bl	8007de8 <__b2d>
 8007f5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f62:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8007f66:	1a59      	subs	r1, r3, r1
 8007f68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007f72:	ec57 6b10 	vmov	r6, r7, d0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bfd6      	itet	le
 8007f7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f7e:	462a      	movgt	r2, r5
 8007f80:	463a      	movle	r2, r7
 8007f82:	46ab      	mov	fp, r5
 8007f84:	bfd6      	itet	le
 8007f86:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8007f8a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007f8e:	ee00 3a90 	vmovle	s1, r3
 8007f92:	ec4b ab17 	vmov	d7, sl, fp
 8007f96:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8007f9a:	b003      	add	sp, #12
 8007f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fa0 <__copybits>:
 8007fa0:	3901      	subs	r1, #1
 8007fa2:	b570      	push	{r4, r5, r6, lr}
 8007fa4:	1149      	asrs	r1, r1, #5
 8007fa6:	6914      	ldr	r4, [r2, #16]
 8007fa8:	3101      	adds	r1, #1
 8007faa:	f102 0314 	add.w	r3, r2, #20
 8007fae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007fb2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007fb6:	1f05      	subs	r5, r0, #4
 8007fb8:	42a3      	cmp	r3, r4
 8007fba:	d30c      	bcc.n	8007fd6 <__copybits+0x36>
 8007fbc:	1aa3      	subs	r3, r4, r2
 8007fbe:	3b11      	subs	r3, #17
 8007fc0:	f023 0303 	bic.w	r3, r3, #3
 8007fc4:	3211      	adds	r2, #17
 8007fc6:	42a2      	cmp	r2, r4
 8007fc8:	bf88      	it	hi
 8007fca:	2300      	movhi	r3, #0
 8007fcc:	4418      	add	r0, r3
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4288      	cmp	r0, r1
 8007fd2:	d305      	bcc.n	8007fe0 <__copybits+0x40>
 8007fd4:	bd70      	pop	{r4, r5, r6, pc}
 8007fd6:	f853 6b04 	ldr.w	r6, [r3], #4
 8007fda:	f845 6f04 	str.w	r6, [r5, #4]!
 8007fde:	e7eb      	b.n	8007fb8 <__copybits+0x18>
 8007fe0:	f840 3b04 	str.w	r3, [r0], #4
 8007fe4:	e7f4      	b.n	8007fd0 <__copybits+0x30>

08007fe6 <__any_on>:
 8007fe6:	f100 0214 	add.w	r2, r0, #20
 8007fea:	6900      	ldr	r0, [r0, #16]
 8007fec:	114b      	asrs	r3, r1, #5
 8007fee:	4298      	cmp	r0, r3
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	db11      	blt.n	8008018 <__any_on+0x32>
 8007ff4:	dd0a      	ble.n	800800c <__any_on+0x26>
 8007ff6:	f011 011f 	ands.w	r1, r1, #31
 8007ffa:	d007      	beq.n	800800c <__any_on+0x26>
 8007ffc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008000:	fa24 f001 	lsr.w	r0, r4, r1
 8008004:	fa00 f101 	lsl.w	r1, r0, r1
 8008008:	428c      	cmp	r4, r1
 800800a:	d10b      	bne.n	8008024 <__any_on+0x3e>
 800800c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008010:	4293      	cmp	r3, r2
 8008012:	d803      	bhi.n	800801c <__any_on+0x36>
 8008014:	2000      	movs	r0, #0
 8008016:	bd10      	pop	{r4, pc}
 8008018:	4603      	mov	r3, r0
 800801a:	e7f7      	b.n	800800c <__any_on+0x26>
 800801c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008020:	2900      	cmp	r1, #0
 8008022:	d0f5      	beq.n	8008010 <__any_on+0x2a>
 8008024:	2001      	movs	r0, #1
 8008026:	e7f6      	b.n	8008016 <__any_on+0x30>

08008028 <_calloc_r>:
 8008028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800802a:	fba1 2402 	umull	r2, r4, r1, r2
 800802e:	b94c      	cbnz	r4, 8008044 <_calloc_r+0x1c>
 8008030:	4611      	mov	r1, r2
 8008032:	9201      	str	r2, [sp, #4]
 8008034:	f000 f87a 	bl	800812c <_malloc_r>
 8008038:	9a01      	ldr	r2, [sp, #4]
 800803a:	4605      	mov	r5, r0
 800803c:	b930      	cbnz	r0, 800804c <_calloc_r+0x24>
 800803e:	4628      	mov	r0, r5
 8008040:	b003      	add	sp, #12
 8008042:	bd30      	pop	{r4, r5, pc}
 8008044:	220c      	movs	r2, #12
 8008046:	6002      	str	r2, [r0, #0]
 8008048:	2500      	movs	r5, #0
 800804a:	e7f8      	b.n	800803e <_calloc_r+0x16>
 800804c:	4621      	mov	r1, r4
 800804e:	f7fc f839 	bl	80040c4 <memset>
 8008052:	e7f4      	b.n	800803e <_calloc_r+0x16>

08008054 <_free_r>:
 8008054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008056:	2900      	cmp	r1, #0
 8008058:	d044      	beq.n	80080e4 <_free_r+0x90>
 800805a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800805e:	9001      	str	r0, [sp, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f1a1 0404 	sub.w	r4, r1, #4
 8008066:	bfb8      	it	lt
 8008068:	18e4      	addlt	r4, r4, r3
 800806a:	f000 fb73 	bl	8008754 <__malloc_lock>
 800806e:	4a1e      	ldr	r2, [pc, #120]	; (80080e8 <_free_r+0x94>)
 8008070:	9801      	ldr	r0, [sp, #4]
 8008072:	6813      	ldr	r3, [r2, #0]
 8008074:	b933      	cbnz	r3, 8008084 <_free_r+0x30>
 8008076:	6063      	str	r3, [r4, #4]
 8008078:	6014      	str	r4, [r2, #0]
 800807a:	b003      	add	sp, #12
 800807c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008080:	f000 bb6e 	b.w	8008760 <__malloc_unlock>
 8008084:	42a3      	cmp	r3, r4
 8008086:	d908      	bls.n	800809a <_free_r+0x46>
 8008088:	6825      	ldr	r5, [r4, #0]
 800808a:	1961      	adds	r1, r4, r5
 800808c:	428b      	cmp	r3, r1
 800808e:	bf01      	itttt	eq
 8008090:	6819      	ldreq	r1, [r3, #0]
 8008092:	685b      	ldreq	r3, [r3, #4]
 8008094:	1949      	addeq	r1, r1, r5
 8008096:	6021      	streq	r1, [r4, #0]
 8008098:	e7ed      	b.n	8008076 <_free_r+0x22>
 800809a:	461a      	mov	r2, r3
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	b10b      	cbz	r3, 80080a4 <_free_r+0x50>
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	d9fa      	bls.n	800809a <_free_r+0x46>
 80080a4:	6811      	ldr	r1, [r2, #0]
 80080a6:	1855      	adds	r5, r2, r1
 80080a8:	42a5      	cmp	r5, r4
 80080aa:	d10b      	bne.n	80080c4 <_free_r+0x70>
 80080ac:	6824      	ldr	r4, [r4, #0]
 80080ae:	4421      	add	r1, r4
 80080b0:	1854      	adds	r4, r2, r1
 80080b2:	42a3      	cmp	r3, r4
 80080b4:	6011      	str	r1, [r2, #0]
 80080b6:	d1e0      	bne.n	800807a <_free_r+0x26>
 80080b8:	681c      	ldr	r4, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	6053      	str	r3, [r2, #4]
 80080be:	4421      	add	r1, r4
 80080c0:	6011      	str	r1, [r2, #0]
 80080c2:	e7da      	b.n	800807a <_free_r+0x26>
 80080c4:	d902      	bls.n	80080cc <_free_r+0x78>
 80080c6:	230c      	movs	r3, #12
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	e7d6      	b.n	800807a <_free_r+0x26>
 80080cc:	6825      	ldr	r5, [r4, #0]
 80080ce:	1961      	adds	r1, r4, r5
 80080d0:	428b      	cmp	r3, r1
 80080d2:	bf04      	itt	eq
 80080d4:	6819      	ldreq	r1, [r3, #0]
 80080d6:	685b      	ldreq	r3, [r3, #4]
 80080d8:	6063      	str	r3, [r4, #4]
 80080da:	bf04      	itt	eq
 80080dc:	1949      	addeq	r1, r1, r5
 80080de:	6021      	streq	r1, [r4, #0]
 80080e0:	6054      	str	r4, [r2, #4]
 80080e2:	e7ca      	b.n	800807a <_free_r+0x26>
 80080e4:	b003      	add	sp, #12
 80080e6:	bd30      	pop	{r4, r5, pc}
 80080e8:	2000030c 	.word	0x2000030c

080080ec <sbrk_aligned>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	4e0e      	ldr	r6, [pc, #56]	; (8008128 <sbrk_aligned+0x3c>)
 80080f0:	460c      	mov	r4, r1
 80080f2:	6831      	ldr	r1, [r6, #0]
 80080f4:	4605      	mov	r5, r0
 80080f6:	b911      	cbnz	r1, 80080fe <sbrk_aligned+0x12>
 80080f8:	f000 fa1e 	bl	8008538 <_sbrk_r>
 80080fc:	6030      	str	r0, [r6, #0]
 80080fe:	4621      	mov	r1, r4
 8008100:	4628      	mov	r0, r5
 8008102:	f000 fa19 	bl	8008538 <_sbrk_r>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d00a      	beq.n	8008120 <sbrk_aligned+0x34>
 800810a:	1cc4      	adds	r4, r0, #3
 800810c:	f024 0403 	bic.w	r4, r4, #3
 8008110:	42a0      	cmp	r0, r4
 8008112:	d007      	beq.n	8008124 <sbrk_aligned+0x38>
 8008114:	1a21      	subs	r1, r4, r0
 8008116:	4628      	mov	r0, r5
 8008118:	f000 fa0e 	bl	8008538 <_sbrk_r>
 800811c:	3001      	adds	r0, #1
 800811e:	d101      	bne.n	8008124 <sbrk_aligned+0x38>
 8008120:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008124:	4620      	mov	r0, r4
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	20000310 	.word	0x20000310

0800812c <_malloc_r>:
 800812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008130:	1ccd      	adds	r5, r1, #3
 8008132:	f025 0503 	bic.w	r5, r5, #3
 8008136:	3508      	adds	r5, #8
 8008138:	2d0c      	cmp	r5, #12
 800813a:	bf38      	it	cc
 800813c:	250c      	movcc	r5, #12
 800813e:	2d00      	cmp	r5, #0
 8008140:	4607      	mov	r7, r0
 8008142:	db01      	blt.n	8008148 <_malloc_r+0x1c>
 8008144:	42a9      	cmp	r1, r5
 8008146:	d905      	bls.n	8008154 <_malloc_r+0x28>
 8008148:	230c      	movs	r3, #12
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	2600      	movs	r6, #0
 800814e:	4630      	mov	r0, r6
 8008150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008154:	4e2e      	ldr	r6, [pc, #184]	; (8008210 <_malloc_r+0xe4>)
 8008156:	f000 fafd 	bl	8008754 <__malloc_lock>
 800815a:	6833      	ldr	r3, [r6, #0]
 800815c:	461c      	mov	r4, r3
 800815e:	bb34      	cbnz	r4, 80081ae <_malloc_r+0x82>
 8008160:	4629      	mov	r1, r5
 8008162:	4638      	mov	r0, r7
 8008164:	f7ff ffc2 	bl	80080ec <sbrk_aligned>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	4604      	mov	r4, r0
 800816c:	d14d      	bne.n	800820a <_malloc_r+0xde>
 800816e:	6834      	ldr	r4, [r6, #0]
 8008170:	4626      	mov	r6, r4
 8008172:	2e00      	cmp	r6, #0
 8008174:	d140      	bne.n	80081f8 <_malloc_r+0xcc>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	4631      	mov	r1, r6
 800817a:	4638      	mov	r0, r7
 800817c:	eb04 0803 	add.w	r8, r4, r3
 8008180:	f000 f9da 	bl	8008538 <_sbrk_r>
 8008184:	4580      	cmp	r8, r0
 8008186:	d13a      	bne.n	80081fe <_malloc_r+0xd2>
 8008188:	6821      	ldr	r1, [r4, #0]
 800818a:	3503      	adds	r5, #3
 800818c:	1a6d      	subs	r5, r5, r1
 800818e:	f025 0503 	bic.w	r5, r5, #3
 8008192:	3508      	adds	r5, #8
 8008194:	2d0c      	cmp	r5, #12
 8008196:	bf38      	it	cc
 8008198:	250c      	movcc	r5, #12
 800819a:	4629      	mov	r1, r5
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff ffa5 	bl	80080ec <sbrk_aligned>
 80081a2:	3001      	adds	r0, #1
 80081a4:	d02b      	beq.n	80081fe <_malloc_r+0xd2>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	442b      	add	r3, r5
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	e00e      	b.n	80081cc <_malloc_r+0xa0>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	1b52      	subs	r2, r2, r5
 80081b2:	d41e      	bmi.n	80081f2 <_malloc_r+0xc6>
 80081b4:	2a0b      	cmp	r2, #11
 80081b6:	d916      	bls.n	80081e6 <_malloc_r+0xba>
 80081b8:	1961      	adds	r1, r4, r5
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	6025      	str	r5, [r4, #0]
 80081be:	bf18      	it	ne
 80081c0:	6059      	strne	r1, [r3, #4]
 80081c2:	6863      	ldr	r3, [r4, #4]
 80081c4:	bf08      	it	eq
 80081c6:	6031      	streq	r1, [r6, #0]
 80081c8:	5162      	str	r2, [r4, r5]
 80081ca:	604b      	str	r3, [r1, #4]
 80081cc:	4638      	mov	r0, r7
 80081ce:	f104 060b 	add.w	r6, r4, #11
 80081d2:	f000 fac5 	bl	8008760 <__malloc_unlock>
 80081d6:	f026 0607 	bic.w	r6, r6, #7
 80081da:	1d23      	adds	r3, r4, #4
 80081dc:	1af2      	subs	r2, r6, r3
 80081de:	d0b6      	beq.n	800814e <_malloc_r+0x22>
 80081e0:	1b9b      	subs	r3, r3, r6
 80081e2:	50a3      	str	r3, [r4, r2]
 80081e4:	e7b3      	b.n	800814e <_malloc_r+0x22>
 80081e6:	6862      	ldr	r2, [r4, #4]
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	bf0c      	ite	eq
 80081ec:	6032      	streq	r2, [r6, #0]
 80081ee:	605a      	strne	r2, [r3, #4]
 80081f0:	e7ec      	b.n	80081cc <_malloc_r+0xa0>
 80081f2:	4623      	mov	r3, r4
 80081f4:	6864      	ldr	r4, [r4, #4]
 80081f6:	e7b2      	b.n	800815e <_malloc_r+0x32>
 80081f8:	4634      	mov	r4, r6
 80081fa:	6876      	ldr	r6, [r6, #4]
 80081fc:	e7b9      	b.n	8008172 <_malloc_r+0x46>
 80081fe:	230c      	movs	r3, #12
 8008200:	603b      	str	r3, [r7, #0]
 8008202:	4638      	mov	r0, r7
 8008204:	f000 faac 	bl	8008760 <__malloc_unlock>
 8008208:	e7a1      	b.n	800814e <_malloc_r+0x22>
 800820a:	6025      	str	r5, [r4, #0]
 800820c:	e7de      	b.n	80081cc <_malloc_r+0xa0>
 800820e:	bf00      	nop
 8008210:	2000030c 	.word	0x2000030c

08008214 <_realloc_r>:
 8008214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008218:	4680      	mov	r8, r0
 800821a:	4614      	mov	r4, r2
 800821c:	460e      	mov	r6, r1
 800821e:	b921      	cbnz	r1, 800822a <_realloc_r+0x16>
 8008220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008224:	4611      	mov	r1, r2
 8008226:	f7ff bf81 	b.w	800812c <_malloc_r>
 800822a:	b92a      	cbnz	r2, 8008238 <_realloc_r+0x24>
 800822c:	f7ff ff12 	bl	8008054 <_free_r>
 8008230:	4625      	mov	r5, r4
 8008232:	4628      	mov	r0, r5
 8008234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008238:	f000 fa98 	bl	800876c <_malloc_usable_size_r>
 800823c:	4284      	cmp	r4, r0
 800823e:	4607      	mov	r7, r0
 8008240:	d802      	bhi.n	8008248 <_realloc_r+0x34>
 8008242:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008246:	d812      	bhi.n	800826e <_realloc_r+0x5a>
 8008248:	4621      	mov	r1, r4
 800824a:	4640      	mov	r0, r8
 800824c:	f7ff ff6e 	bl	800812c <_malloc_r>
 8008250:	4605      	mov	r5, r0
 8008252:	2800      	cmp	r0, #0
 8008254:	d0ed      	beq.n	8008232 <_realloc_r+0x1e>
 8008256:	42bc      	cmp	r4, r7
 8008258:	4622      	mov	r2, r4
 800825a:	4631      	mov	r1, r6
 800825c:	bf28      	it	cs
 800825e:	463a      	movcs	r2, r7
 8008260:	f7ff f9fc 	bl	800765c <memcpy>
 8008264:	4631      	mov	r1, r6
 8008266:	4640      	mov	r0, r8
 8008268:	f7ff fef4 	bl	8008054 <_free_r>
 800826c:	e7e1      	b.n	8008232 <_realloc_r+0x1e>
 800826e:	4635      	mov	r5, r6
 8008270:	e7df      	b.n	8008232 <_realloc_r+0x1e>

08008272 <__ssputs_r>:
 8008272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008276:	688e      	ldr	r6, [r1, #8]
 8008278:	429e      	cmp	r6, r3
 800827a:	4682      	mov	sl, r0
 800827c:	460c      	mov	r4, r1
 800827e:	4690      	mov	r8, r2
 8008280:	461f      	mov	r7, r3
 8008282:	d838      	bhi.n	80082f6 <__ssputs_r+0x84>
 8008284:	898a      	ldrh	r2, [r1, #12]
 8008286:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800828a:	d032      	beq.n	80082f2 <__ssputs_r+0x80>
 800828c:	6825      	ldr	r5, [r4, #0]
 800828e:	6909      	ldr	r1, [r1, #16]
 8008290:	eba5 0901 	sub.w	r9, r5, r1
 8008294:	6965      	ldr	r5, [r4, #20]
 8008296:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800829a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800829e:	3301      	adds	r3, #1
 80082a0:	444b      	add	r3, r9
 80082a2:	106d      	asrs	r5, r5, #1
 80082a4:	429d      	cmp	r5, r3
 80082a6:	bf38      	it	cc
 80082a8:	461d      	movcc	r5, r3
 80082aa:	0553      	lsls	r3, r2, #21
 80082ac:	d531      	bpl.n	8008312 <__ssputs_r+0xa0>
 80082ae:	4629      	mov	r1, r5
 80082b0:	f7ff ff3c 	bl	800812c <_malloc_r>
 80082b4:	4606      	mov	r6, r0
 80082b6:	b950      	cbnz	r0, 80082ce <__ssputs_r+0x5c>
 80082b8:	230c      	movs	r3, #12
 80082ba:	f8ca 3000 	str.w	r3, [sl]
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ce:	6921      	ldr	r1, [r4, #16]
 80082d0:	464a      	mov	r2, r9
 80082d2:	f7ff f9c3 	bl	800765c <memcpy>
 80082d6:	89a3      	ldrh	r3, [r4, #12]
 80082d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	6126      	str	r6, [r4, #16]
 80082e4:	6165      	str	r5, [r4, #20]
 80082e6:	444e      	add	r6, r9
 80082e8:	eba5 0509 	sub.w	r5, r5, r9
 80082ec:	6026      	str	r6, [r4, #0]
 80082ee:	60a5      	str	r5, [r4, #8]
 80082f0:	463e      	mov	r6, r7
 80082f2:	42be      	cmp	r6, r7
 80082f4:	d900      	bls.n	80082f8 <__ssputs_r+0x86>
 80082f6:	463e      	mov	r6, r7
 80082f8:	6820      	ldr	r0, [r4, #0]
 80082fa:	4632      	mov	r2, r6
 80082fc:	4641      	mov	r1, r8
 80082fe:	f7ff f9bb 	bl	8007678 <memmove>
 8008302:	68a3      	ldr	r3, [r4, #8]
 8008304:	1b9b      	subs	r3, r3, r6
 8008306:	60a3      	str	r3, [r4, #8]
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	4433      	add	r3, r6
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	2000      	movs	r0, #0
 8008310:	e7db      	b.n	80082ca <__ssputs_r+0x58>
 8008312:	462a      	mov	r2, r5
 8008314:	f7ff ff7e 	bl	8008214 <_realloc_r>
 8008318:	4606      	mov	r6, r0
 800831a:	2800      	cmp	r0, #0
 800831c:	d1e1      	bne.n	80082e2 <__ssputs_r+0x70>
 800831e:	6921      	ldr	r1, [r4, #16]
 8008320:	4650      	mov	r0, sl
 8008322:	f7ff fe97 	bl	8008054 <_free_r>
 8008326:	e7c7      	b.n	80082b8 <__ssputs_r+0x46>

08008328 <_svfiprintf_r>:
 8008328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832c:	4698      	mov	r8, r3
 800832e:	898b      	ldrh	r3, [r1, #12]
 8008330:	061b      	lsls	r3, r3, #24
 8008332:	b09d      	sub	sp, #116	; 0x74
 8008334:	4607      	mov	r7, r0
 8008336:	460d      	mov	r5, r1
 8008338:	4614      	mov	r4, r2
 800833a:	d50e      	bpl.n	800835a <_svfiprintf_r+0x32>
 800833c:	690b      	ldr	r3, [r1, #16]
 800833e:	b963      	cbnz	r3, 800835a <_svfiprintf_r+0x32>
 8008340:	2140      	movs	r1, #64	; 0x40
 8008342:	f7ff fef3 	bl	800812c <_malloc_r>
 8008346:	6028      	str	r0, [r5, #0]
 8008348:	6128      	str	r0, [r5, #16]
 800834a:	b920      	cbnz	r0, 8008356 <_svfiprintf_r+0x2e>
 800834c:	230c      	movs	r3, #12
 800834e:	603b      	str	r3, [r7, #0]
 8008350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008354:	e0d1      	b.n	80084fa <_svfiprintf_r+0x1d2>
 8008356:	2340      	movs	r3, #64	; 0x40
 8008358:	616b      	str	r3, [r5, #20]
 800835a:	2300      	movs	r3, #0
 800835c:	9309      	str	r3, [sp, #36]	; 0x24
 800835e:	2320      	movs	r3, #32
 8008360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008364:	f8cd 800c 	str.w	r8, [sp, #12]
 8008368:	2330      	movs	r3, #48	; 0x30
 800836a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008514 <_svfiprintf_r+0x1ec>
 800836e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008372:	f04f 0901 	mov.w	r9, #1
 8008376:	4623      	mov	r3, r4
 8008378:	469a      	mov	sl, r3
 800837a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800837e:	b10a      	cbz	r2, 8008384 <_svfiprintf_r+0x5c>
 8008380:	2a25      	cmp	r2, #37	; 0x25
 8008382:	d1f9      	bne.n	8008378 <_svfiprintf_r+0x50>
 8008384:	ebba 0b04 	subs.w	fp, sl, r4
 8008388:	d00b      	beq.n	80083a2 <_svfiprintf_r+0x7a>
 800838a:	465b      	mov	r3, fp
 800838c:	4622      	mov	r2, r4
 800838e:	4629      	mov	r1, r5
 8008390:	4638      	mov	r0, r7
 8008392:	f7ff ff6e 	bl	8008272 <__ssputs_r>
 8008396:	3001      	adds	r0, #1
 8008398:	f000 80aa 	beq.w	80084f0 <_svfiprintf_r+0x1c8>
 800839c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800839e:	445a      	add	r2, fp
 80083a0:	9209      	str	r2, [sp, #36]	; 0x24
 80083a2:	f89a 3000 	ldrb.w	r3, [sl]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 80a2 	beq.w	80084f0 <_svfiprintf_r+0x1c8>
 80083ac:	2300      	movs	r3, #0
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b6:	f10a 0a01 	add.w	sl, sl, #1
 80083ba:	9304      	str	r3, [sp, #16]
 80083bc:	9307      	str	r3, [sp, #28]
 80083be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083c2:	931a      	str	r3, [sp, #104]	; 0x68
 80083c4:	4654      	mov	r4, sl
 80083c6:	2205      	movs	r2, #5
 80083c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083cc:	4851      	ldr	r0, [pc, #324]	; (8008514 <_svfiprintf_r+0x1ec>)
 80083ce:	f7f7 ff3f 	bl	8000250 <memchr>
 80083d2:	9a04      	ldr	r2, [sp, #16]
 80083d4:	b9d8      	cbnz	r0, 800840e <_svfiprintf_r+0xe6>
 80083d6:	06d0      	lsls	r0, r2, #27
 80083d8:	bf44      	itt	mi
 80083da:	2320      	movmi	r3, #32
 80083dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e0:	0711      	lsls	r1, r2, #28
 80083e2:	bf44      	itt	mi
 80083e4:	232b      	movmi	r3, #43	; 0x2b
 80083e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ea:	f89a 3000 	ldrb.w	r3, [sl]
 80083ee:	2b2a      	cmp	r3, #42	; 0x2a
 80083f0:	d015      	beq.n	800841e <_svfiprintf_r+0xf6>
 80083f2:	9a07      	ldr	r2, [sp, #28]
 80083f4:	4654      	mov	r4, sl
 80083f6:	2000      	movs	r0, #0
 80083f8:	f04f 0c0a 	mov.w	ip, #10
 80083fc:	4621      	mov	r1, r4
 80083fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008402:	3b30      	subs	r3, #48	; 0x30
 8008404:	2b09      	cmp	r3, #9
 8008406:	d94e      	bls.n	80084a6 <_svfiprintf_r+0x17e>
 8008408:	b1b0      	cbz	r0, 8008438 <_svfiprintf_r+0x110>
 800840a:	9207      	str	r2, [sp, #28]
 800840c:	e014      	b.n	8008438 <_svfiprintf_r+0x110>
 800840e:	eba0 0308 	sub.w	r3, r0, r8
 8008412:	fa09 f303 	lsl.w	r3, r9, r3
 8008416:	4313      	orrs	r3, r2
 8008418:	9304      	str	r3, [sp, #16]
 800841a:	46a2      	mov	sl, r4
 800841c:	e7d2      	b.n	80083c4 <_svfiprintf_r+0x9c>
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	1d19      	adds	r1, r3, #4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	9103      	str	r1, [sp, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	bfbb      	ittet	lt
 800842a:	425b      	neglt	r3, r3
 800842c:	f042 0202 	orrlt.w	r2, r2, #2
 8008430:	9307      	strge	r3, [sp, #28]
 8008432:	9307      	strlt	r3, [sp, #28]
 8008434:	bfb8      	it	lt
 8008436:	9204      	strlt	r2, [sp, #16]
 8008438:	7823      	ldrb	r3, [r4, #0]
 800843a:	2b2e      	cmp	r3, #46	; 0x2e
 800843c:	d10c      	bne.n	8008458 <_svfiprintf_r+0x130>
 800843e:	7863      	ldrb	r3, [r4, #1]
 8008440:	2b2a      	cmp	r3, #42	; 0x2a
 8008442:	d135      	bne.n	80084b0 <_svfiprintf_r+0x188>
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	1d1a      	adds	r2, r3, #4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	9203      	str	r2, [sp, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	bfb8      	it	lt
 8008450:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008454:	3402      	adds	r4, #2
 8008456:	9305      	str	r3, [sp, #20]
 8008458:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008524 <_svfiprintf_r+0x1fc>
 800845c:	7821      	ldrb	r1, [r4, #0]
 800845e:	2203      	movs	r2, #3
 8008460:	4650      	mov	r0, sl
 8008462:	f7f7 fef5 	bl	8000250 <memchr>
 8008466:	b140      	cbz	r0, 800847a <_svfiprintf_r+0x152>
 8008468:	2340      	movs	r3, #64	; 0x40
 800846a:	eba0 000a 	sub.w	r0, r0, sl
 800846e:	fa03 f000 	lsl.w	r0, r3, r0
 8008472:	9b04      	ldr	r3, [sp, #16]
 8008474:	4303      	orrs	r3, r0
 8008476:	3401      	adds	r4, #1
 8008478:	9304      	str	r3, [sp, #16]
 800847a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800847e:	4826      	ldr	r0, [pc, #152]	; (8008518 <_svfiprintf_r+0x1f0>)
 8008480:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008484:	2206      	movs	r2, #6
 8008486:	f7f7 fee3 	bl	8000250 <memchr>
 800848a:	2800      	cmp	r0, #0
 800848c:	d038      	beq.n	8008500 <_svfiprintf_r+0x1d8>
 800848e:	4b23      	ldr	r3, [pc, #140]	; (800851c <_svfiprintf_r+0x1f4>)
 8008490:	bb1b      	cbnz	r3, 80084da <_svfiprintf_r+0x1b2>
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	3307      	adds	r3, #7
 8008496:	f023 0307 	bic.w	r3, r3, #7
 800849a:	3308      	adds	r3, #8
 800849c:	9303      	str	r3, [sp, #12]
 800849e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a0:	4433      	add	r3, r6
 80084a2:	9309      	str	r3, [sp, #36]	; 0x24
 80084a4:	e767      	b.n	8008376 <_svfiprintf_r+0x4e>
 80084a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80084aa:	460c      	mov	r4, r1
 80084ac:	2001      	movs	r0, #1
 80084ae:	e7a5      	b.n	80083fc <_svfiprintf_r+0xd4>
 80084b0:	2300      	movs	r3, #0
 80084b2:	3401      	adds	r4, #1
 80084b4:	9305      	str	r3, [sp, #20]
 80084b6:	4619      	mov	r1, r3
 80084b8:	f04f 0c0a 	mov.w	ip, #10
 80084bc:	4620      	mov	r0, r4
 80084be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084c2:	3a30      	subs	r2, #48	; 0x30
 80084c4:	2a09      	cmp	r2, #9
 80084c6:	d903      	bls.n	80084d0 <_svfiprintf_r+0x1a8>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0c5      	beq.n	8008458 <_svfiprintf_r+0x130>
 80084cc:	9105      	str	r1, [sp, #20]
 80084ce:	e7c3      	b.n	8008458 <_svfiprintf_r+0x130>
 80084d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80084d4:	4604      	mov	r4, r0
 80084d6:	2301      	movs	r3, #1
 80084d8:	e7f0      	b.n	80084bc <_svfiprintf_r+0x194>
 80084da:	ab03      	add	r3, sp, #12
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	462a      	mov	r2, r5
 80084e0:	4b0f      	ldr	r3, [pc, #60]	; (8008520 <_svfiprintf_r+0x1f8>)
 80084e2:	a904      	add	r1, sp, #16
 80084e4:	4638      	mov	r0, r7
 80084e6:	f7fb ffdf 	bl	80044a8 <_printf_float>
 80084ea:	1c42      	adds	r2, r0, #1
 80084ec:	4606      	mov	r6, r0
 80084ee:	d1d6      	bne.n	800849e <_svfiprintf_r+0x176>
 80084f0:	89ab      	ldrh	r3, [r5, #12]
 80084f2:	065b      	lsls	r3, r3, #25
 80084f4:	f53f af2c 	bmi.w	8008350 <_svfiprintf_r+0x28>
 80084f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084fa:	b01d      	add	sp, #116	; 0x74
 80084fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008500:	ab03      	add	r3, sp, #12
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	462a      	mov	r2, r5
 8008506:	4b06      	ldr	r3, [pc, #24]	; (8008520 <_svfiprintf_r+0x1f8>)
 8008508:	a904      	add	r1, sp, #16
 800850a:	4638      	mov	r0, r7
 800850c:	f7fc fa58 	bl	80049c0 <_printf_i>
 8008510:	e7eb      	b.n	80084ea <_svfiprintf_r+0x1c2>
 8008512:	bf00      	nop
 8008514:	080088e4 	.word	0x080088e4
 8008518:	080088ee 	.word	0x080088ee
 800851c:	080044a9 	.word	0x080044a9
 8008520:	08008273 	.word	0x08008273
 8008524:	080088ea 	.word	0x080088ea

08008528 <nan>:
 8008528:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008530 <nan+0x8>
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	00000000 	.word	0x00000000
 8008534:	7ff80000 	.word	0x7ff80000

08008538 <_sbrk_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d06      	ldr	r5, [pc, #24]	; (8008554 <_sbrk_r+0x1c>)
 800853c:	2300      	movs	r3, #0
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	602b      	str	r3, [r5, #0]
 8008544:	f7f8 fcdc 	bl	8000f00 <_sbrk>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_sbrk_r+0x1a>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_sbrk_r+0x1a>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	20000314 	.word	0x20000314

08008558 <_raise_r>:
 8008558:	291f      	cmp	r1, #31
 800855a:	b538      	push	{r3, r4, r5, lr}
 800855c:	4604      	mov	r4, r0
 800855e:	460d      	mov	r5, r1
 8008560:	d904      	bls.n	800856c <_raise_r+0x14>
 8008562:	2316      	movs	r3, #22
 8008564:	6003      	str	r3, [r0, #0]
 8008566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800856e:	b112      	cbz	r2, 8008576 <_raise_r+0x1e>
 8008570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008574:	b94b      	cbnz	r3, 800858a <_raise_r+0x32>
 8008576:	4620      	mov	r0, r4
 8008578:	f000 f830 	bl	80085dc <_getpid_r>
 800857c:	462a      	mov	r2, r5
 800857e:	4601      	mov	r1, r0
 8008580:	4620      	mov	r0, r4
 8008582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008586:	f000 b817 	b.w	80085b8 <_kill_r>
 800858a:	2b01      	cmp	r3, #1
 800858c:	d00a      	beq.n	80085a4 <_raise_r+0x4c>
 800858e:	1c59      	adds	r1, r3, #1
 8008590:	d103      	bne.n	800859a <_raise_r+0x42>
 8008592:	2316      	movs	r3, #22
 8008594:	6003      	str	r3, [r0, #0]
 8008596:	2001      	movs	r0, #1
 8008598:	e7e7      	b.n	800856a <_raise_r+0x12>
 800859a:	2400      	movs	r4, #0
 800859c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085a0:	4628      	mov	r0, r5
 80085a2:	4798      	blx	r3
 80085a4:	2000      	movs	r0, #0
 80085a6:	e7e0      	b.n	800856a <_raise_r+0x12>

080085a8 <raise>:
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <raise+0xc>)
 80085aa:	4601      	mov	r1, r0
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	f7ff bfd3 	b.w	8008558 <_raise_r>
 80085b2:	bf00      	nop
 80085b4:	20000018 	.word	0x20000018

080085b8 <_kill_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4d07      	ldr	r5, [pc, #28]	; (80085d8 <_kill_r+0x20>)
 80085bc:	2300      	movs	r3, #0
 80085be:	4604      	mov	r4, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	4611      	mov	r1, r2
 80085c4:	602b      	str	r3, [r5, #0]
 80085c6:	f7f8 fc13 	bl	8000df0 <_kill>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	d102      	bne.n	80085d4 <_kill_r+0x1c>
 80085ce:	682b      	ldr	r3, [r5, #0]
 80085d0:	b103      	cbz	r3, 80085d4 <_kill_r+0x1c>
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
 80085d6:	bf00      	nop
 80085d8:	20000314 	.word	0x20000314

080085dc <_getpid_r>:
 80085dc:	f7f8 bc00 	b.w	8000de0 <_getpid>

080085e0 <__sread>:
 80085e0:	b510      	push	{r4, lr}
 80085e2:	460c      	mov	r4, r1
 80085e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e8:	f000 f8c8 	bl	800877c <_read_r>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	bfab      	itete	ge
 80085f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085f2:	89a3      	ldrhlt	r3, [r4, #12]
 80085f4:	181b      	addge	r3, r3, r0
 80085f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085fa:	bfac      	ite	ge
 80085fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80085fe:	81a3      	strhlt	r3, [r4, #12]
 8008600:	bd10      	pop	{r4, pc}

08008602 <__swrite>:
 8008602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008606:	461f      	mov	r7, r3
 8008608:	898b      	ldrh	r3, [r1, #12]
 800860a:	05db      	lsls	r3, r3, #23
 800860c:	4605      	mov	r5, r0
 800860e:	460c      	mov	r4, r1
 8008610:	4616      	mov	r6, r2
 8008612:	d505      	bpl.n	8008620 <__swrite+0x1e>
 8008614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008618:	2302      	movs	r3, #2
 800861a:	2200      	movs	r2, #0
 800861c:	f000 f888 	bl	8008730 <_lseek_r>
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800862a:	81a3      	strh	r3, [r4, #12]
 800862c:	4632      	mov	r2, r6
 800862e:	463b      	mov	r3, r7
 8008630:	4628      	mov	r0, r5
 8008632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008636:	f000 b837 	b.w	80086a8 <_write_r>

0800863a <__sseek>:
 800863a:	b510      	push	{r4, lr}
 800863c:	460c      	mov	r4, r1
 800863e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008642:	f000 f875 	bl	8008730 <_lseek_r>
 8008646:	1c43      	adds	r3, r0, #1
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	bf15      	itete	ne
 800864c:	6560      	strne	r0, [r4, #84]	; 0x54
 800864e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008656:	81a3      	strheq	r3, [r4, #12]
 8008658:	bf18      	it	ne
 800865a:	81a3      	strhne	r3, [r4, #12]
 800865c:	bd10      	pop	{r4, pc}

0800865e <__sclose>:
 800865e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008662:	f000 b833 	b.w	80086cc <_close_r>

08008666 <strncmp>:
 8008666:	b510      	push	{r4, lr}
 8008668:	b17a      	cbz	r2, 800868a <strncmp+0x24>
 800866a:	4603      	mov	r3, r0
 800866c:	3901      	subs	r1, #1
 800866e:	1884      	adds	r4, r0, r2
 8008670:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008674:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008678:	4290      	cmp	r0, r2
 800867a:	d101      	bne.n	8008680 <strncmp+0x1a>
 800867c:	42a3      	cmp	r3, r4
 800867e:	d101      	bne.n	8008684 <strncmp+0x1e>
 8008680:	1a80      	subs	r0, r0, r2
 8008682:	bd10      	pop	{r4, pc}
 8008684:	2800      	cmp	r0, #0
 8008686:	d1f3      	bne.n	8008670 <strncmp+0xa>
 8008688:	e7fa      	b.n	8008680 <strncmp+0x1a>
 800868a:	4610      	mov	r0, r2
 800868c:	e7f9      	b.n	8008682 <strncmp+0x1c>

0800868e <__ascii_wctomb>:
 800868e:	b149      	cbz	r1, 80086a4 <__ascii_wctomb+0x16>
 8008690:	2aff      	cmp	r2, #255	; 0xff
 8008692:	bf85      	ittet	hi
 8008694:	238a      	movhi	r3, #138	; 0x8a
 8008696:	6003      	strhi	r3, [r0, #0]
 8008698:	700a      	strbls	r2, [r1, #0]
 800869a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800869e:	bf98      	it	ls
 80086a0:	2001      	movls	r0, #1
 80086a2:	4770      	bx	lr
 80086a4:	4608      	mov	r0, r1
 80086a6:	4770      	bx	lr

080086a8 <_write_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4d07      	ldr	r5, [pc, #28]	; (80086c8 <_write_r+0x20>)
 80086ac:	4604      	mov	r4, r0
 80086ae:	4608      	mov	r0, r1
 80086b0:	4611      	mov	r1, r2
 80086b2:	2200      	movs	r2, #0
 80086b4:	602a      	str	r2, [r5, #0]
 80086b6:	461a      	mov	r2, r3
 80086b8:	f7f8 fbd1 	bl	8000e5e <_write>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_write_r+0x1e>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_write_r+0x1e>
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	20000314 	.word	0x20000314

080086cc <_close_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d06      	ldr	r5, [pc, #24]	; (80086e8 <_close_r+0x1c>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4608      	mov	r0, r1
 80086d6:	602b      	str	r3, [r5, #0]
 80086d8:	f7f8 fbdd 	bl	8000e96 <_close>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_close_r+0x1a>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_close_r+0x1a>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	20000314 	.word	0x20000314

080086ec <_fstat_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	4d07      	ldr	r5, [pc, #28]	; (800870c <_fstat_r+0x20>)
 80086f0:	2300      	movs	r3, #0
 80086f2:	4604      	mov	r4, r0
 80086f4:	4608      	mov	r0, r1
 80086f6:	4611      	mov	r1, r2
 80086f8:	602b      	str	r3, [r5, #0]
 80086fa:	f7f8 fbd8 	bl	8000eae <_fstat>
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	d102      	bne.n	8008708 <_fstat_r+0x1c>
 8008702:	682b      	ldr	r3, [r5, #0]
 8008704:	b103      	cbz	r3, 8008708 <_fstat_r+0x1c>
 8008706:	6023      	str	r3, [r4, #0]
 8008708:	bd38      	pop	{r3, r4, r5, pc}
 800870a:	bf00      	nop
 800870c:	20000314 	.word	0x20000314

08008710 <_isatty_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d06      	ldr	r5, [pc, #24]	; (800872c <_isatty_r+0x1c>)
 8008714:	2300      	movs	r3, #0
 8008716:	4604      	mov	r4, r0
 8008718:	4608      	mov	r0, r1
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	f7f8 fbd7 	bl	8000ece <_isatty>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_isatty_r+0x1a>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_isatty_r+0x1a>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	20000314 	.word	0x20000314

08008730 <_lseek_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4d07      	ldr	r5, [pc, #28]	; (8008750 <_lseek_r+0x20>)
 8008734:	4604      	mov	r4, r0
 8008736:	4608      	mov	r0, r1
 8008738:	4611      	mov	r1, r2
 800873a:	2200      	movs	r2, #0
 800873c:	602a      	str	r2, [r5, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	f7f8 fbd0 	bl	8000ee4 <_lseek>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_lseek_r+0x1e>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_lseek_r+0x1e>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	20000314 	.word	0x20000314

08008754 <__malloc_lock>:
 8008754:	4801      	ldr	r0, [pc, #4]	; (800875c <__malloc_lock+0x8>)
 8008756:	f7fe bf00 	b.w	800755a <__retarget_lock_acquire_recursive>
 800875a:	bf00      	nop
 800875c:	20000308 	.word	0x20000308

08008760 <__malloc_unlock>:
 8008760:	4801      	ldr	r0, [pc, #4]	; (8008768 <__malloc_unlock+0x8>)
 8008762:	f7fe befb 	b.w	800755c <__retarget_lock_release_recursive>
 8008766:	bf00      	nop
 8008768:	20000308 	.word	0x20000308

0800876c <_malloc_usable_size_r>:
 800876c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008770:	1f18      	subs	r0, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	bfbc      	itt	lt
 8008776:	580b      	ldrlt	r3, [r1, r0]
 8008778:	18c0      	addlt	r0, r0, r3
 800877a:	4770      	bx	lr

0800877c <_read_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d07      	ldr	r5, [pc, #28]	; (800879c <_read_r+0x20>)
 8008780:	4604      	mov	r4, r0
 8008782:	4608      	mov	r0, r1
 8008784:	4611      	mov	r1, r2
 8008786:	2200      	movs	r2, #0
 8008788:	602a      	str	r2, [r5, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	f7f8 fb4a 	bl	8000e24 <_read>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d102      	bne.n	800879a <_read_r+0x1e>
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	b103      	cbz	r3, 800879a <_read_r+0x1e>
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	20000314 	.word	0x20000314

080087a0 <_init>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	bf00      	nop
 80087a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a6:	bc08      	pop	{r3}
 80087a8:	469e      	mov	lr, r3
 80087aa:	4770      	bx	lr

080087ac <_fini>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	bf00      	nop
 80087b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087b2:	bc08      	pop	{r3}
 80087b4:	469e      	mov	lr, r3
 80087b6:	4770      	bx	lr
